var o=class{constructor(){this.structure={}}initialize(t){this.structure=JSON.parse(JSON.stringify(t))}applyDiff(t,e){this.structure[t]||console.warn(`[Arizona] StatefulId ${t} not found in structure`);for(let[r,i]of e)this.structure[t].dynamic[r-1]=i}generateHTML(t){let e=this.structure[t];return e?this.zipStaticDynamic(e.static,e.dynamic):""}zipStaticDynamic(t,e){let r=[],i=Math.max(t.length,e.length);for(let s=0;s<i;s++)s<t.length&&r.push(t[s]),s<e.length&&r.push(this.normalizeDynamicElement(e[s]));return r.join("")}normalizeDynamicElement(t){return typeof t=="string"?t:t&&t.type==="stateful"?this.generateHTML(t.id):t&&t.type==="stateless"?this.generateHTMLFromStructure(t.structure):t&&t.type==="list"?this.generateListHTML(t):Array.isArray(t)?this.flattenIoData(t):String(t)}flattenIoData(t){return typeof t=="string"?t:typeof t=="number"?String(t):Array.isArray(t)?t.map(e=>this.flattenIoData(e)).join(""):t&&typeof t=="object"?t.type==="stateful"?this.generateHTML(t.id):t.type==="stateless"?this.generateHTMLFromStructure(t.structure):t.type==="list"?this.generateListHTML(t):String(t):String(t||"")}generateHTMLFromStructure(t){let e=[],r=Object.keys(t).map(i=>parseInt(i)).sort((i,s)=>i-s);for(let i of r){let s=t[i];typeof s=="string"?e.push(s):Array.isArray(s)?e.push(this.flattenIoData(s)):e.push(String(s))}return e.join("")}generateListHTML(t){let{static:e,dynamic:r}=t,i=[];for(let s of r){let c=[],p=Object.keys(s).map(a=>parseInt(a)).sort((a,f)=>a-f),n=0;for(let a of p)n<e.length&&(c.push(e[n]),n++),c.push(String(s[a]));for(;n<e.length;)c.push(e[n]),n++;i.push(c.join(""))}return i.join("")}getStructure(){return JSON.parse(JSON.stringify(this.structure))}isInitialized(){return Object.keys(this.structure).length>0}getComponent(t){return this.structure[t]||null}hasComponent(t){return t in this.structure}getComponentIds(){return Object.keys(this.structure)}clear(){this.structure={}}createPatch(t){return{type:"html_patch",statefulId:t,html:this.generateHTML(t),timestamp:Date.now()}}createInitialPatch(t){return{type:"initial_render",statefulId:t,html:this.generateHTML(t),structure:this.getStructure(),timestamp:Date.now()}}};var u=o;var h=class{constructor(){this.socket=null,this.connected=!1,this.messageQueue=[],this.hierarchical=new u,self.onmessage=t=>{let{type:e,data:r}=t.data;switch(e){case"connect":this.connect(r.url);break;case"send":this.sendMessage(r);break;case"disconnect":this.disconnect();break}}}connect(t){this.connected||(this.socket=new WebSocket(t),this.socket.onopen=()=>{this.connected=!0,this.postMessage({type:"status",data:{status:"connected"}}),this.flushMessageQueue()},this.socket.onmessage=e=>{let r=JSON.parse(e.data);this.handleWebSocketMessage(r)},this.socket.onclose=()=>{this.connected=!1,this.postMessage({type:"status",data:{status:"disconnected"}})},this.socket.onerror=e=>{this.postMessage({type:"error",data:{error:e.toString()}})})}sendMessage(t){let e=JSON.stringify(t);this.connected&&this.socket.readyState===WebSocket.OPEN?this.socket.send(e):this.messageQueue.push(e)}flushMessageQueue(){for(;this.messageQueue.length>0;){let t=this.messageQueue.shift();if(this.socket.readyState===WebSocket.OPEN)this.socket.send(t);else{this.messageQueue.unshift(t);break}}}disconnect(){this.socket&&(this.socket.close(),this.socket=null),this.connected=!1,this.hierarchical.clear()}handleWebSocketMessage(t){try{switch(t.type){case"initial_render":this.handleInitialRender(t);break;case"diff":this.handleDiff(t);break;default:this.postMessage({type:"message",data:t});break}}catch(e){console.error("[Arizona Worker] Error handling message:",e),this.postMessage({type:"error",data:{error:`Message handling failed: ${e.message}`}})}}handleInitialRender(t){this.hierarchical.initialize(t.structure);let e=this.hierarchical.createInitialPatch(t.stateful_id);this.postMessage({type:"html_patch",data:{patch:e,isInitial:!0}}),console.log("[Arizona Worker] Initial render processed")}handleDiff(t){if(!this.hierarchical.isInitialized())throw new Error("Hierarchical structure not initialized");this.hierarchical.applyDiff(t.stateful_id,t.changes);let e=this.hierarchical.createPatch(t.stateful_id);this.postMessage({type:"html_patch",data:{patch:e,isInitial:!1}}),console.log("[Arizona Worker] Diff applied and patch sent")}getHierarchicalState(){return{initialized:this.hierarchical.isInitialized(),componentIds:this.hierarchical.getComponentIds(),structure:this.hierarchical.getStructure()}}postMessage(t){self.postMessage(t)}};new h;
//# sourceMappingURL=arizona-worker.min.js.map
