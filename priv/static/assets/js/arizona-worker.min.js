var h=class{constructor(){this.structure={}}initialize(e){this.structure=JSON.parse(JSON.stringify(e))}applyDiff(e){for(let[t,s]of e){if(!this.structure[t]){console.warn(`[Arizona] StatefulId ${t} not found in structure`);continue}for(let[i,r]of s)this.structure[t][i]=r}}generateHTML(e="root"){let t=this.structure[e];if(!t)return"";let s=[],i=Object.keys(t).map(r=>parseInt(r)).sort((r,n)=>r-n);for(let r of i){let n=t[r];typeof n=="string"?s.push(n):n&&n.type==="stateful"?s.push(this.generateHTML(n.id)):n&&n.type==="stateless"?s.push(this.generateHTMLFromStructure(n.structure)):n&&n.type==="list"?s.push(this.generateListHTML(n)):s.push(String(n))}return s.join("")}generateHTMLFromStructure(e){let t=[],s=Object.keys(e).map(i=>parseInt(i)).sort((i,r)=>i-r);for(let i of s){let r=e[i];typeof r=="string"?t.push(r):t.push(String(r))}return t.join("")}generateListHTML(e){let{static:t,dynamic:s}=e,i=[];for(let r of s){let n=[],f=Object.keys(r).map(o=>parseInt(o)).sort((o,p)=>o-p),a=0;for(let o of f)a<t.length&&(n.push(t[a]),a++),n.push(String(r[o]));for(;a<t.length;)n.push(t[a]),a++;i.push(n.join(""))}return i.join("")}getStructure(){return JSON.parse(JSON.stringify(this.structure))}isInitialized(){return Object.keys(this.structure).length>0}getComponent(e){return this.structure[e]||null}hasComponent(e){return e in this.structure}getComponentIds(){return Object.keys(this.structure)}clear(){this.structure={}}createPatch(e="[data-arizona-root]",t="root"){return{type:"html_patch",selector:e,html:this.generateHTML(t),timestamp:Date.now()}}createInitialPatch(e="[data-arizona-root]",t="root"){return{type:"initial_render",selector:e,html:this.generateHTML(t),structure:this.getStructure(),timestamp:Date.now()}}static validateStructure(e){if(!e||typeof e!="object")return!1;for(let[t,s]of Object.entries(e)){if(!s||typeof s!="object")return!1;let i=Object.keys(s);for(let r of i)if(isNaN(parseInt(r)))return!1}return!0}static validateDiff(e){if(!Array.isArray(e))return!1;for(let t of e){if(!Array.isArray(t)||t.length!==2)return!1;let[s,i]=t;if(typeof s!="string"||!Array.isArray(i))return!1;for(let r of i){if(!Array.isArray(r)||r.length!==2)return!1;let[n]=r;if(isNaN(parseInt(n)))return!1}}return!0}};var c=h;var l=class{constructor(){this.socket=null,this.connected=!1,this.messageQueue=[],this.hierarchical=new c,self.onmessage=e=>{let{type:t,data:s}=e.data;switch(t){case"connect":this.connect(s.url);break;case"send":this.sendMessage(s);break;case"disconnect":this.disconnect();break}}}connect(e){this.connected||(this.socket=new WebSocket(e),this.socket.onopen=()=>{this.connected=!0,this.postMessage({type:"status",data:{status:"connected"}}),this.flushMessageQueue()},this.socket.onmessage=t=>{let s=JSON.parse(t.data);this.handleWebSocketMessage(s)},this.socket.onclose=()=>{this.connected=!1,this.postMessage({type:"status",data:{status:"disconnected"}})},this.socket.onerror=t=>{this.postMessage({type:"error",data:{error:t.toString()}})})}sendMessage(e){let t=JSON.stringify(e);this.connected&&this.socket.readyState===WebSocket.OPEN?this.socket.send(t):this.messageQueue.push(t)}flushMessageQueue(){for(;this.messageQueue.length>0;){let e=this.messageQueue.shift();if(this.socket.readyState===WebSocket.OPEN)this.socket.send(e);else{this.messageQueue.unshift(e);break}}}disconnect(){this.socket&&(this.socket.close(),this.socket=null),this.connected=!1,this.hierarchical.clear()}handleWebSocketMessage(e){try{switch(e.type){case"initial_render":this.handleInitialRender(e);break;case"diff":this.handleDiff(e);break;default:this.postMessage({type:"message",data:e});break}}catch(t){console.error("[Arizona Worker] Error handling message:",t),this.postMessage({type:"error",data:{error:`Message handling failed: ${t.message}`}})}}handleInitialRender(e){if(!c.validateStructure(e.structure))throw new Error("Invalid hierarchical structure format");this.hierarchical.initialize(e.structure);let t=this.hierarchical.createInitialPatch();this.postMessage({type:"html_patch",data:{patch:t,isInitial:!0}}),console.log("[Arizona Worker] Initial render processed")}handleDiff(e){if(!c.validateDiff(e.changes))throw new Error("Invalid diff changes format");if(!this.hierarchical.isInitialized())throw new Error("Hierarchical structure not initialized");this.hierarchical.applyDiff(e.changes);let t=this.hierarchical.createPatch();this.postMessage({type:"html_patch",data:{patch:t,isInitial:!1}}),console.log("[Arizona Worker] Diff applied and patch sent")}getHierarchicalState(){return{initialized:this.hierarchical.isInitialized(),componentIds:this.hierarchical.getComponentIds(),structure:this.hierarchical.getStructure()}}postMessage(e){self.postMessage(e)}};new l;
//# sourceMappingURL=arizona-worker.min.js.map
