{"version":3,"file":"arizona-worker.min.js","sources":["../../../../assets/js/arizona-hierarchical.js","../../../../assets/js/arizona-worker.js"],"sourcesContent":["/**\n * Arizona Hierarchical Client\n *\n * Standalone module for managing hierarchical structures and HTML generation.\n * Used by both arizona-worker.js and arizona.js for consistent structure handling.\n *\n * Features:\n * - Initialize with hierarchical structures from WebSocket\n * - Apply diffs from arizona_differ to update structures\n * - Generate HTML from hierarchical structures\n * - Support for nested stateful/stateless components and lists\n */\n\n/**\n * ArizonaHierarchical - Client-side hierarchical structure manager\n */\nexport class ArizonaHierarchical {\n  constructor() {\n    this.structure = new Map();\n  }\n\n  /**\n   * Initialize with hierarchical structure from server\n   * @param {Object} structure - Hierarchical structure from arizona_hierarchical\n   */\n  initialize(structure) {\n    this.structure = new Map(Object.entries(JSON.parse(JSON.stringify(structure)))); // Deep clone and convert to Map\n  }\n\n  /**\n   * Apply diff changes from arizona_differ to hierarchical structure\n   * @param {string} statefulId - Stateful ID to render\n   * @param {Array|Object} changes - Changes in format: [[ElementIndex, Changes]] or hierarchical structure\n   */\n  applyDiff(statefulId, changes) {\n    // Check if changes is a hierarchical structure (fingerprint mismatch case)\n    if (changes?.type === 'stateful') {\n      this.structure.set(changes.id, changes);\n      return;\n    }\n\n    if (!this.structure.has(statefulId)) {\n      const sanitizedStatefulId = String(statefulId).replace(/\\r|\\n/g, '');\n      console.warn(`[Arizona] StatefulId '${sanitizedStatefulId}' not found in structure`);\n    }\n\n    for (const [elementIndex, newValue] of changes) {\n      // Check if newValue is a hierarchical structure (fingerprint mismatch)\n      if (newValue && typeof newValue === 'object' && newValue.type) {\n        this.structure.get(statefulId).dynamic[elementIndex - 1] = newValue;\n      } else if (Array.isArray(newValue)) {\n        const element = this.structure.get(statefulId).dynamic[elementIndex - 1];\n        if (element && element.type === 'list') {\n          this.structure.get(statefulId).dynamic[elementIndex - 1].dynamic = newValue;\n        } else if (element && element.type === 'stateless') {\n          // Traditional stateless diff - array of [index, value] pairs\n          newValue.forEach(([index, value]) => {\n            this.structure.get(statefulId).dynamic[elementIndex - 1].dynamic[index - 1] = value;\n          });\n        } else {\n          this.structure.get(statefulId).dynamic[elementIndex - 1] = newValue;\n        }\n      } else {\n        this.structure.get(statefulId).dynamic[elementIndex - 1] = newValue;\n      }\n    }\n  }\n\n  /**\n   * Generate HTML for stateful components\n   * @param {Object} element - Stateful element with id\n   * @returns {string} Generated HTML\n   */\n  generateStatefulHTML(statefulId) {\n    const struct = this.structure.get(statefulId);\n    if (!struct) {\n      const sanitizedStatefulId = String(statefulId).replace(/\\r|\\n/g, '');\n      console.warn(`[Arizona] StatefulId '${sanitizedStatefulId}' not found in structure`);\n    }\n\n    // Components always have static and dynamic arrays\n    return this.zipStaticDynamic(struct.static, struct.dynamic);\n  }\n\n  /**\n   * Generate HTML for stateless components\n   * @param {Object} element - Stateless element with static and dynamic arrays\n   * @returns {string} Generated HTML\n   */\n  generateStatelessHTML(element) {\n    return this.zipStaticDynamic(element.static, element.dynamic);\n  }\n\n  /**\n   * Generate HTML for list components\n   * @param {Object} listElement - List element with static template and dynamic data\n   * @returns {string} Generated HTML\n   */\n  generateListHTML(listElement) {\n    const { static: staticParts, dynamic: dynamicPartsList } = listElement;\n    return dynamicPartsList.reduce((acc, dynamicParts) => {\n      return acc + this.zipStaticDynamic(staticParts, dynamicParts);\n    }, '');\n  }\n\n  /**\n   * Zip static and dynamic arrays into HTML (matches arizona_renderer:zip_static_dynamic/2)\n   * @param {Array} staticParts - Static HTML parts\n   * @param {Array} dynamicParts - Dynamic content parts\n   * @returns {string} Generated HTML\n   */\n  zipStaticDynamic(staticParts, dynamicParts) {\n    const elements = [];\n    const maxLength = Math.max(staticParts.length, dynamicParts.length);\n\n    for (let i = 0; i < maxLength; i++) {\n      if (i < staticParts.length) {\n        elements.push(staticParts[i]);\n      }\n      if (i < dynamicParts.length) {\n        elements.push(this.normalizeDynamicElement(dynamicParts[i]));\n      }\n    }\n\n    return elements.join('');\n  }\n\n  /**\n   * Normalize a dynamic element to string (handles stateful, stateless, lists, etc.)\n   * @param {*} element - Dynamic element to normalize\n   * @returns {string} Normalized string content\n   */\n  normalizeDynamicElement(element) {\n    if (typeof element === 'string') {\n      return element;\n    } else if (element && element.type === 'stateful') {\n      // Recursively render nested stateful component\n      return this.generateStatefulHTML(element.id);\n    } else if (element && element.type === 'stateless') {\n      // Render stateless structure inline\n      return this.generateStatelessHTML(element);\n    } else if (element && element.type === 'list') {\n      // Render list elements\n      return this.generateListHTML(element);\n    } else if (Array.isArray(element)) {\n      // Handle nested arrays (iodata from server) - flatten recursively\n      return this.flattenIoData(element);\n    } else {\n      // Fallback for other types (numbers, etc.)\n      return String(element);\n    }\n  }\n\n  /**\n   * Flatten nested arrays (iodata from Erlang server) into a single string\n   * This handles the complex nested array structures that come from render_list\n   * and other server-side rendering operations that produce iodata.\n   *\n   * @param {Array|string|number} element - Element to flatten\n   * @returns {string} Flattened string without commas between array elements\n   */\n  flattenIoData(element) {\n    if (typeof element === 'string') {\n      return element;\n    } else if (typeof element === 'number') {\n      return String(element);\n    } else if (Array.isArray(element)) {\n      // Recursively flatten nested arrays\n      return element\n        .map((item) => {\n          return this.flattenIoData(item);\n        })\n        .join('');\n    } else if (element && typeof element === 'object') {\n      // Handle special object types\n      if (element.type === 'stateful') {\n        return this.generateStatefulHTML(element.id);\n      } else if (element.type === 'stateless') {\n        return this.generateStatelessHTML(element);\n      } else if (element.type === 'list') {\n        return this.generateListHTML(element);\n      } else {\n        // For other objects, try to convert to string\n        return String(element);\n      }\n    } else {\n      // Fallback for null, undefined, etc.\n      return String(element || '');\n    }\n  }\n\n  /**\n   * Get current structure (for debugging/testing)\n   * @returns {Object} Deep copy of current structure\n   */\n  getStructure() {\n    return JSON.parse(JSON.stringify(Object.fromEntries(this.structure)));\n  }\n\n  /**\n   * Check if structure has been initialized\n   * @returns {boolean} True if structure contains any components\n   */\n  isInitialized() {\n    return this.structure.size > 0;\n  }\n\n  /**\n   * Get all component IDs\n   * @returns {string[]} Array of all component IDs\n   */\n  getComponentIds() {\n    return Array.from(this.structure.keys());\n  }\n\n  /**\n   * Clear all structure data\n   */\n  clear() {\n    this.structure = new Map();\n  }\n\n  /**\n   * Create a patch object that can be sent to arizona.js for DOM updating\n   * This is used by the worker to send structured data to the main thread\n   * @param {string} statefulId - Stateful ID to render\n   * @returns {Object} Patch object with statefulId and HTML\n   */\n  createPatch(statefulId) {\n    return {\n      type: 'html_patch',\n      statefulId,\n      html: this.generateStatefulHTML(statefulId),\n    };\n  }\n}\n\n/**\n * Default export for convenience\n */\nexport default ArizonaHierarchical;\n","// Import ArizonaHierarchical for client-side structure management\nimport ArizonaHierarchical from './arizona-hierarchical.js';\n\n// Arizona WebWorker for WebSocket connection with hierarchical rendering\nclass ArizonaWebSocketWorker {\n  constructor() {\n    this.socket = null;\n    this.connected = false;\n    this.messageQueue = [];\n    this.hierarchical = new ArizonaHierarchical();\n\n    self.onmessage = (event) => {\n      const { type, data } = event.data;\n\n      switch (type) {\n        case 'connect':\n          this.connect(data.url);\n          break;\n        case 'send':\n          this.sendMessage(data);\n          break;\n        case 'disconnect':\n          this.disconnect();\n          break;\n      }\n    };\n  }\n\n  connect(url) {\n    if (this.connected) return;\n\n    this.socket = new WebSocket(url);\n\n    this.socket.onopen = () => {\n      this.connected = true;\n      this.postMessage({ type: 'status', data: { status: 'connected' } });\n      this.flushMessageQueue();\n    };\n\n    this.socket.onmessage = (event) => {\n      const message = JSON.parse(event.data);\n      this.handleWebSocketMessage(message);\n    };\n\n    this.socket.onclose = () => {\n      this.connected = false;\n      this.postMessage({ type: 'status', data: { status: 'disconnected' } });\n    };\n\n    this.socket.onerror = (error) => {\n      this.postMessage({ type: 'error', data: { error: error.toString() } });\n    };\n  }\n\n  sendMessage(data) {\n    const message = JSON.stringify(data);\n\n    if (this.connected && this.socket.readyState === WebSocket.OPEN) {\n      this.socket.send(message);\n    } else {\n      this.messageQueue.push(message);\n    }\n  }\n\n  flushMessageQueue() {\n    while (this.messageQueue.length > 0) {\n      const message = this.messageQueue.shift();\n      if (this.socket.readyState === WebSocket.OPEN) {\n        this.socket.send(message);\n      } else {\n        this.messageQueue.unshift(message);\n        break;\n      }\n    }\n  }\n\n  disconnect() {\n    if (this.socket) {\n      this.socket.close();\n      this.socket = null;\n    }\n    this.connected = false;\n    this.hierarchical.clear();\n  }\n\n  handleWebSocketMessage(message) {\n    try {\n      switch (message.type) {\n        case 'initial_render':\n          this.handleInitialRender(message);\n          break;\n        case 'diff':\n          this.handleDiff(message);\n          break;\n        case 'reload':\n          this.handleReload(message);\n          break;\n        case 'reply':\n          this.handleReply(message);\n          break;\n        case 'redirect':\n          this.handleRedirect(message);\n          break;\n        default:\n          this.handleUnknownMessage(message);\n      }\n    } catch (error) {\n      this.postMessage({\n        type: 'error',\n        data: { error: `Message handling failed: ${error.message}` },\n      });\n    }\n  }\n\n  handleInitialRender(message) {\n    // Initialize hierarchical structure\n    this.hierarchical.initialize(message.structure);\n  }\n\n  handleDiff(message) {\n    if (!this.hierarchical.isInitialized()) {\n      throw new Error('Hierarchical structure not initialized');\n    }\n\n    // Apply diff to hierarchical structure\n    this.hierarchical.applyDiff(message.stateful_id, message.changes);\n\n    // Create HTML patch\n    const patch = this.hierarchical.createPatch(message.stateful_id);\n\n    // Send to main thread for DOM application\n    this.postMessage({\n      type: 'html_patch',\n      data: { patch },\n    });\n  }\n\n  handleReload(message) {\n    // Send reload message to main thread\n    this.postMessage({\n      type: 'reload',\n      data: message,\n    });\n  }\n\n  handleReply(message) {\n    // Send reply message to main thread\n    this.postMessage({\n      type: 'reply',\n      data: message.data,\n    });\n  }\n\n  handleRedirect(message) {\n    // Send redirect message to main thread\n    this.postMessage({\n      type: 'redirect',\n      data: {\n        url: message.url,\n        target: message.target,\n      },\n    });\n  }\n\n  handleUnknownMessage(message) {\n    // Pass through other message types unchanged\n    this.postMessage(message);\n  }\n\n  postMessage(data) {\n    self.postMessage(data);\n  }\n}\n\nnew ArizonaWebSocketWorker();\n"],"names":["ArizonaHierarchical","structure","statefulId","changes","sanitizedStatefulId","elementIndex","newValue","element","index","value","struct","listElement","staticParts","dynamicPartsList","acc","dynamicParts","elements","maxLength","i","item","ArizonaWebSocketWorker","event","type","data","url","message","error","patch"],"mappings":"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"}