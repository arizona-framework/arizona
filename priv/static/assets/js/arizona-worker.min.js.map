{
  "version": 3,
  "sources": ["../../../../assets/js/arizona-worker.js"],
  "sourcesContent": ["// Arizona WebWorker for WebSocket connection\nclass ArizonaWebSocketWorker {\n  constructor() {\n    this.socket = null;\n    this.connected = false;\n    this.messageQueue = [];\n\n    self.onmessage = (event) => {\n      const { type, data } = event.data;\n\n      switch (type) {\n        case 'connect':\n          this.connect(data.url);\n          break;\n        case 'send':\n          this.sendMessage(data);\n          break;\n        case 'disconnect':\n          this.disconnect();\n          break;\n      }\n    };\n  }\n\n  connect(url) {\n    if (this.connected) return;\n\n    this.socket = new WebSocket(url);\n\n    this.socket.onopen = () => {\n      this.connected = true;\n      this.postMessage({ type: 'status', data: { status: 'connected' } });\n      this.flushMessageQueue();\n    };\n\n    this.socket.onmessage = (event) => {\n      const message = JSON.parse(event.data);\n      this.postMessage({ type: 'message', data: message });\n    };\n\n    this.socket.onclose = () => {\n      this.connected = false;\n      this.postMessage({ type: 'status', data: { status: 'disconnected' } });\n    };\n\n    this.socket.onerror = (error) => {\n      this.postMessage({ type: 'error', data: { error: error.toString() } });\n    };\n  }\n\n  sendMessage(data) {\n    const message = JSON.stringify(data);\n\n    if (this.connected && this.socket.readyState === WebSocket.OPEN) {\n      this.socket.send(message);\n    } else {\n      this.messageQueue.push(message);\n    }\n  }\n\n  flushMessageQueue() {\n    while (this.messageQueue.length > 0) {\n      const message = this.messageQueue.shift();\n      if (this.socket.readyState === WebSocket.OPEN) {\n        this.socket.send(message);\n      } else {\n        this.messageQueue.unshift(message);\n        break;\n      }\n    }\n  }\n\n  disconnect() {\n    if (this.socket) {\n      this.socket.close();\n      this.socket = null;\n    }\n    this.connected = false;\n  }\n\n  postMessage(data) {\n    self.postMessage(data);\n  }\n}\n\nnew ArizonaWebSocketWorker();\n"],
  "mappings": "MACA,IAAMA,EAAN,KAA6B,CAC3B,aAAc,CACZ,KAAK,OAAS,KACd,KAAK,UAAY,GACjB,KAAK,aAAe,CAAC,EAErB,KAAK,UAAaC,GAAU,CAC1B,GAAM,CAAE,KAAAC,EAAM,KAAAC,CAAK,EAAIF,EAAM,KAE7B,OAAQC,EAAM,CACZ,IAAK,UACH,KAAK,QAAQC,EAAK,GAAG,EACrB,MACF,IAAK,OACH,KAAK,YAAYA,CAAI,EACrB,MACF,IAAK,aACH,KAAK,WAAW,EAChB,KACJ,CACF,CACF,CAEA,QAAQC,EAAK,CACP,KAAK,YAET,KAAK,OAAS,IAAI,UAAUA,CAAG,EAE/B,KAAK,OAAO,OAAS,IAAM,CACzB,KAAK,UAAY,GACjB,KAAK,YAAY,CAAE,KAAM,SAAU,KAAM,CAAE,OAAQ,WAAY,CAAE,CAAC,EAClE,KAAK,kBAAkB,CACzB,EAEA,KAAK,OAAO,UAAaH,GAAU,CACjC,IAAMI,EAAU,KAAK,MAAMJ,EAAM,IAAI,EACrC,KAAK,YAAY,CAAE,KAAM,UAAW,KAAMI,CAAQ,CAAC,CACrD,EAEA,KAAK,OAAO,QAAU,IAAM,CAC1B,KAAK,UAAY,GACjB,KAAK,YAAY,CAAE,KAAM,SAAU,KAAM,CAAE,OAAQ,cAAe,CAAE,CAAC,CACvE,EAEA,KAAK,OAAO,QAAWC,GAAU,CAC/B,KAAK,YAAY,CAAE,KAAM,QAAS,KAAM,CAAE,MAAOA,EAAM,SAAS,CAAE,CAAE,CAAC,CACvE,EACF,CAEA,YAAYH,EAAM,CAChB,IAAME,EAAU,KAAK,UAAUF,CAAI,EAE/B,KAAK,WAAa,KAAK,OAAO,aAAe,UAAU,KACzD,KAAK,OAAO,KAAKE,CAAO,EAExB,KAAK,aAAa,KAAKA,CAAO,CAElC,CAEA,mBAAoB,CAClB,KAAO,KAAK,aAAa,OAAS,GAAG,CACnC,IAAMA,EAAU,KAAK,aAAa,MAAM,EACxC,GAAI,KAAK,OAAO,aAAe,UAAU,KACvC,KAAK,OAAO,KAAKA,CAAO,MACnB,CACL,KAAK,aAAa,QAAQA,CAAO,EACjC,KACF,CACF,CACF,CAEA,YAAa,CACP,KAAK,SACP,KAAK,OAAO,MAAM,EAClB,KAAK,OAAS,MAEhB,KAAK,UAAY,EACnB,CAEA,YAAYF,EAAM,CAChB,KAAK,YAAYA,CAAI,CACvB,CACF,EAEA,IAAIH",
  "names": ["ArizonaWebSocketWorker", "event", "type", "data", "url", "message", "error"]
}
