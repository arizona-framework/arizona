{
  "version": 3,
  "sources": ["../../../../assets/js/arizona-hierarchical.js", "../../../../assets/js/arizona-worker.js"],
  "sourcesContent": ["/**\n * Arizona Hierarchical Client\n *\n * Standalone module for managing hierarchical structures and HTML generation.\n * Used by both arizona-worker.js and arizona.js for consistent structure handling.\n *\n * Features:\n * - Initialize with hierarchical structures from WebSocket\n * - Apply diffs from arizona_differ to update structures\n * - Generate HTML from hierarchical structures\n * - Support for nested stateful/stateless components and lists\n */\n\n/**\n * ArizonaHierarchical - Client-side hierarchical structure manager\n */\nexport class ArizonaHierarchical {\n  constructor() {\n    this.structure = {};\n  }\n\n  /**\n   * Initialize with hierarchical structure from server\n   * @param {Object} structure - Hierarchical structure from arizona_hierarchical\n   */\n  initialize(structure) {\n    this.structure = JSON.parse(JSON.stringify(structure)); // Deep clone\n  }\n\n  /**\n   * Apply diff changes from arizona_differ to hierarchical structure\n   * @param {string} statefulId - Stateful ID to render\n   * @param {Array|Object} changes - Changes in format: [[ElementIndex, Changes]] or hierarchical structure\n   */\n  applyDiff(statefulId, changes) {\n    // Check if changes is a hierarchical structure (fingerprint mismatch case)\n    if (changes?.type === 'stateful') {\n      this.structure[changes.id] = changes;\n      return;\n    }\n\n    if (!this.structure[statefulId]) {\n      console.warn(`[Arizona] StatefulId ${statefulId} not found in structure`);\n    }\n\n    for (const [elementIndex, newValue] of changes) {\n      // Check if newValue is a hierarchical structure (fingerprint mismatch)\n      if (newValue && typeof newValue === 'object' && newValue.type) {\n        this.structure[statefulId].dynamic[elementIndex - 1] = newValue;\n      } else if (Array.isArray(newValue)) {\n        const element = this.structure[statefulId].dynamic[elementIndex - 1];\n        if (element && element.type === 'list') {\n          this.structure[statefulId].dynamic[elementIndex - 1].dynamic = newValue;\n        } else if (element && element.type === 'stateless') {\n          // Traditional stateless diff - array of [index, value] pairs\n          newValue.forEach(([index, value]) => {\n            this.structure[statefulId].dynamic[elementIndex - 1].dynamic[index - 1] = value;\n          });\n        } else {\n          this.structure[statefulId].dynamic[elementIndex - 1] = newValue;\n        }\n      } else {\n        this.structure[statefulId].dynamic[elementIndex - 1] = newValue;\n      }\n    }\n  }\n\n  /**\n   * Generate HTML for stateful components\n   * @param {Object} element - Stateful element with id\n   * @returns {string} Generated HTML\n   */\n  generateStatefulHTML(statefulId) {\n    const struct = this.structure[statefulId];\n    if (!struct) {\n      console.warn(`[Arizona] StatefulId ${statefulId} not found in structure`);\n    }\n\n    // Components always have static and dynamic arrays\n    return this.zipStaticDynamic(struct.static, struct.dynamic);\n  }\n\n  /**\n   * Generate HTML for stateless components\n   * @param {Object} element - Stateless element with static and dynamic arrays\n   * @returns {string} Generated HTML\n   */\n  generateStatelessHTML(element) {\n    return this.zipStaticDynamic(element.static, element.dynamic);\n  }\n\n  /**\n   * Generate HTML for list components\n   * @param {Object} listElement - List element with static template and dynamic data\n   * @returns {string} Generated HTML\n   */\n  generateListHTML(listElement) {\n    const { static: staticParts, dynamic: dynamicPartsList } = listElement;\n    return dynamicPartsList.reduce((acc, dynamicParts) => {\n      return acc + this.zipStaticDynamic(staticParts, dynamicParts);\n    }, '');\n  }\n\n  /**\n   * Zip static and dynamic arrays into HTML (matches arizona_renderer:zip_static_dynamic/2)\n   * @param {Array} staticParts - Static HTML parts\n   * @param {Array} dynamicParts - Dynamic content parts\n   * @returns {string} Generated HTML\n   */\n  zipStaticDynamic(staticParts, dynamicParts) {\n    const elements = [];\n    const maxLength = Math.max(staticParts.length, dynamicParts.length);\n\n    for (let i = 0; i < maxLength; i++) {\n      if (i < staticParts.length) {\n        elements.push(staticParts[i]);\n      }\n      if (i < dynamicParts.length) {\n        elements.push(this.normalizeDynamicElement(dynamicParts[i]));\n      }\n    }\n\n    return elements.join('');\n  }\n\n  /**\n   * Normalize a dynamic element to string (handles stateful, stateless, lists, etc.)\n   * @param {*} element - Dynamic element to normalize\n   * @returns {string} Normalized string content\n   */\n  normalizeDynamicElement(element) {\n    if (typeof element === 'string') {\n      return element;\n    } else if (element && element.type === 'stateful') {\n      // Recursively render nested stateful component\n      return this.generateStatefulHTML(element.id);\n    } else if (element && element.type === 'stateless') {\n      // Render stateless structure inline\n      return this.generateStatelessHTML(element);\n    } else if (element && element.type === 'list') {\n      // Render list elements\n      return this.generateListHTML(element);\n    } else if (Array.isArray(element)) {\n      // Handle nested arrays (iodata from server) - flatten recursively\n      return this.flattenIoData(element);\n    } else {\n      // Fallback for other types (numbers, etc.)\n      return String(element);\n    }\n  }\n\n  /**\n   * Flatten nested arrays (iodata from Erlang server) into a single string\n   * This handles the complex nested array structures that come from render_list\n   * and other server-side rendering operations that produce iodata.\n   *\n   * @param {Array|string|number} element - Element to flatten\n   * @returns {string} Flattened string without commas between array elements\n   */\n  flattenIoData(element) {\n    if (typeof element === 'string') {\n      return element;\n    } else if (typeof element === 'number') {\n      return String(element);\n    } else if (Array.isArray(element)) {\n      // Recursively flatten nested arrays\n      return element\n        .map((item) => {\n          return this.flattenIoData(item);\n        })\n        .join('');\n    } else if (element && typeof element === 'object') {\n      // Handle special object types\n      if (element.type === 'stateful') {\n        return this.generateStatefulHTML(element.id);\n      } else if (element.type === 'stateless') {\n        return this.generateStatelessHTML(element);\n      } else if (element.type === 'list') {\n        return this.generateListHTML(element);\n      } else {\n        // For other objects, try to convert to string\n        return String(element);\n      }\n    } else {\n      // Fallback for null, undefined, etc.\n      return String(element || '');\n    }\n  }\n\n  /**\n   * Generate HTML from a structure object (for stateless components)\n   * @param {Object} structure - Structure object with indexed elements\n   * @returns {string} Generated HTML\n   */\n  generateHTMLFromStructure(structure) {\n    const elements = [];\n    const sortedIndexes = Object.keys(structure)\n      .map((k) => {\n        return parseInt(k);\n      })\n      .sort((a, b) => {\n        return a - b;\n      });\n\n    for (const index of sortedIndexes) {\n      const element = structure[index];\n      if (typeof element === 'string') {\n        elements.push(element);\n      } else if (Array.isArray(element)) {\n        // Handle nested arrays in stateless structures too\n        elements.push(this.flattenIoData(element));\n      } else {\n        elements.push(String(element));\n      }\n    }\n\n    return elements.join('');\n  }\n\n  /**\n   * Get current structure (for debugging/testing)\n   * @returns {Object} Deep copy of current structure\n   */\n  getStructure() {\n    return JSON.parse(JSON.stringify(this.structure));\n  }\n\n  /**\n   * Check if structure has been initialized\n   * @returns {boolean} True if structure contains any components\n   */\n  isInitialized() {\n    return Object.keys(this.structure).length > 0;\n  }\n\n  /**\n   * Get component by ID\n   * @param {string} componentId - Component ID to retrieve\n   * @returns {Object|null} Component structure or null if not found\n   */\n  getComponent(componentId) {\n    return this.structure[componentId] || null;\n  }\n\n  /**\n   * Check if component exists\n   * @param {string} componentId - Component ID to check\n   * @returns {boolean} True if component exists\n   */\n  hasComponent(componentId) {\n    return componentId in this.structure;\n  }\n\n  /**\n   * Get all component IDs\n   * @returns {string[]} Array of all component IDs\n   */\n  getComponentIds() {\n    return Object.keys(this.structure);\n  }\n\n  /**\n   * Clear all structure data\n   */\n  clear() {\n    this.structure = {};\n  }\n\n  /**\n   * Create a patch object that can be sent to arizona.js for DOM updating\n   * This is used by the worker to send structured data to the main thread\n   * @param {string} statefulId - Stateful ID to render\n   * @returns {Object} Patch object with statefulId and HTML\n   */\n  createPatch(statefulId) {\n    return {\n      type: 'html_patch',\n      statefulId,\n      html: this.generateStatefulHTML(statefulId),\n      timestamp: Date.now(),\n    };\n  }\n\n  /**\n   * Create an initial render patch (used on first load)\n   * @param {string} statefulId - Stateful ID to render\n   * @returns {Object} Initial render patch object\n   */\n  createInitialPatch(statefulId) {\n    return {\n      type: 'initial_render',\n      statefulId,\n      html: this.generateStatefulHTML(statefulId),\n      structure: this.getStructure(),\n      timestamp: Date.now(),\n    };\n  }\n}\n\n/**\n * Utility functions for working with hierarchical structures\n */\nexport const ArizonaHierarchicalUtils = {\n  /**\n   * Deep clone a structure\n   * @param {Object} structure - Structure to clone\n   * @returns {Object} Deep cloned structure\n   */\n  cloneStructure(structure) {\n    return JSON.parse(JSON.stringify(structure));\n  },\n\n  /**\n   * Merge two structures (second structure wins on conflicts)\n   * @param {Object} base - Base structure\n   * @param {Object} overlay - Overlay structure\n   * @returns {Object} Merged structure\n   */\n  mergeStructures(base, overlay) {\n    const merged = this.cloneStructure(base);\n\n    for (const [componentId, component] of Object.entries(overlay)) {\n      merged[componentId] = { ...merged[componentId], ...component };\n    }\n\n    return merged;\n  },\n\n  /**\n   * Extract all text content from a structure\n   * @param {Object} structure - Structure to extract text from\n   * @param {string} rootId - Stateful ID of the root element\n   * @returns {string} Extracted text content\n   */\n  extractTextContent(structure, rootId) {\n    const client = new ArizonaHierarchical();\n    client.initialize(structure);\n    const html = client.generateStatefulHTML(rootId);\n\n    // Simple HTML tag removal for text extraction\n    return html.replace(/<[^>]*>/g, '').trim();\n  },\n\n  /**\n   * Get statistics about a structure\n   * @param {Object} structure - Structure to analyze\n   * @returns {Object} Statistics object\n   */\n  getStructureStats(structure) {\n    let componentCount = 0;\n    let elementCount = 0;\n    let statefulRefs = 0;\n    let statelessComponents = 0;\n    let listComponents = 0;\n\n    for (const [componentId, component] of Object.entries(structure)) {\n      componentCount++;\n\n      for (const element of Object.values(component)) {\n        elementCount++;\n\n        if (element && typeof element === 'object') {\n          if (element.type === 'stateful') {\n            statefulRefs++;\n          } else if (element.type === 'stateless') {\n            statelessComponents++;\n          } else if (element.type === 'list') {\n            listComponents++;\n          }\n        }\n      }\n    }\n\n    return {\n      componentCount,\n      elementCount,\n      statefulRefs,\n      statelessComponents,\n      listComponents,\n    };\n  },\n};\n\n/**\n * Default export for convenience\n */\nexport default ArizonaHierarchical;\n", "// Import ArizonaHierarchical for client-side structure management\nimport ArizonaHierarchical from './arizona-hierarchical.js';\n\n// Arizona WebWorker for WebSocket connection with hierarchical rendering\nclass ArizonaWebSocketWorker {\n  constructor() {\n    this.socket = null;\n    this.connected = false;\n    this.messageQueue = [];\n    this.hierarchical = new ArizonaHierarchical();\n\n    self.onmessage = (event) => {\n      const { type, data } = event.data;\n\n      switch (type) {\n        case 'connect':\n          this.connect(data.url);\n          break;\n        case 'send':\n          this.sendMessage(data);\n          break;\n        case 'disconnect':\n          this.disconnect();\n          break;\n      }\n    };\n  }\n\n  connect(url) {\n    if (this.connected) return;\n\n    this.socket = new WebSocket(url);\n\n    this.socket.onopen = () => {\n      this.connected = true;\n      this.postMessage({ type: 'status', data: { status: 'connected' } });\n      this.flushMessageQueue();\n    };\n\n    this.socket.onmessage = (event) => {\n      const message = JSON.parse(event.data);\n      this.handleWebSocketMessage(message);\n    };\n\n    this.socket.onclose = () => {\n      this.connected = false;\n      this.postMessage({ type: 'status', data: { status: 'disconnected' } });\n    };\n\n    this.socket.onerror = (error) => {\n      this.postMessage({ type: 'error', data: { error: error.toString() } });\n    };\n  }\n\n  sendMessage(data) {\n    const message = JSON.stringify(data);\n\n    if (this.connected && this.socket.readyState === WebSocket.OPEN) {\n      this.socket.send(message);\n    } else {\n      this.messageQueue.push(message);\n    }\n  }\n\n  flushMessageQueue() {\n    while (this.messageQueue.length > 0) {\n      const message = this.messageQueue.shift();\n      if (this.socket.readyState === WebSocket.OPEN) {\n        this.socket.send(message);\n      } else {\n        this.messageQueue.unshift(message);\n        break;\n      }\n    }\n  }\n\n  disconnect() {\n    if (this.socket) {\n      this.socket.close();\n      this.socket = null;\n    }\n    this.connected = false;\n    this.hierarchical.clear();\n  }\n\n  handleWebSocketMessage(message) {\n    try {\n      switch (message.type) {\n        case 'initial_render':\n          this.handleInitialRender(message);\n          break;\n        case 'diff':\n          this.handleDiff(message);\n          break;\n        default:\n          // Pass through other message types unchanged\n          this.postMessage({ type: 'message', data: message });\n          break;\n      }\n    } catch (error) {\n      console.error('[Arizona Worker] Error handling message:', error);\n      this.postMessage({\n        type: 'error',\n        data: { error: `Message handling failed: ${error.message}` },\n      });\n    }\n  }\n\n  handleInitialRender(message) {\n    // Initialize hierarchical structure\n    this.hierarchical.initialize(message.structure);\n\n    // Create initial render patch\n    const patch = this.hierarchical.createInitialPatch(message.stateful_id);\n\n    // Send to main thread for DOM application\n    this.postMessage({\n      type: 'html_patch',\n      data: {\n        patch,\n        isInitial: true,\n      },\n    });\n\n    console.log('[Arizona Worker] Initial render processed');\n  }\n\n  handleDiff(message) {\n    if (!this.hierarchical.isInitialized()) {\n      throw new Error('Hierarchical structure not initialized');\n    }\n\n    // Apply diff to hierarchical structure\n    this.hierarchical.applyDiff(message.stateful_id, message.changes);\n\n    // Create HTML patch\n    const patch = this.hierarchical.createPatch(message.stateful_id);\n\n    // Send to main thread for DOM application\n    this.postMessage({\n      type: 'html_patch',\n      data: {\n        patch,\n        isInitial: false,\n      },\n    });\n\n    console.log('[Arizona Worker] Diff applied and patch sent');\n  }\n\n  getHierarchicalState() {\n    return {\n      initialized: this.hierarchical.isInitialized(),\n      componentIds: this.hierarchical.getComponentIds(),\n      structure: this.hierarchical.getStructure(),\n    };\n  }\n\n  postMessage(data) {\n    self.postMessage(data);\n  }\n}\n\nnew ArizonaWebSocketWorker();\n"],
  "mappings": "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",
  "names": ["ArizonaHierarchical", "structure", "statefulId", "changes", "elementIndex", "newValue", "element", "index", "value", "struct", "listElement", "staticParts", "dynamicPartsList", "acc", "dynamicParts", "elements", "maxLength", "i", "item", "sortedIndexes", "k", "a", "b", "componentId", "arizona_hierarchical_default", "ArizonaHierarchical", "ArizonaWebSocketWorker", "arizona_hierarchical_default", "event", "type", "data", "url", "message", "error", "patch"]
}
