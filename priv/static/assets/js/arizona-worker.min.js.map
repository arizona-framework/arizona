{
  "version": 3,
  "sources": ["../../../../assets/js/arizona-patch.mjs", "../../../../assets/js/arizona-worker.mjs"],
  "sourcesContent": ["// --------------------------------------------------------------------\n// API function definitions\n// --------------------------------------------------------------------\n\nexport function patch(rendered, diff) {\n  if (rendered[0] === 'template' && rendered.length === 3) {\n    const staticList = rendered[1];\n    const dynamicList = [...rendered[2]];\n    return patchTemplate(staticList, dynamicList, diff);\n  } else if (rendered[0] === 'list' && rendered.length === 3) {\n    const staticList = rendered[1];\n    const dynamicList = [...rendered[2]];\n    return patchList(staticList, dynamicList);\n  } else {\n    return rendered;\n  }\n}\n\n// --------------------------------------------------------------------\n// Private functions\n// --------------------------------------------------------------------\n\nfunction patchTemplate(staticList, dynamicList, diff) {\n  dynamicList = patchDynamic(dynamicList, diff);\n  return zip(staticList, dynamicList, diff);\n}\n\nfunction patchList(staticList, dynamicList) {\n  return dynamicList.forEach((d) => zip(staticList, d));\n}\n\nfunction patchDynamic(dynamicList, diff) {\n  if (!diff) return dynamicList;\n  for (const [index, value] of Object.entries(diff)) {\n    if (typeof value === 'object' && !Array.isArray(value)) {\n      dynamicList[index] = patch(dynamicList[index], value);\n    } else {\n      dynamicList[index] = value;\n    }\n  }\n  return dynamicList;\n}\n\nfunction zip(staticList, dynamicList, diff) {\n  let str = '';\n  for (let i = 0; i < Math.max(staticList.length, dynamicList.length); i++) {\n    str += `${staticList[i] ?? ''}${patch(dynamicList[i] ?? '', diff ? diff[i] : null)}`;\n  }\n  return str;\n}\n", "import { patch } from './arizona-patch.mjs';\n\nconst state = {\n  queryParams: {},\n  socket: null,\n  views: [],\n  eventQueue: [],\n};\n\n// Messages from client\nself.onmessage = function (e) {\n  const { data: msg } = e;\n\n  console.info('[WebWorker] client sent:', msg);\n\n  if (typeof msg !== 'object' || !msg.subject) {\n    console.error('[WebWorker] invalid message format:', msg);\n    return;\n  }\n\n  switch (msg.subject) {\n    case 'connect': {\n      const { ref, queryParams } = msg.attachment;\n      connect(ref, queryParams);\n      break;\n    }\n    default:\n      sendMsgToServer(msg);\n  }\n};\n\nfunction connect(ref, queryParams) {\n  return new Promise((resolve) => {\n    const url = genSocketUrl(queryParams);\n    const socket = new WebSocket(url);\n\n    state.queryParams = queryParams;\n    state.socket = socket;\n\n    socket.onopen = function () {\n      console.info('[WebSocket] connected:', state);\n\n      const queuedEvents = [...state.eventQueue];\n      state.eventQueue.length = 0;\n      queuedEvents.forEach(sendMsgToServer);\n\n      sendMsgToClient(ref, undefined, 'connected', true);\n\n      resolve();\n    };\n\n    socket.onclose = function (e) {\n      console.info('[WebSocket] disconnected:', e);\n      sendMsgToClient(ref, undefined, 'connected', false);\n    };\n\n    // Messages from server\n    socket.onmessage = function (e) {\n      console.info('[WebSocket] msg:', e.data);\n      const data = JSON.parse(e.data);\n      Array.isArray(data) ? data.forEach(handleEvent) : handleEvent(data);\n    };\n  });\n}\n\nfunction handleEvent(data) {\n  const eventName = data[0];\n  const [ref, viewId, payload] = data[1];\n  switch (eventName) {\n    case 'init': {\n      state.views = payload;\n      break;\n    }\n    case 'patch': {\n      const rendered = state.views[viewId];\n      const html = patch(rendered, payload);\n      sendMsgToClient(ref, viewId, 'patch', html);\n      break;\n    }\n    default: {\n      sendMsgToClient(ref, viewId, eventName, payload);\n      break;\n    }\n  }\n}\n\nfunction sendMsgToClient(ref, viewId, eventName, payload) {\n  self.postMessage({ ref, viewId, eventName, payload });\n}\n\nfunction sendMsgToServer({ subject, attachment }) {\n  if (isSocketOpen()) {\n    state.socket.send(JSON.stringify([subject, attachment]));\n  } else {\n    state.eventQueue.push({ subject, attachment });\n    console.warn('[WebSocket] not ready to send messages');\n  }\n}\n\nfunction isSocketOpen() {\n  return state.socket.readyState === WebSocket.OPEN;\n}\n\nfunction genSocketUrl(queryParams) {\n  const proto = 'ws';\n  const host = location.host;\n  const uri = '/websocket';\n  const queryString = `?${Object.keys(queryParams)\n    .map((key) => `${key}=${encodeURIComponent(queryParams[key])}`)\n    .join('&')}`;\n  return `${proto}://${host}${uri}${queryString}`;\n}\n"],
  "mappings": "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",
  "names": ["patch", "rendered", "diff", "staticList", "dynamicList", "patchTemplate", "patchList", "patchDynamic", "zip", "d", "index", "value", "str", "i", "state", "msg", "ref", "queryParams", "connect", "sendMsgToServer", "resolve", "url", "genSocketUrl", "socket", "queuedEvents", "sendMsgToClient", "e", "data", "handleEvent", "eventName", "viewId", "payload", "rendered", "html", "patch", "subject", "attachment", "isSocketOpen", "proto", "host", "uri", "queryString", "key"]
}
