/*! Arizona Framework Client v0.2.0 | Apache-2.0 License */
const Z = '/*! Arizona Framework Client v0.2.0 | Apache-2.0 License */(function(){"use strict";class a{constructor(){this.structure=new Map}initialize(t){this.structure=new Map(Object.entries(JSON.parse(JSON.stringify(t))))}applyDiff(t,e){if(e?.type==="stateful"){this.structure.set(e.id,e);return}if(!this.structure.has(t)){const s=String(t).replace(/\\r|\\n/g,"");console.warn(`[Arizona] StatefulId \'${s}\' not found in structure`)}const i=this.structure.get(t);console.log(`[DEBUG] applyDiff to ${t}:`,{changes:e,"component.dynamic (${component.dynamic.length} items) before":i.dynamic.map((s,r)=>s&&typeof s=="object"?`[${r}]: ${s.type||"object"} ${s.id||""}`:`[${r}]: ${JSON.stringify(s)}`)});for(const[s,r]of e)console.log(`[DEBUG] Applying change to index ${s} (0-based: ${s-1}):`,{"existing value":i.dynamic[s-1],"new value":r}),this.applyDiffValue(i.dynamic,s-1,r);console.log(`[DEBUG] applyDiff to ${t}:`,{"component.dynamic after":i.dynamic.map((s,r)=>s&&typeof s=="object"?`[${r}]: ${s.type||"object"} ${s.id||""}`:`[${r}]: ${JSON.stringify(s)}`)})}applyDiffValue(t,e,i){const s=t[e];if(i&&typeof i=="object"&&i.type){console.log(`[DEBUG] applyDiffValue: Replacing with hierarchical structure at index ${e}`,i),t[e]=i;return}if(s&&typeof s=="object"&&s.type==="stateful"){console.log(`[DEBUG] applyDiffValue: PRESERVING stateful component at index ${e}:`,s.id,"ignoring value:",i);return}if(Array.isArray(i)){if(s&&s.type==="list"){s.dynamic=i;return}if(s&&s.type==="stateless"){i.forEach(([r,o])=>{this.applyDiffValue(s.dynamic,r-1,o)});return}t[e]=i;return}t[e]=i}generateStatefulHTML(t){const e=this.structure.get(t);if(!e){const i=String(t).replace(/\\r|\\n/g,"");console.warn(`[Arizona] StatefulId \'${i}\' not found in structure`)}return this.zipStaticDynamic(e.static,e.dynamic)}generateStatelessHTML(t){return this.zipStaticDynamic(t.static,t.dynamic)}generateListHTML(t){const{static:e,dynamic:i}=t;return i.reduce((s,r)=>s+this.zipStaticDynamic(e,r),"")}zipStaticDynamic(t,e){const i=[],s=Math.max(t.length,e.length);for(let r=0;r<s;r++)r<t.length&&i.push(t[r]),r<e.length&&i.push(this.normalizeDynamicElement(e[r]));return i.join("")}normalizeDynamicElement(t){return typeof t=="string"?t:t&&t.type==="stateful"?this.generateStatefulHTML(t.id):t&&t.type==="stateless"?this.generateStatelessHTML(t):t&&t.type==="list"?this.generateListHTML(t):Array.isArray(t)?this.flattenIoData(t):String(t)}flattenIoData(t){return typeof t=="string"?t:typeof t=="number"?String(t):Array.isArray(t)?t.map(e=>this.flattenIoData(e)).join(""):t&&typeof t=="object"?t.type==="stateful"?this.generateStatefulHTML(t.id):t.type==="stateless"?this.generateStatelessHTML(t):t.type==="list"?this.generateListHTML(t):String(t):String(t||"")}getStructure(){return JSON.parse(JSON.stringify(Object.fromEntries(this.structure)))}isInitialized(){return this.structure.size>0}getComponentIds(){return Array.from(this.structure.keys())}clear(){this.structure=new Map}createPatch(t){return{type:"html_patch",statefulId:t,html:this.generateStatefulHTML(t)}}}class n{constructor(){this.socket=null,this.connected=!1,this.messageQueue=[],this.hierarchical=new a,self.onmessage=t=>{const{type:e,data:i}=t.data;switch(e){case"connect":this.connect(i.url);break;case"send":this.sendMessage(i);break;case"disconnect":this.disconnect();break}}}connect(t){this.connected||(this.socket=new WebSocket(t),this.socket.onopen=()=>{this.connected=!0,this.postMessage({type:"status",data:{status:"connected"}}),this.flushMessageQueue()},this.socket.onmessage=e=>{const i=JSON.parse(e.data);this.handleWebSocketMessage(i)},this.socket.onclose=()=>{this.connected=!1,this.postMessage({type:"status",data:{status:"disconnected"}})},this.socket.onerror=e=>{this.postMessage({type:"error",data:{error:e.toString()}})})}sendMessage(t){const e=JSON.stringify(t);this.connected&&this.socket.readyState===WebSocket.OPEN?this.socket.send(e):this.messageQueue.push(e)}flushMessageQueue(){for(;this.messageQueue.length>0;){const t=this.messageQueue.shift();if(this.socket.readyState===WebSocket.OPEN)this.socket.send(t);else{this.messageQueue.unshift(t);break}}}disconnect(){this.socket&&(this.socket.close(),this.socket=null),this.connected=!1,this.hierarchical.clear()}handleWebSocketMessage(t){try{switch(t.type){case"initial_render":this.handleInitialRender(t);break;case"diff":this.handleDiff(t);break;case"reload":this.handleReload(t);break;case"dispatch":this.handleDispatch(t);break;case"reply":this.handleReply(t);break;case"redirect":this.handleRedirect(t);break;default:this.handleUnknownMessage(t)}}catch(e){this.postMessage({type:"error",data:{error:`Message handling failed: ${e.message}`}})}}handleInitialRender(t){this.hierarchical.initialize(t.structure)}handleDiff(t){if(!this.hierarchical.isInitialized())throw new Error("Hierarchical structure not initialized");this.hierarchical.applyDiff(t.stateful_id,t.changes);const e=this.hierarchical.createPatch(t.stateful_id);this.postMessage({type:"html_patch",data:{patch:e}})}handleReload(t){this.postMessage({type:"reload",data:t})}handleDispatch(t){this.postMessage({type:"dispatch",data:t})}handleReply(t){this.postMessage({type:"reply",data:t})}handleRedirect(t){this.postMessage({type:"redirect",data:{url:t.url,target:t.target}})}handleUnknownMessage(t){this.postMessage(t)}postMessage(t){self.postMessage(t)}}new n})();\n//# sourceMappingURL=arizona-worker.min.js.map\n', J = typeof self < "u" && self.Blob && new Blob(["(self.URL || self.webkitURL).revokeObjectURL(self.location.href);", Z], { type: "text/javascript;charset=utf-8" });
function ae(r) {
  let e;
  try {
    if (e = J && (self.URL || self.webkitURL).createObjectURL(J), !e) throw "";
    const t = new Worker(e, {
      name: r?.name
    });
    return t.addEventListener("error", () => {
      (self.URL || self.webkitURL).revokeObjectURL(e);
    }), t;
  } catch {
    return new Worker(
      "data:text/javascript;charset=utf-8," + encodeURIComponent(Z),
      {
        name: r?.name
      }
    );
  }
}
var Q = 11;
function le(r, e) {
  var t = e.attributes, i, n, c, h, p;
  if (!(e.nodeType === Q || r.nodeType === Q)) {
    for (var g = t.length - 1; g >= 0; g--)
      i = t[g], n = i.name, c = i.namespaceURI, h = i.value, c ? (n = i.localName || n, p = r.getAttributeNS(c, n), p !== h && (i.prefix === "xmlns" && (n = i.name), r.setAttributeNS(c, n, h))) : (p = r.getAttribute(n), p !== h && r.setAttribute(n, h));
    for (var b = r.attributes, T = b.length - 1; T >= 0; T--)
      i = b[T], n = i.name, c = i.namespaceURI, c ? (n = i.localName || n, e.hasAttributeNS(c, n) || r.removeAttributeNS(c, n)) : e.hasAttribute(n) || r.removeAttribute(n);
  }
}
var C, ce = "http://www.w3.org/1999/xhtml", u = typeof document > "u" ? void 0 : document, oe = !!u && "content" in u.createElement("template"), he = !!u && u.createRange && "createContextualFragment" in u.createRange();
function de(r) {
  var e = u.createElement("template");
  return e.innerHTML = r, e.content.childNodes[0];
}
function fe(r) {
  C || (C = u.createRange(), C.selectNode(u.body));
  var e = C.createContextualFragment(r);
  return e.childNodes[0];
}
function ue(r) {
  var e = u.createElement("body");
  return e.innerHTML = r, e.childNodes[0];
}
function pe(r) {
  return r = r.trim(), oe ? de(r) : he ? fe(r) : ue(r);
}
function x(r, e) {
  var t = r.nodeName, i = e.nodeName, n, c;
  return t === i ? !0 : (n = t.charCodeAt(0), c = i.charCodeAt(0), n <= 90 && c >= 97 ? t === i.toUpperCase() : c <= 90 && n >= 97 ? i === t.toUpperCase() : !1);
}
function ge(r, e) {
  return !e || e === ce ? u.createElement(r) : u.createElementNS(e, r);
}
function ye(r, e) {
  for (var t = r.firstChild; t; ) {
    var i = t.nextSibling;
    e.appendChild(t), t = i;
  }
  return e;
}
function W(r, e, t) {
  r[t] !== e[t] && (r[t] = e[t], r[t] ? r.setAttribute(t, "") : r.removeAttribute(t));
}
var K = {
  OPTION: function(r, e) {
    var t = r.parentNode;
    if (t) {
      var i = t.nodeName.toUpperCase();
      i === "OPTGROUP" && (t = t.parentNode, i = t && t.nodeName.toUpperCase()), i === "SELECT" && !t.hasAttribute("multiple") && (r.hasAttribute("selected") && !e.selected && (r.setAttribute("selected", "selected"), r.removeAttribute("selected")), t.selectedIndex = -1);
    }
    W(r, e, "selected");
  },
  /**
   * The "value" attribute is special for the <input> element since it sets
   * the initial value. Changing the "value" attribute without changing the
   * "value" property will have no effect since it is only used to the set the
   * initial value.  Similar for the "checked" attribute, and "disabled".
   */
  INPUT: function(r, e) {
    W(r, e, "checked"), W(r, e, "disabled"), r.value !== e.value && (r.value = e.value), e.hasAttribute("value") || r.removeAttribute("value");
  },
  TEXTAREA: function(r, e) {
    var t = e.value;
    r.value !== t && (r.value = t);
    var i = r.firstChild;
    if (i) {
      var n = i.nodeValue;
      if (n == t || !t && n == r.placeholder)
        return;
      i.nodeValue = t;
    }
  },
  SELECT: function(r, e) {
    if (!e.hasAttribute("multiple")) {
      for (var t = -1, i = 0, n = r.firstChild, c, h; n; )
        if (h = n.nodeName && n.nodeName.toUpperCase(), h === "OPTGROUP")
          c = n, n = c.firstChild, n || (n = c.nextSibling, c = null);
        else {
          if (h === "OPTION") {
            if (n.hasAttribute("selected")) {
              t = i;
              break;
            }
            i++;
          }
          n = n.nextSibling, !n && c && (n = c.nextSibling, c = null);
        }
      r.selectedIndex = t;
    }
  }
}, A = 1, X = 11, q = 3, Y = 8;
function w() {
}
function ve(r) {
  if (r)
    return r.getAttribute && r.getAttribute("id") || r.id;
}
function me(r) {
  return function(t, i, n) {
    if (n || (n = {}), typeof i == "string")
      if (t.nodeName === "#document" || t.nodeName === "HTML" || t.nodeName === "BODY") {
        var c = i;
        i = u.createElement("html"), i.innerHTML = c;
      } else
        i = pe(i);
    else i.nodeType === X && (i = i.firstElementChild);
    var h = n.getNodeKey || ve, p = n.onBeforeNodeAdded || w, g = n.onNodeAdded || w, b = n.onBeforeElUpdated || w, T = n.onElUpdated || w, ee = n.onBeforeNodeDiscarded || w, R = n.onNodeDiscarded || w, te = n.onBeforeElChildrenUpdated || w, ie = n.skipFromChildren || w, B = n.addChild || function(s, a) {
      return s.appendChild(a);
    }, _ = n.childrenOnly === !0, k = /* @__PURE__ */ Object.create(null), L = [];
    function D(s) {
      L.push(s);
    }
    function V(s, a) {
      if (s.nodeType === A)
        for (var d = s.firstChild; d; ) {
          var l = void 0;
          a && (l = h(d)) ? D(l) : (R(d), d.firstChild && V(d, a)), d = d.nextSibling;
        }
    }
    function U(s, a, d) {
      ee(s) !== !1 && (a && a.removeChild(s), R(s), V(s, d));
    }
    function H(s) {
      if (s.nodeType === A || s.nodeType === X)
        for (var a = s.firstChild; a; ) {
          var d = h(a);
          d && (k[d] = a), H(a), a = a.nextSibling;
        }
    }
    H(t);
    function I(s) {
      g(s);
      for (var a = s.firstChild; a; ) {
        var d = a.nextSibling, l = h(a);
        if (l) {
          var o = k[l];
          o && x(a, o) ? (a.parentNode.replaceChild(o, a), $(o, a)) : I(a);
        } else
          I(a);
        a = d;
      }
    }
    function ne(s, a, d) {
      for (; a; ) {
        var l = a.nextSibling;
        (d = h(a)) ? D(d) : U(
          a,
          s,
          !0
          /* skip keyed nodes */
        ), a = l;
      }
    }
    function $(s, a, d) {
      var l = h(a);
      if (l && delete k[l], !d) {
        var o = b(s, a);
        if (o === !1 || (o instanceof HTMLElement && (s = o, H(s)), r(s, a), T(s), te(s, a) === !1))
          return;
      }
      s.nodeName !== "TEXTAREA" ? re(s, a) : K.TEXTAREA(s, a);
    }
    function re(s, a) {
      var d = ie(s, a), l = a.firstChild, o = s.firstChild, S, y, M, O, v;
      e: for (; l; ) {
        for (O = l.nextSibling, S = h(l); !d && o; ) {
          if (M = o.nextSibling, l.isSameNode && l.isSameNode(o)) {
            l = O, o = M;
            continue e;
          }
          y = h(o);
          var E = o.nodeType, m = void 0;
          if (E === l.nodeType && (E === A ? (S ? S !== y && ((v = k[S]) ? M === v ? m = !1 : (s.insertBefore(v, o), y ? D(y) : U(
            o,
            s,
            !0
            /* skip keyed nodes */
          ), o = v, y = h(o)) : m = !1) : y && (m = !1), m = m !== !1 && x(o, l), m && $(o, l)) : (E === q || E == Y) && (m = !0, o.nodeValue !== l.nodeValue && (o.nodeValue = l.nodeValue))), m) {
            l = O, o = M;
            continue e;
          }
          y ? D(y) : U(
            o,
            s,
            !0
            /* skip keyed nodes */
          ), o = M;
        }
        if (S && (v = k[S]) && x(v, l))
          d || B(s, v), $(v, l);
        else {
          var j = p(l);
          j !== !1 && (j && (l = j), l.actualize && (l = l.actualize(s.ownerDocument || u)), B(s, l), I(l));
        }
        l = O, o = M;
      }
      ne(s, o, y);
      var F = K[s.nodeName];
      F && F(s, a);
    }
    var f = t, N = f.nodeType, G = i.nodeType;
    if (!_) {
      if (N === A)
        G === A ? x(t, i) || (R(t), f = ye(t, ge(i.nodeName, i.namespaceURI))) : f = i;
      else if (N === q || N === Y) {
        if (G === N)
          return f.nodeValue !== i.nodeValue && (f.nodeValue = i.nodeValue), f;
        f = i;
      }
    }
    if (f === i)
      R(t);
    else {
      if (i.isSameNode && i.isSameNode(f))
        return;
      if ($(f, i, _), L)
        for (var P = 0, se = L.length; P < se; P++) {
          var z = k[L[P]];
          z && U(z, z.parentNode, !1);
        }
    }
    return !_ && f !== t && t.parentNode && (f.actualize && (f = f.actualize(t.ownerDocument || u)), t.parentNode.replaceChild(f, t)), f;
  };
}
var we = me(le);
class be {
  /**
   * Creates a new Arizona client instance
   * @param {ArizonaOptions} [opts={}] - Client configuration options
   */
  constructor(e = {}) {
    this.worker = null, this.connected = !1, this.eventListeners = /* @__PURE__ */ new Map(), this.logger = e.logger || null, this.nextRefId = 0, this.pendingCalls = /* @__PURE__ */ new Map();
  }
  /**
   * Initialize worker if not already created
   * @private
   * @returns {void}
   */
  initializeWorker() {
    this.worker || (this.worker = new ae(), this.worker.onmessage = (e) => {
      this.handleWorkerMessage(e.data);
    });
  }
  /**
   * Connect to the Arizona WebSocket server
   * @param {string} websocketEndpoint - WebSocket endpoint path
   * @returns {void}
   */
  connect(e) {
    if (this.connected) return;
    this.initializeWorker();
    const t = window.location.protocol === "https:" ? "wss:" : "ws:", i = window.location.host, n = window.location.pathname, c = window.location.search, h = encodeURIComponent(n), p = c ? encodeURIComponent(c.substring(1)) : "", g = `${t}//${i}${e}?path=${h}&qs=${p}`;
    this.worker.postMessage({
      type: "connect",
      data: { url: g }
    });
  }
  /**
   * Push an event to the Arizona server
   * @param {string} event - Event name
   * @param {EventParams} [params={}] - Event parameters
   * @returns {void}
   */
  pushEvent(e, t = {}) {
    this.connected && this.worker.postMessage({
      type: "send",
      data: {
        type: "event",
        event: e,
        params: t
      }
    });
  }
  /**
   * Push an event to a specific stateful component
   * @param {string} statefulId - Target stateful component ID
   * @param {string} event - Event name
   * @param {EventParams} [params={}] - Event parameters
   * @returns {void}
   */
  pushEventTo(e, t, i = {}) {
    this.connected && this.worker.postMessage({
      type: "send",
      data: {
        type: "event",
        stateful_id: e,
        event: t,
        params: i
      }
    });
  }
  /**
   * Call an event on the Arizona server and wait for reply
   * @param {string} event - Event name
   * @param {EventParams} [params={}] - Event parameters
   * @param {Object} [options={}] - Call options
   * @param {number} [options.timeout=10000] - Timeout in milliseconds
   * @returns {Promise<*>} Promise that resolves with reply data
   */
  callEvent(e, t = {}, i = {}) {
    return this._callEvent(void 0, e, t, i);
  }
  /**
   * Call an event on a specific stateful component and wait for reply
   * @param {string} statefulId - Target stateful component ID
   * @param {string} event - Event name
   * @param {EventParams} [params={}] - Event parameters
   * @param {Object} [options={}] - Call options
   * @param {number} [options.timeout=10000] - Timeout in milliseconds
   * @returns {Promise<*>} Promise that resolves with reply data
   */
  callEventFrom(e, t, i = {}, n = {}) {
    return this._callEvent(e, t, i, n);
  }
  /**
   * Internal helper to call an event and wait for reply
   * @private
   * @param {string|undefined} statefulId - Target stateful component ID (undefined for view)
   * @param {string} event - Event name
   * @param {EventParams} params - Event parameters
   * @param {Object} options - Call options
   * @returns {Promise<*>} Promise that resolves with reply data
   */
  _callEvent(e, t, i, n) {
    if (!this.connected) return Promise.reject(new Error("Not connected"));
    const c = `${++this.nextRefId}`;
    return new Promise((h, p) => {
      const g = setTimeout(() => {
        this.pendingCalls.delete(c), p(new Error(`Call timeout: ${t}`));
      }, n.timeout || 1e4);
      this.pendingCalls.set(c, { resolve: h, reject: p, timeout: g });
      const b = {
        type: "event",
        ref_id: c,
        event: t,
        params: i
      };
      e !== void 0 && (b.stateful_id = e), this.worker.postMessage({
        type: "send",
        data: b
      });
    });
  }
  /**
   * Disconnect from the Arizona WebSocket server
   * @returns {void}
   */
  disconnect() {
    this.worker && (this.worker.terminate(), this.worker = null), this.connected = !1, this.pendingCalls.forEach((e) => {
      clearTimeout(e.timeout), e.reject(new Error("Disconnected"));
    }), this.pendingCalls.clear();
  }
  /**
   * Handle messages from the worker thread
   * @private
   * @param {Object} message - Worker message
   * @returns {void}
   */
  handleWorkerMessage(e) {
    const { type: t, data: i } = e;
    try {
      switch (t) {
        case "status":
          this.handleStatus(i);
          break;
        case "initial_render":
          break;
        case "html_patch":
          console.log(i), this.handleHtmlPatch(i);
          break;
        case "error":
          this.handleWorkerError(i);
          break;
        case "reload":
          this.handleReload(i);
          break;
        case "dispatch":
          this.handleDispatch(i);
          break;
        case "reply":
          this.handleReply(i);
          break;
        case "redirect":
          this.handleRedirect(i);
          break;
        default:
          this.handleUnknownMessage(e);
      }
    } catch (n) {
      this.logger?.error("Error handling worker message:", n);
    }
  }
  handleStatus(e) {
    e.status === "connected" ? (this.connected = !0, this.logger?.info("Connected to WebSocket"), this.emit("connected", e)) : e.status === "disconnected" && (this.connected = !1, this.logger?.info("Disconnected from WebSocket"), this.emit("disconnected", e));
  }
  handleHtmlPatch(e) {
    this.logger?.debug("Applying HTML patch"), this.applyHtmlPatch(e.patch);
  }
  applyHtmlPatch(e) {
    const t = document.getElementById(e.statefulId);
    if (!t) {
      this.logger?.warning(`Target element not found: ${e.statefulId}`);
      return;
    }
    try {
      we(t, e.html, {
        onBeforeElUpdated(i, n) {
          return n.dataset?.arizonaUpdate === "false" ? !1 : !i.isEqualNode(n);
        }
      }), this.logger?.debug("Patch applied successfully");
    } catch (i) {
      this.logger?.error("Error applying HTML patch:", i);
    }
  }
  handleWorkerError(e) {
    this.logger?.error("Worker Error:", e.error), this.emit("error", e);
  }
  handleReload(e) {
    switch (e.file_type) {
      case "css":
        this.logger?.info("CSS file changed. Refreshing stylesheets without page reload..."), document.querySelectorAll('link[rel="stylesheet"]').forEach((t) => {
          const i = t.href.split("?")[0];
          t.href = `${i}?t=${Date.now()}`;
        });
        break;
      default:
        this.logger?.info(`${e.file_type || "File"} changed. Reloading page...`), window.location.reload();
    }
  }
  handleDispatch(e) {
    this.logger?.debug("Dispatching event:", e.event), this.emit(e.event, e.data);
  }
  handleReply(e) {
    const { ref_id: t, data: i } = e, n = this.pendingCalls.get(t);
    n ? (clearTimeout(n.timeout), n.resolve(i), this.pendingCalls.delete(t), this.logger?.debug(`Reply received for ref: ${t}`)) : this.logger?.warning(`Received reply for unknown ref: ${t}`);
  }
  handleRedirect(e) {
    this.logger?.info("Redirecting to:", e.url), window.open(e.url, e.options?.target, e.options?.window_features);
  }
  handleUnknownMessage(e) {
    this.logger?.warning("Unknown worker message:", e);
  }
  /**
   * Check if client is connected to server
   * @returns {boolean} True if connected
   */
  isConnected() {
    return this.connected;
  }
  /**
   * Subscribe to an Arizona event
   * @param {string} event - Event name (e.g., 'connected', 'disconnected')
   * @param {Function} callback - Callback function to invoke when event occurs
   * @returns {Function} Unsubscribe function
   */
  on(e, t) {
    return typeof t != "function" ? (this.logger?.error(`on: callback must be a function, got ${typeof t}`), () => {
    }) : (this.eventListeners.has(e) || this.eventListeners.set(e, /* @__PURE__ */ new Set()), this.eventListeners.get(e).add(t), this.logger?.debug(`Subscribed to event: ${e}`), () => this.off(e, t));
  }
  /**
   * Subscribe to an Arizona event that will only fire once
   * @param {string} event - Event name
   * @param {Function} callback - Callback function to invoke when event occurs
   * @returns {Function} Unsubscribe function
   */
  once(e, t) {
    if (typeof t != "function")
      return this.logger?.error(`once: callback must be a function, got ${typeof t}`), () => {
      };
    const i = (n) => {
      t(n), this.off(e, i);
    };
    return this.on(e, i);
  }
  /**
   * Unsubscribe from an Arizona event
   * @param {string} event - Event name
   * @param {Function} callback - Callback function to remove
   * @returns {void}
   */
  off(e, t) {
    const i = this.eventListeners.get(e);
    i && (i.delete(t), this.logger?.debug(`Unsubscribed from event: ${e}`), i.size === 0 && this.eventListeners.delete(e));
  }
  /**
   * Remove all listeners for a specific event, or all events if no event specified
   * @param {string} [event] - Optional event name. If not provided, removes all listeners for all events
   * @returns {void}
   */
  removeAllListeners(e) {
    e ? (this.eventListeners.delete(e), this.logger?.debug(`Removed all listeners for event: ${e}`)) : (this.eventListeners.clear(), this.logger?.debug("Removed all event listeners"));
  }
  /**
   * Emit an Arizona event to all subscribed listeners
   * @private
   * @param {string} event - Event name
   * @param {*} data - Event data to pass to listeners
   * @returns {void}
   */
  emit(e, t) {
    const i = this.eventListeners.get(e);
    i && i.forEach((n) => {
      try {
        n(t);
      } catch (c) {
        this.logger?.error(`Error in event listener for '${e}':`, c);
      }
    });
  }
}
export {
  be as default
};
//# sourceMappingURL=arizona.min.js.map
