/*! Arizona Framework Client v0.2.0 | Apache-2.0 License */
const ee = '/*! Arizona Framework Client v0.2.0 | Apache-2.0 License */(function(){"use strict";class a{constructor(){this.structure=new Map}initialize(t){this.structure=new Map(Object.entries(JSON.parse(JSON.stringify(t))))}applyDiff(t,e){if(e?.type==="stateful"){this.structure.set(e.id,e);return}if(!this.structure.has(t)){const s=String(t).replace(/\\r|\\n/g,"");console.warn(`[Arizona] StatefulId \'${s}\' not found in structure`)}for(const[s,i]of e)if(i&&typeof i=="object"&&i.type)this.structure.get(t).dynamic[s-1]=i;else if(Array.isArray(i)){const r=this.structure.get(t).dynamic[s-1];r&&r.type==="list"?this.structure.get(t).dynamic[s-1].dynamic=i:r&&r.type==="stateless"?i.forEach(([h,o])=>{this.structure.get(t).dynamic[s-1].dynamic[h-1]=o}):this.structure.get(t).dynamic[s-1]=i}else this.structure.get(t).dynamic[s-1]=i}generateStatefulHTML(t){const e=this.structure.get(t);if(!e){const s=String(t).replace(/\\r|\\n/g,"");console.warn(`[Arizona] StatefulId \'${s}\' not found in structure`)}return this.zipStaticDynamic(e.static,e.dynamic)}generateStatelessHTML(t){return this.zipStaticDynamic(t.static,t.dynamic)}generateListHTML(t){const{static:e,dynamic:s}=t;return s.reduce((i,r)=>i+this.zipStaticDynamic(e,r),"")}zipStaticDynamic(t,e){const s=[],i=Math.max(t.length,e.length);for(let r=0;r<i;r++)r<t.length&&s.push(t[r]),r<e.length&&s.push(this.normalizeDynamicElement(e[r]));return s.join("")}normalizeDynamicElement(t){return typeof t=="string"?t:t&&t.type==="stateful"?this.generateStatefulHTML(t.id):t&&t.type==="stateless"?this.generateStatelessHTML(t):t&&t.type==="list"?this.generateListHTML(t):Array.isArray(t)?this.flattenIoData(t):String(t)}flattenIoData(t){return typeof t=="string"?t:typeof t=="number"?String(t):Array.isArray(t)?t.map(e=>this.flattenIoData(e)).join(""):t&&typeof t=="object"?t.type==="stateful"?this.generateStatefulHTML(t.id):t.type==="stateless"?this.generateStatelessHTML(t):t.type==="list"?this.generateListHTML(t):String(t):String(t||"")}getStructure(){return JSON.parse(JSON.stringify(Object.fromEntries(this.structure)))}isInitialized(){return this.structure.size>0}getComponentIds(){return Array.from(this.structure.keys())}clear(){this.structure=new Map}createPatch(t){return{type:"html_patch",statefulId:t,html:this.generateStatefulHTML(t)}}}class n{constructor(){this.socket=null,this.connected=!1,this.messageQueue=[],this.hierarchical=new a,self.onmessage=t=>{const{type:e,data:s}=t.data;switch(e){case"connect":this.connect(s.url);break;case"send":this.sendMessage(s);break;case"disconnect":this.disconnect();break}}}connect(t){this.connected||(this.socket=new WebSocket(t),this.socket.onopen=()=>{this.connected=!0,this.postMessage({type:"status",data:{status:"connected"}}),this.flushMessageQueue()},this.socket.onmessage=e=>{const s=JSON.parse(e.data);this.handleWebSocketMessage(s)},this.socket.onclose=()=>{this.connected=!1,this.postMessage({type:"status",data:{status:"disconnected"}})},this.socket.onerror=e=>{this.postMessage({type:"error",data:{error:e.toString()}})})}sendMessage(t){const e=JSON.stringify(t);this.connected&&this.socket.readyState===WebSocket.OPEN?this.socket.send(e):this.messageQueue.push(e)}flushMessageQueue(){for(;this.messageQueue.length>0;){const t=this.messageQueue.shift();if(this.socket.readyState===WebSocket.OPEN)this.socket.send(t);else{this.messageQueue.unshift(t);break}}}disconnect(){this.socket&&(this.socket.close(),this.socket=null),this.connected=!1,this.hierarchical.clear()}handleWebSocketMessage(t){try{switch(t.type){case"initial_render":this.handleInitialRender(t);break;case"diff":this.handleDiff(t);break;case"reload":this.handleReload(t);break;case"dispatch_to":this.handleDispatchTo(t);break;case"redirect":this.handleRedirect(t);break;default:this.handleUnknownMessage(t)}}catch(e){this.postMessage({type:"error",data:{error:`Message handling failed: ${e.message}`}})}}handleInitialRender(t){this.hierarchical.initialize(t.structure)}handleDiff(t){if(!this.hierarchical.isInitialized())throw new Error("Hierarchical structure not initialized");this.hierarchical.applyDiff(t.stateful_id,t.changes);const e=this.hierarchical.createPatch(t.stateful_id);this.postMessage({type:"html_patch",data:{patch:e}})}handleReload(t){this.postMessage({type:"reload",data:t})}handleDispatchTo(t){this.postMessage({type:"dispatch_to",data:{selector:t.selector,event:t.event,options:{detail:t.data}}})}handleRedirect(t){this.postMessage({type:"redirect",data:{url:t.url,target:t.target}})}handleUnknownMessage(t){this.postMessage(t)}postMessage(t){self.postMessage(t)}}new n})();\n//# sourceMappingURL=arizona-worker.min.js.map\n', J = typeof self < "u" && self.Blob && new Blob(["(self.URL || self.webkitURL).revokeObjectURL(self.location.href);", ee], { type: "text/javascript;charset=utf-8" });
function ce(r) {
  let e;
  try {
    if (e = J && (self.URL || self.webkitURL).createObjectURL(J), !e) throw "";
    const t = new Worker(e, {
      name: r?.name
    });
    return t.addEventListener("error", () => {
      (self.URL || self.webkitURL).revokeObjectURL(e);
    }), t;
  } catch {
    return new Worker(
      "data:text/javascript;charset=utf-8," + encodeURIComponent(ee),
      {
        name: r?.name
      }
    );
  }
}
var q = 11;
function oe(r, e) {
  var t = e.attributes, n, s, l, d, g;
  if (!(e.nodeType === q || r.nodeType === q)) {
    for (var m = t.length - 1; m >= 0; m--)
      n = t[m], s = n.name, l = n.namespaceURI, d = n.value, l ? (s = n.localName || s, g = r.getAttributeNS(l, s), g !== d && (n.prefix === "xmlns" && (s = n.name), r.setAttributeNS(l, s, d))) : (g = r.getAttribute(s), g !== d && r.setAttribute(s, d));
    for (var L = r.attributes, T = L.length - 1; T >= 0; T--)
      n = L[T], s = n.name, l = n.namespaceURI, l ? (s = n.localName || s, e.hasAttributeNS(l, s) || r.removeAttributeNS(l, s)) : e.hasAttribute(s) || r.removeAttribute(s);
  }
}
var C, le = "http://www.w3.org/1999/xhtml", f = typeof document > "u" ? void 0 : document, he = !!f && "content" in f.createElement("template"), de = !!f && f.createRange && "createContextualFragment" in f.createRange();
function ue(r) {
  var e = f.createElement("template");
  return e.innerHTML = r, e.content.childNodes[0];
}
function fe(r) {
  C || (C = f.createRange(), C.selectNode(f.body));
  var e = C.createContextualFragment(r);
  return e.childNodes[0];
}
function pe(r) {
  var e = f.createElement("body");
  return e.innerHTML = r, e.childNodes[0];
}
function ge(r) {
  return r = r.trim(), he ? ue(r) : de ? fe(r) : pe(r);
}
function E(r, e) {
  var t = r.nodeName, n = e.nodeName, s, l;
  return t === n ? !0 : (s = t.charCodeAt(0), l = n.charCodeAt(0), s <= 90 && l >= 97 ? t === n.toUpperCase() : l <= 90 && s >= 97 ? n === t.toUpperCase() : !1);
}
function ve(r, e) {
  return !e || e === le ? f.createElement(r) : f.createElementNS(e, r);
}
function ye(r, e) {
  for (var t = r.firstChild; t; ) {
    var n = t.nextSibling;
    e.appendChild(t), t = n;
  }
  return e;
}
function B(r, e, t) {
  r[t] !== e[t] && (r[t] = e[t], r[t] ? r.setAttribute(t, "") : r.removeAttribute(t));
}
var K = {
  OPTION: function(r, e) {
    var t = r.parentNode;
    if (t) {
      var n = t.nodeName.toUpperCase();
      n === "OPTGROUP" && (t = t.parentNode, n = t && t.nodeName.toUpperCase()), n === "SELECT" && !t.hasAttribute("multiple") && (r.hasAttribute("selected") && !e.selected && (r.setAttribute("selected", "selected"), r.removeAttribute("selected")), t.selectedIndex = -1);
    }
    B(r, e, "selected");
  },
  /**
   * The "value" attribute is special for the <input> element since it sets
   * the initial value. Changing the "value" attribute without changing the
   * "value" property will have no effect since it is only used to the set the
   * initial value.  Similar for the "checked" attribute, and "disabled".
   */
  INPUT: function(r, e) {
    B(r, e, "checked"), B(r, e, "disabled"), r.value !== e.value && (r.value = e.value), e.hasAttribute("value") || r.removeAttribute("value");
  },
  TEXTAREA: function(r, e) {
    var t = e.value;
    r.value !== t && (r.value = t);
    var n = r.firstChild;
    if (n) {
      var s = n.nodeValue;
      if (s == t || !t && s == r.placeholder)
        return;
      n.nodeValue = t;
    }
  },
  SELECT: function(r, e) {
    if (!e.hasAttribute("multiple")) {
      for (var t = -1, n = 0, s = r.firstChild, l, d; s; )
        if (d = s.nodeName && s.nodeName.toUpperCase(), d === "OPTGROUP")
          l = s, s = l.firstChild, s || (s = l.nextSibling, l = null);
        else {
          if (d === "OPTION") {
            if (s.hasAttribute("selected")) {
              t = n;
              break;
            }
            n++;
          }
          s = s.nextSibling, !s && l && (s = l.nextSibling, l = null);
        }
      r.selectedIndex = t;
    }
  }
}, A = 1, X = 11, Y = 3, Z = 8;
function w() {
}
function we(r) {
  if (r)
    return r.getAttribute && r.getAttribute("id") || r.id;
}
function me(r) {
  return function(t, n, s) {
    if (s || (s = {}), typeof n == "string")
      if (t.nodeName === "#document" || t.nodeName === "HTML" || t.nodeName === "BODY") {
        var l = n;
        n = f.createElement("html"), n.innerHTML = l;
      } else
        n = ge(n);
    else n.nodeType === X && (n = n.firstElementChild);
    var d = s.getNodeKey || we, g = s.onBeforeNodeAdded || w, m = s.onNodeAdded || w, L = s.onBeforeElUpdated || w, T = s.onElUpdated || w, te = s.onBeforeNodeDiscarded || w, U = s.onNodeDiscarded || w, ne = s.onBeforeElChildrenUpdated || w, re = s.skipFromChildren || w, V = s.addChild || function(i, a) {
      return i.appendChild(a);
    }, x = s.childrenOnly === !0, b = /* @__PURE__ */ Object.create(null), R = [];
    function O(i) {
      R.push(i);
    }
    function F(i, a) {
      if (i.nodeType === A)
        for (var h = i.firstChild; h; ) {
          var c = void 0;
          a && (c = d(h)) ? O(c) : (U(h), h.firstChild && F(h, a)), h = h.nextSibling;
        }
    }
    function N(i, a, h) {
      te(i) !== !1 && (a && a.removeChild(i), U(i), F(i, h));
    }
    function I(i) {
      if (i.nodeType === A || i.nodeType === X)
        for (var a = i.firstChild; a; ) {
          var h = d(a);
          h && (b[h] = a), I(a), a = a.nextSibling;
        }
    }
    I(t);
    function P(i) {
      m(i);
      for (var a = i.firstChild; a; ) {
        var h = a.nextSibling, c = d(a);
        if (c) {
          var o = b[c];
          o && E(a, o) ? (a.parentNode.replaceChild(o, a), D(o, a)) : P(a);
        } else
          P(a);
        a = h;
      }
    }
    function se(i, a, h) {
      for (; a; ) {
        var c = a.nextSibling;
        (h = d(a)) ? O(h) : N(
          a,
          i,
          !0
          /* skip keyed nodes */
        ), a = c;
      }
    }
    function D(i, a, h) {
      var c = d(a);
      if (c && delete b[c], !h) {
        var o = L(i, a);
        if (o === !1 || (o instanceof HTMLElement && (i = o, I(i)), r(i, a), T(i), ne(i, a) === !1))
          return;
      }
      i.nodeName !== "TEXTAREA" ? ie(i, a) : K.TEXTAREA(i, a);
    }
    function ie(i, a) {
      var h = re(i, a), c = a.firstChild, o = i.firstChild, S, p, k, H, v;
      e: for (; c; ) {
        for (H = c.nextSibling, S = d(c); !h && o; ) {
          if (k = o.nextSibling, c.isSameNode && c.isSameNode(o)) {
            c = H, o = k;
            continue e;
          }
          p = d(o);
          var _ = o.nodeType, y = void 0;
          if (_ === c.nodeType && (_ === A ? (S ? S !== p && ((v = b[S]) ? k === v ? y = !1 : (i.insertBefore(v, o), p ? O(p) : N(
            o,
            i,
            !0
            /* skip keyed nodes */
          ), o = v, p = d(o)) : y = !1) : p && (y = !1), y = y !== !1 && E(o, c), y && D(o, c)) : (_ === Y || _ == Z) && (y = !0, o.nodeValue !== c.nodeValue && (o.nodeValue = c.nodeValue))), y) {
            c = H, o = k;
            continue e;
          }
          p ? O(p) : N(
            o,
            i,
            !0
            /* skip keyed nodes */
          ), o = k;
        }
        if (S && (v = b[S]) && E(v, c))
          h || V(i, v), D(v, c);
        else {
          var j = g(c);
          j !== !1 && (j && (c = j), c.actualize && (c = c.actualize(i.ownerDocument || f)), V(i, c), P(c));
        }
        c = H, o = k;
      }
      se(i, o, p);
      var G = K[i.nodeName];
      G && G(i, a);
    }
    var u = t, z = u.nodeType, Q = n.nodeType;
    if (!x) {
      if (z === A)
        Q === A ? E(t, n) || (U(t), u = ye(t, ve(n.nodeName, n.namespaceURI))) : u = n;
      else if (z === Y || z === Z) {
        if (Q === z)
          return u.nodeValue !== n.nodeValue && (u.nodeValue = n.nodeValue), u;
        u = n;
      }
    }
    if (u === n)
      U(t);
    else {
      if (n.isSameNode && n.isSameNode(u))
        return;
      if (D(u, n, x), R)
        for (var $ = 0, ae = R.length; $ < ae; $++) {
          var W = b[R[$]];
          W && N(W, W.parentNode, !1);
        }
    }
    return !x && u !== t && t.parentNode && (u.actualize && (u = u.actualize(t.ownerDocument || f)), t.parentNode.replaceChild(u, t)), u;
  };
}
var be = me(oe);
const M = {
  silent: -1,
  error: 3,
  warning: 4,
  info: 6,
  debug: 7
};
class Se {
  /**
   * Creates a new Arizona client instance
   * @param {ArizonaClientOptions} [opts={}] - Client configuration options
   */
  constructor(e = {}) {
    this.worker = null, this.connected = !1, this.logLevel = M[e.logLevel] ?? M.silent, this.eventListeners = /* @__PURE__ */ new Map();
  }
  /**
   * Initialize worker if not already created
   * @private
   * @returns {void}
   */
  initializeWorker() {
    this.worker || (this.worker = new ce(), this.worker.onmessage = (e) => {
      this.handleWorkerMessage(e.data);
    });
  }
  /**
   * Connect to the Arizona WebSocket server
   * @param {string} websocketEndpoint - WebSocket endpoint path
   * @returns {void}
   */
  connect(e) {
    if (this.connected) return;
    this.initializeWorker();
    const t = window.location.protocol === "https:" ? "wss:" : "ws:", n = window.location.host, s = window.location.pathname, l = window.location.search, d = encodeURIComponent(s), g = l ? encodeURIComponent(l.substring(1)) : "", m = `${t}//${n}${e}?path=${d}&qs=${g}`;
    this.worker.postMessage({
      type: "connect",
      data: { url: m }
    });
  }
  /**
   * Send an event to the Arizona server
   * @param {string} event - Event name
   * @param {EventParams} [params={}] - Event parameters
   * @returns {void}
   */
  sendEvent(e, t = {}) {
    this.connected && this.worker.postMessage({
      type: "send",
      data: {
        type: "event",
        event: e,
        params: t
      }
    });
  }
  /**
   * Send an event to a specific stateful component
   * @param {string} statefulId - Target stateful component ID
   * @param {string} event - Event name
   * @param {EventParams} [params={}] - Event parameters
   * @returns {void}
   */
  sendEventTo(e, t, n = {}) {
    this.connected && this.worker.postMessage({
      type: "send",
      data: {
        type: "event",
        stateful_id: e,
        event: t,
        params: n
      }
    });
  }
  /**
   * Disconnect from the Arizona WebSocket server
   * @returns {void}
   */
  disconnect() {
    this.worker && (this.worker.terminate(), this.worker = null), this.connected = !1;
  }
  /**
   * Handle messages from the worker thread
   * @private
   * @param {Object} message - Worker message
   * @returns {void}
   */
  handleWorkerMessage(e) {
    const { type: t, data: n } = e;
    try {
      switch (t) {
        case "status":
          this.handleStatus(n);
          break;
        case "initial_render":
          break;
        case "html_patch":
          this.handleHtmlPatch(n);
          break;
        case "error":
          this.handleWorkerError(n);
          break;
        case "reload":
          this.handleReload(n);
          break;
        case "dispatch_to":
          this.handleDispatchTo(n);
          break;
        case "redirect":
          this.handleRedirect(n);
          break;
        default:
          this.handleUnknownMessage(e);
      }
    } catch (s) {
      this.error("Error handling worker message:", s);
    }
  }
  handleStatus(e) {
    e.status === "connected" ? (this.connected = !0, this.info("Connected to WebSocket"), this.emit("connected", e)) : e.status === "disconnected" && (this.connected = !1, this.info("Disconnected from WebSocket"), this.emit("disconnected", e));
  }
  handleHtmlPatch(e) {
    this.debug("Applying HTML patch"), this.applyHtmlPatch(e.patch);
  }
  applyHtmlPatch(e) {
    const t = document.getElementById(e.statefulId);
    if (!t) {
      this.warning(`Target element not found: ${e.statefulId}`);
      return;
    }
    try {
      be(t, e.html, {
        onBeforeElUpdated(n, s) {
          return s.dataset?.arizonaUpdate === "false" ? !1 : !n.isEqualNode(s);
        }
      }), this.debug("Patch applied successfully"), t.dispatchEvent(
        new CustomEvent("arizona:patched", {
          detail: { patch: e }
        })
      );
    } catch (n) {
      this.error("Error applying HTML patch:", n);
    }
  }
  handleWorkerError(e) {
    this.error("Worker Error:", e.error), this.emit("error", e);
  }
  handleReload(e) {
    switch (e.file_type) {
      case "css":
        this.info("CSS file changed. Refreshing stylesheets without page reload..."), document.querySelectorAll('link[rel="stylesheet"]').forEach((t) => {
          const n = t.href.split("?")[0];
          t.href = `${n}?t=${Date.now()}`;
        });
        break;
      default:
        this.info(`${e.file_type || "File"} changed. Reloading page...`), window.location.reload();
    }
  }
  handleDispatchTo(e) {
    this.debug("WebSocket dispatch to:", e), document.querySelector(e.selector).dispatchEvent(new CustomEvent(e.event, e.options));
  }
  handleRedirect(e) {
    this.info("Redirecting to:", e.url), window.open(e.url, e.options?.target, e.options?.window_features);
  }
  handleUnknownMessage(e) {
    this.warning("Unknown worker message:", e);
  }
  /**
   * Check if client is connected to server
   * @returns {boolean} True if connected
   */
  isConnected() {
    return this.connected;
  }
  // Logging methods aligned with Erlang logger levels
  /**
   * Log error message (always shown)
   * @param {string} message - Error message
   * @param {...*} args - Additional arguments
   * @returns {void}
   */
  error(e, ...t) {
    console.error(`[Arizona] ${e}`, ...t);
  }
  /**
   * Log warning message (shown if log level allows)
   * @param {string} message - Warning message
   * @param {...*} args - Additional arguments
   * @returns {void}
   */
  warning(e, ...t) {
    this.logLevel >= M.warning && console.warn(`[Arizona] ${e}`, ...t);
  }
  /**
   * Log info message (shown if log level allows)
   * @param {string} message - Info message
   * @param {...*} args - Additional arguments
   * @returns {void}
   */
  info(e, ...t) {
    this.logLevel >= M.info && console.log(`[Arizona] ${e}`, ...t);
  }
  /**
   * Log debug message (shown if log level allows)
   * @param {string} message - Debug message
   * @param {...*} args - Additional arguments
   * @returns {void}
   */
  debug(e, ...t) {
    this.logLevel >= M.debug && console.log(`[Arizona] ${e}`, ...t);
  }
  /**
   * Subscribe to an Arizona event
   * @param {string} event - Event name (e.g., 'connected', 'disconnected')
   * @param {Function} callback - Callback function to invoke when event occurs
   * @returns {Function} Unsubscribe function
   */
  on(e, t) {
    return typeof t != "function" ? (this.error(`on: callback must be a function, got ${typeof t}`), () => {
    }) : (this.eventListeners.has(e) || this.eventListeners.set(e, /* @__PURE__ */ new Set()), this.eventListeners.get(e).add(t), this.debug(`Subscribed to event: ${e}`), () => this.off(e, t));
  }
  /**
   * Unsubscribe from an Arizona event
   * @param {string} event - Event name
   * @param {Function} callback - Callback function to remove
   * @returns {void}
   */
  off(e, t) {
    const n = this.eventListeners.get(e);
    n && (n.delete(t), this.debug(`Unsubscribed from event: ${e}`), n.size === 0 && this.eventListeners.delete(e));
  }
  /**
   * Emit an Arizona event to all subscribed listeners
   * @private
   * @param {string} event - Event name
   * @param {*} data - Event data to pass to listeners
   * @returns {void}
   */
  emit(e, t) {
    const n = this.eventListeners.get(e);
    n && n.forEach((s) => {
      try {
        s(t);
      } catch (l) {
        this.error(`Error in event listener for '${e}':`, l);
      }
    });
  }
}
export {
  Se as default
};
//# sourceMappingURL=arizona.min.js.map
