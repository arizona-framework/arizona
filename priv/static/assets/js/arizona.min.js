/*! Arizona Framework Client v0.2.0 | Apache-2.0 License */
const ee = '/*! Arizona Framework Client v0.2.0 | Apache-2.0 License */(function(){"use strict";class a{constructor(){this.structure=new Map}initialize(t){this.structure=new Map(Object.entries(JSON.parse(JSON.stringify(t))))}applyDiff(t,e){if(e?.type==="stateful"){this.structure.set(e.id,e);return}if(!this.structure.has(t)){const s=String(t).replace(/\\r|\\n/g,"");console.warn(`[Arizona] StatefulId \'${s}\' not found in structure`)}for(const[s,i]of e)if(i&&typeof i=="object"&&i.type)this.structure.get(t).dynamic[s-1]=i;else if(Array.isArray(i)){const r=this.structure.get(t).dynamic[s-1];r&&r.type==="list"?this.structure.get(t).dynamic[s-1].dynamic=i:r&&r.type==="stateless"?i.forEach(([h,o])=>{this.structure.get(t).dynamic[s-1].dynamic[h-1]=o}):this.structure.get(t).dynamic[s-1]=i}else this.structure.get(t).dynamic[s-1]=i}generateStatefulHTML(t){const e=this.structure.get(t);if(!e){const s=String(t).replace(/\\r|\\n/g,"");console.warn(`[Arizona] StatefulId \'${s}\' not found in structure`)}return this.zipStaticDynamic(e.static,e.dynamic)}generateStatelessHTML(t){return this.zipStaticDynamic(t.static,t.dynamic)}generateListHTML(t){const{static:e,dynamic:s}=t;return s.reduce((i,r)=>i+this.zipStaticDynamic(e,r),"")}zipStaticDynamic(t,e){const s=[],i=Math.max(t.length,e.length);for(let r=0;r<i;r++)r<t.length&&s.push(t[r]),r<e.length&&s.push(this.normalizeDynamicElement(e[r]));return s.join("")}normalizeDynamicElement(t){return typeof t=="string"?t:t&&t.type==="stateful"?this.generateStatefulHTML(t.id):t&&t.type==="stateless"?this.generateStatelessHTML(t):t&&t.type==="list"?this.generateListHTML(t):Array.isArray(t)?this.flattenIoData(t):String(t)}flattenIoData(t){return typeof t=="string"?t:typeof t=="number"?String(t):Array.isArray(t)?t.map(e=>this.flattenIoData(e)).join(""):t&&typeof t=="object"?t.type==="stateful"?this.generateStatefulHTML(t.id):t.type==="stateless"?this.generateStatelessHTML(t):t.type==="list"?this.generateListHTML(t):String(t):String(t||"")}getStructure(){return JSON.parse(JSON.stringify(Object.fromEntries(this.structure)))}isInitialized(){return this.structure.size>0}getComponentIds(){return Array.from(this.structure.keys())}clear(){this.structure=new Map}createPatch(t){return{type:"html_patch",statefulId:t,html:this.generateStatefulHTML(t)}}}class n{constructor(){this.socket=null,this.connected=!1,this.messageQueue=[],this.hierarchical=new a,self.onmessage=t=>{const{type:e,data:s}=t.data;switch(e){case"connect":this.connect(s.url);break;case"send":this.sendMessage(s);break;case"disconnect":this.disconnect();break}}}connect(t){this.connected||(this.socket=new WebSocket(t),this.socket.onopen=()=>{this.connected=!0,this.postMessage({type:"status",data:{status:"connected"}}),this.flushMessageQueue()},this.socket.onmessage=e=>{const s=JSON.parse(e.data);this.handleWebSocketMessage(s)},this.socket.onclose=()=>{this.connected=!1,this.postMessage({type:"status",data:{status:"disconnected"}})},this.socket.onerror=e=>{this.postMessage({type:"error",data:{error:e.toString()}})})}sendMessage(t){const e=JSON.stringify(t);this.connected&&this.socket.readyState===WebSocket.OPEN?this.socket.send(e):this.messageQueue.push(e)}flushMessageQueue(){for(;this.messageQueue.length>0;){const t=this.messageQueue.shift();if(this.socket.readyState===WebSocket.OPEN)this.socket.send(t);else{this.messageQueue.unshift(t);break}}}disconnect(){this.socket&&(this.socket.close(),this.socket=null),this.connected=!1,this.hierarchical.clear()}handleWebSocketMessage(t){try{switch(t.type){case"initial_render":this.handleInitialRender(t);break;case"diff":this.handleDiff(t);break;case"reload":this.handleReload(t);break;case"reply":this.handleReply(t);break;case"redirect":this.handleRedirect(t);break;default:this.handleUnknownMessage(t)}}catch(e){this.postMessage({type:"error",data:{error:`Message handling failed: ${e.message}`}})}}handleInitialRender(t){this.hierarchical.initialize(t.structure)}handleDiff(t){if(!this.hierarchical.isInitialized())throw new Error("Hierarchical structure not initialized");this.hierarchical.applyDiff(t.stateful_id,t.changes);const e=this.hierarchical.createPatch(t.stateful_id);this.postMessage({type:"html_patch",data:{patch:e}})}handleReload(t){this.postMessage({type:"reload",data:t})}handleReply(t){this.postMessage({type:"reply",data:t.data})}handleRedirect(t){this.postMessage({type:"redirect",data:{url:t.url,target:t.target}})}handleUnknownMessage(t){this.postMessage(t)}postMessage(t){self.postMessage(t)}}new n})();\n//# sourceMappingURL=arizona-worker.min.js.map\n', J = typeof self < "u" && self.Blob && new Blob(["(self.URL || self.webkitURL).revokeObjectURL(self.location.href);", ee], { type: "text/javascript;charset=utf-8" });
function ce(n) {
  let e;
  try {
    if (e = J && (self.URL || self.webkitURL).createObjectURL(J), !e) throw "";
    const t = new Worker(e, {
      name: n?.name
    });
    return t.addEventListener("error", () => {
      (self.URL || self.webkitURL).revokeObjectURL(e);
    }), t;
  } catch {
    return new Worker(
      "data:text/javascript;charset=utf-8," + encodeURIComponent(ee),
      {
        name: n?.name
      }
    );
  }
}
var K = 11;
function le(n, e) {
  var t = e.attributes, a, r, o, d, g;
  if (!(e.nodeType === K || n.nodeType === K)) {
    for (var b = t.length - 1; b >= 0; b--)
      a = t[b], r = a.name, o = a.namespaceURI, d = a.value, o ? (r = a.localName || r, g = n.getAttributeNS(o, r), g !== d && (a.prefix === "xmlns" && (r = a.name), n.setAttributeNS(o, r, d))) : (g = n.getAttribute(r), g !== d && n.setAttribute(r, d));
    for (var k = n.attributes, m = k.length - 1; m >= 0; m--)
      a = k[m], r = a.name, o = a.namespaceURI, o ? (r = a.localName || r, e.hasAttributeNS(o, r) || n.removeAttributeNS(o, r)) : e.hasAttribute(r) || n.removeAttribute(r);
  }
}
var C, oe = "http://www.w3.org/1999/xhtml", f = typeof document > "u" ? void 0 : document, he = !!f && "content" in f.createElement("template"), de = !!f && f.createRange && "createContextualFragment" in f.createRange();
function ue(n) {
  var e = f.createElement("template");
  return e.innerHTML = n, e.content.childNodes[0];
}
function fe(n) {
  C || (C = f.createRange(), C.selectNode(f.body));
  var e = C.createContextualFragment(n);
  return e.childNodes[0];
}
function pe(n) {
  var e = f.createElement("body");
  return e.innerHTML = n, e.childNodes[0];
}
function ge(n) {
  return n = n.trim(), he ? ue(n) : de ? fe(n) : pe(n);
}
function P(n, e) {
  var t = n.nodeName, a = e.nodeName, r, o;
  return t === a ? !0 : (r = t.charCodeAt(0), o = a.charCodeAt(0), r <= 90 && o >= 97 ? t === a.toUpperCase() : o <= 90 && r >= 97 ? a === t.toUpperCase() : !1);
}
function ve(n, e) {
  return !e || e === oe ? f.createElement(n) : f.createElementNS(e, n);
}
function ye(n, e) {
  for (var t = n.firstChild; t; ) {
    var a = t.nextSibling;
    e.appendChild(t), t = a;
  }
  return e;
}
function B(n, e, t) {
  n[t] !== e[t] && (n[t] = e[t], n[t] ? n.setAttribute(t, "") : n.removeAttribute(t));
}
var X = {
  OPTION: function(n, e) {
    var t = n.parentNode;
    if (t) {
      var a = t.nodeName.toUpperCase();
      a === "OPTGROUP" && (t = t.parentNode, a = t && t.nodeName.toUpperCase()), a === "SELECT" && !t.hasAttribute("multiple") && (n.hasAttribute("selected") && !e.selected && (n.setAttribute("selected", "selected"), n.removeAttribute("selected")), t.selectedIndex = -1);
    }
    B(n, e, "selected");
  },
  /**
   * The "value" attribute is special for the <input> element since it sets
   * the initial value. Changing the "value" attribute without changing the
   * "value" property will have no effect since it is only used to the set the
   * initial value.  Similar for the "checked" attribute, and "disabled".
   */
  INPUT: function(n, e) {
    B(n, e, "checked"), B(n, e, "disabled"), n.value !== e.value && (n.value = e.value), e.hasAttribute("value") || n.removeAttribute("value");
  },
  TEXTAREA: function(n, e) {
    var t = e.value;
    n.value !== t && (n.value = t);
    var a = n.firstChild;
    if (a) {
      var r = a.nodeValue;
      if (r == t || !t && r == n.placeholder)
        return;
      a.nodeValue = t;
    }
  },
  SELECT: function(n, e) {
    if (!e.hasAttribute("multiple")) {
      for (var t = -1, a = 0, r = n.firstChild, o, d; r; )
        if (d = r.nodeName && r.nodeName.toUpperCase(), d === "OPTGROUP")
          o = r, r = o.firstChild, r || (r = o.nextSibling, o = null);
        else {
          if (d === "OPTION") {
            if (r.hasAttribute("selected")) {
              t = a;
              break;
            }
            a++;
          }
          r = r.nextSibling, !r && o && (r = o.nextSibling, o = null);
        }
      n.selectedIndex = t;
    }
  }
}, T = 1, q = 11, Y = 3, Z = 8;
function w() {
}
function we(n) {
  if (n)
    return n.getAttribute && n.getAttribute("id") || n.id;
}
function be(n) {
  return function(t, a, r) {
    if (r || (r = {}), typeof a == "string")
      if (t.nodeName === "#document" || t.nodeName === "HTML" || t.nodeName === "BODY") {
        var o = a;
        a = f.createElement("html"), a.innerHTML = o;
      } else
        a = ge(a);
    else a.nodeType === q && (a = a.firstElementChild);
    var d = r.getNodeKey || we, g = r.onBeforeNodeAdded || w, b = r.onNodeAdded || w, k = r.onBeforeElUpdated || w, m = r.onElUpdated || w, te = r.onBeforeNodeDiscarded || w, R = r.onNodeDiscarded || w, ae = r.onBeforeElChildrenUpdated || w, ne = r.skipFromChildren || w, V = r.addChild || function(i, s) {
      return i.appendChild(s);
    }, _ = r.childrenOnly === !0, S = /* @__PURE__ */ Object.create(null), U = [];
    function O(i) {
      U.push(i);
    }
    function F(i, s) {
      if (i.nodeType === T)
        for (var h = i.firstChild; h; ) {
          var c = void 0;
          s && (c = d(h)) ? O(c) : (R(h), h.firstChild && F(h, s)), h = h.nextSibling;
        }
    }
    function N(i, s, h) {
      te(i) !== !1 && (s && s.removeChild(i), R(i), F(i, h));
    }
    function x(i) {
      if (i.nodeType === T || i.nodeType === q)
        for (var s = i.firstChild; s; ) {
          var h = d(s);
          h && (S[h] = s), x(s), s = s.nextSibling;
        }
    }
    x(t);
    function I(i) {
      b(i);
      for (var s = i.firstChild; s; ) {
        var h = s.nextSibling, c = d(s);
        if (c) {
          var l = S[c];
          l && P(s, l) ? (s.parentNode.replaceChild(l, s), z(l, s)) : I(s);
        } else
          I(s);
        s = h;
      }
    }
    function re(i, s, h) {
      for (; s; ) {
        var c = s.nextSibling;
        (h = d(s)) ? O(h) : N(
          s,
          i,
          !0
          /* skip keyed nodes */
        ), s = c;
      }
    }
    function z(i, s, h) {
      var c = d(s);
      if (c && delete S[c], !h) {
        var l = k(i, s);
        if (l === !1 || (l instanceof HTMLElement && (i = l, x(i)), n(i, s), m(i), ae(i, s) === !1))
          return;
      }
      i.nodeName !== "TEXTAREA" ? ie(i, s) : X.TEXTAREA(i, s);
    }
    function ie(i, s) {
      var h = ne(i, s), c = s.firstChild, l = i.firstChild, A, p, M, E, v;
      e: for (; c; ) {
        for (E = c.nextSibling, A = d(c); !h && l; ) {
          if (M = l.nextSibling, c.isSameNode && c.isSameNode(l)) {
            c = E, l = M;
            continue e;
          }
          p = d(l);
          var H = l.nodeType, y = void 0;
          if (H === c.nodeType && (H === T ? (A ? A !== p && ((v = S[A]) ? M === v ? y = !1 : (i.insertBefore(v, l), p ? O(p) : N(
            l,
            i,
            !0
            /* skip keyed nodes */
          ), l = v, p = d(l)) : y = !1) : p && (y = !1), y = y !== !1 && P(l, c), y && z(l, c)) : (H === Y || H == Z) && (y = !0, l.nodeValue !== c.nodeValue && (l.nodeValue = c.nodeValue))), y) {
            c = E, l = M;
            continue e;
          }
          p ? O(p) : N(
            l,
            i,
            !0
            /* skip keyed nodes */
          ), l = M;
        }
        if (A && (v = S[A]) && P(v, c))
          h || V(i, v), z(v, c);
        else {
          var j = g(c);
          j !== !1 && (j && (c = j), c.actualize && (c = c.actualize(i.ownerDocument || f)), V(i, c), I(c));
        }
        c = E, l = M;
      }
      re(i, l, p);
      var G = X[i.nodeName];
      G && G(i, s);
    }
    var u = t, D = u.nodeType, Q = a.nodeType;
    if (!_) {
      if (D === T)
        Q === T ? P(t, a) || (R(t), u = ye(t, ve(a.nodeName, a.namespaceURI))) : u = a;
      else if (D === Y || D === Z) {
        if (Q === D)
          return u.nodeValue !== a.nodeValue && (u.nodeValue = a.nodeValue), u;
        u = a;
      }
    }
    if (u === a)
      R(t);
    else {
      if (a.isSameNode && a.isSameNode(u))
        return;
      if (z(u, a, _), U)
        for (var W = 0, se = U.length; W < se; W++) {
          var $ = S[U[W]];
          $ && N($, $.parentNode, !1);
        }
    }
    return !_ && u !== t && t.parentNode && (u.actualize && (u = u.actualize(t.ownerDocument || f)), t.parentNode.replaceChild(u, t)), u;
  };
}
var me = be(le);
const L = {
  silent: -1,
  error: 3,
  warning: 4,
  info: 6,
  debug: 7
};
class ke {
  /**
   * Creates a new Arizona client instance
   * @param {ArizonaClientOptions} [opts={}] - Client configuration options
   */
  constructor(e = {}) {
    this.worker = null, this.connected = !1, this.logLevel = L[e.logLevel] ?? L.silent;
  }
  /**
   * Connect to the Arizona WebSocket server
   * @param {ConnectOptions} [opts={}] - Connection options
   * @returns {void}
   */
  connect(e = {}) {
    if (this.connected) return;
    const t = e.wsPath || "/live";
    this.worker = new ce();
    const a = window.location.protocol === "https:" ? "wss:" : "ws:", r = window.location.host, o = window.location.pathname, d = window.location.search, g = encodeURIComponent(o), b = d ? encodeURIComponent(d.substring(1)) : "", k = `${a}//${r}${t}?path=${g}&qs=${b}`;
    this.worker.postMessage({
      type: "connect",
      data: { url: k }
    }), this.worker.onmessage = (m) => {
      this.handleWorkerMessage(m.data);
    };
  }
  /**
   * Send an event to the Arizona server
   * @param {string} event - Event name
   * @param {EventParams} [params={}] - Event parameters
   * @returns {void}
   */
  sendEvent(e, t = {}) {
    this.connected && this.worker.postMessage({
      type: "send",
      data: {
        type: "event",
        event: e,
        params: t
      }
    });
  }
  /**
   * Send an event to a specific stateful component
   * @param {string} statefulId - Target stateful component ID
   * @param {string} event - Event name
   * @param {EventParams} [params={}] - Event parameters
   * @returns {void}
   */
  sendEventTo(e, t, a = {}) {
    this.connected && this.worker.postMessage({
      type: "send",
      data: {
        type: "event",
        stateful_id: e,
        event: t,
        params: a
      }
    });
  }
  /**
   * Disconnect from the Arizona WebSocket server
   * @returns {void}
   */
  disconnect() {
    this.worker && (this.worker.terminate(), this.worker = null), this.connected = !1;
  }
  /**
   * Handle messages from the worker thread
   * @private
   * @param {Object} message - Worker message
   * @returns {void}
   */
  handleWorkerMessage(e) {
    const { type: t, data: a } = e;
    try {
      switch (t) {
        case "status":
          this.handleStatus(a);
          break;
        case "initial_render":
          break;
        case "html_patch":
          this.handleHtmlPatch(a);
          break;
        case "error":
          this.handleWorkerError(a);
          break;
        case "reload":
          this.handleReload(a);
          break;
        case "reply":
          this.handleReply(a);
          break;
        case "redirect":
          this.handleRedirect(a);
          break;
        default:
          this.handleUnknownMessage(e);
      }
    } catch (r) {
      this.error("Error handling worker message:", r);
    }
  }
  handleStatus(e) {
    e.status === "connected" ? (this.connected = !0, this.info("Connected to WebSocket")) : e.status === "disconnected" && (this.connected = !1, this.info("Disconnected from WebSocket")), this.dispatchArizonaEvent("status", e);
  }
  handleHtmlPatch(e) {
    this.debug("Applying HTML patch"), this.applyHtmlPatch(e.patch);
  }
  applyHtmlPatch(e) {
    const t = document.getElementById(e.statefulId);
    if (!t) {
      this.warning(`Target element not found: ${e.statefulId}`);
      return;
    }
    try {
      me(t, e.html, {
        onBeforeElUpdated(a, r) {
          return r.dataset?.arizonaUpdate === "false" ? !1 : !a.isEqualNode(r);
        }
      }), this.debug("Patch applied successfully"), t.dispatchEvent(
        new CustomEvent("arizona:patched", {
          detail: { patch: e }
        })
      );
    } catch (a) {
      this.error("Error applying HTML patch:", a);
    }
  }
  handleWorkerError(e) {
    this.error("Worker Error:", e.error), this.dispatchArizonaEvent("error", e);
  }
  handleReload(e) {
    switch (e.file_type) {
      case "css":
        this.info("CSS file changed. Refreshing stylesheets without page reload..."), document.querySelectorAll('link[rel="stylesheet"]').forEach((t) => {
          const a = t.href.split("?")[0];
          t.href = `${a}?t=${Date.now()}`;
        });
        break;
      default:
        this.info(`${e.file_type || "File"} changed. Reloading page...`), window.location.reload();
    }
  }
  handleReply(e) {
    this.debug("WebSocket reply:", e), this.dispatchArizonaEvent("reply", e);
  }
  handleRedirect(e) {
    this.info("Redirecting to:", e.url), this.dispatchArizonaEvent("redirect", e), window.open(e.url, e.options?.target, e.options?.window_features);
  }
  handleUnknownMessage(e) {
    this.warning("Unknown worker message:", e);
  }
  dispatchArizonaEvent(e, t) {
    document.dispatchEvent(
      new CustomEvent("arizonaEvent", {
        detail: { type: e, data: t }
      })
    );
  }
  /**
   * Check if client is connected to server
   * @returns {boolean} True if connected
   */
  isConnected() {
    return this.connected;
  }
  // Logging methods aligned with Erlang logger levels
  /**
   * Log error message (always shown)
   * @param {string} message - Error message
   * @param {...*} args - Additional arguments
   * @returns {void}
   */
  error(e, ...t) {
    console.error(`[Arizona] ${e}`, ...t);
  }
  /**
   * Log warning message (shown if log level allows)
   * @param {string} message - Warning message
   * @param {...*} args - Additional arguments
   * @returns {void}
   */
  warning(e, ...t) {
    this.logLevel >= L.warning && console.warn(`[Arizona] ${e}`, ...t);
  }
  /**
   * Log info message (shown if log level allows)
   * @param {string} message - Info message
   * @param {...*} args - Additional arguments
   * @returns {void}
   */
  info(e, ...t) {
    this.logLevel >= L.info && console.log(`[Arizona] ${e}`, ...t);
  }
  /**
   * Log debug message (shown if log level allows)
   * @param {string} message - Debug message
   * @param {...*} args - Additional arguments
   * @returns {void}
   */
  debug(e, ...t) {
    this.logLevel >= L.debug && console.log(`[Arizona] ${e}`, ...t);
  }
}
export {
  ke as default
};
//# sourceMappingURL=arizona.min.js.map
