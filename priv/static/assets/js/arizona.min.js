/*! Arizona Framework Client v0.2.0 | Apache-2.0 License */
const Z = '/*! Arizona Framework Client v0.2.0 | Apache-2.0 License */(function(){"use strict";class n{constructor(){this.structure=new Map}initialize(t){this.structure=new Map(Object.entries(JSON.parse(JSON.stringify(t))))}applyDiff(t,e){if(e?.type==="stateful"){this.structure.set(e.id,e);return}if(!this.structure.has(t)){const i=String(t).replace(/\\r|\\n/g,"");console.warn(`[Arizona] StatefulId \'${i}\' not found in structure`)}const s=this.structure.get(t);for(const[i,r]of e)this.applyDiffValue(s.dynamic,i-1,r)}applyDiffValue(t,e,s){const i=t[e];if(s&&typeof s=="object"&&s.type){t[e]=s;return}if(i&&typeof i=="object"&&i.type==="stateful"){const r=this.structure.get(i.id);if(!r){const a=String(i.id).replace(/\\r|\\n/g,"");console.warn(`[Arizona] Nested stateful component \'${a}\' not found in structure`);return}s.forEach(([a,o])=>{this.applyDiffValue(r.dynamic,a-1,o)});return}if(Array.isArray(s)){if(i&&i.type==="list"){i.dynamic=s;return}if(i&&i.type==="stateless"){s.forEach(([r,a])=>{this.applyDiffValue(i.dynamic,r-1,a)});return}t[e]=s;return}t[e]=s}generateStatefulHTML(t){const e=this.structure.get(t);if(!e){const s=String(t).replace(/\\r|\\n/g,"");console.warn(`[Arizona] StatefulId \'${s}\' not found in structure`)}return this.zipStaticDynamic(e.static,e.dynamic)}generateStatelessHTML(t){return this.zipStaticDynamic(t.static,t.dynamic)}generateListHTML(t){const{static:e,dynamic:s}=t;return s.reduce((i,r)=>i+this.zipStaticDynamic(e,r),"")}zipStaticDynamic(t,e){const s=[],i=Math.max(t.length,e.length);for(let r=0;r<i;r++)r<t.length&&s.push(t[r]),r<e.length&&s.push(this.normalizeDynamicElement(e[r]));return s.join("")}normalizeDynamicElement(t){return typeof t=="string"?t:t&&t.type==="stateful"?this.generateStatefulHTML(t.id):t&&t.type==="stateless"?this.generateStatelessHTML(t):t&&t.type==="list"?this.generateListHTML(t):Array.isArray(t)?this.flattenIoData(t):String(t)}flattenIoData(t){return typeof t=="string"?t:typeof t=="number"?String(t):Array.isArray(t)?t.map(e=>this.flattenIoData(e)).join(""):t&&typeof t=="object"?t.type==="stateful"?this.generateStatefulHTML(t.id):t.type==="stateless"?this.generateStatelessHTML(t):t.type==="list"?this.generateListHTML(t):String(t):String(t||"")}getStructure(){return JSON.parse(JSON.stringify(Object.fromEntries(this.structure)))}isInitialized(){return this.structure.size>0}getComponentIds(){return Array.from(this.structure.keys())}clear(){this.structure=new Map}createPatch(t){return{type:"html_patch",statefulId:t,html:this.generateStatefulHTML(t)}}}class c{constructor(){this.socket=null,this.connected=!1,this.messageQueue=[],this.hierarchical=new n,self.onmessage=t=>{const{type:e,data:s}=t.data;switch(e){case"connect":this.connect(s.url);break;case"send":this.sendMessage(s);break;case"disconnect":this.disconnect();break}}}connect(t){this.connected||(this.socket=new WebSocket(t),this.socket.onopen=()=>{this.connected=!0,this.postMessage({type:"status",data:{status:"connected"}}),this.flushMessageQueue()},this.socket.onmessage=e=>{const s=JSON.parse(e.data);this.handleWebSocketMessage(s)},this.socket.onclose=()=>{this.connected=!1,this.postMessage({type:"status",data:{status:"disconnected"}})},this.socket.onerror=e=>{this.postMessage({type:"error",data:{error:e.toString()}})})}sendMessage(t){const e=JSON.stringify(t);this.connected&&this.socket.readyState===WebSocket.OPEN?this.socket.send(e):this.messageQueue.push(e)}flushMessageQueue(){for(;this.messageQueue.length>0;){const t=this.messageQueue.shift();if(this.socket.readyState===WebSocket.OPEN)this.socket.send(t);else{this.messageQueue.unshift(t);break}}}disconnect(){this.socket&&(this.socket.close(),this.socket=null),this.connected=!1,this.hierarchical.clear()}handleWebSocketMessage(t){try{switch(t.type){case"initial_render":this.handleInitialRender(t);break;case"diff":this.handleDiff(t);break;case"reload":this.handleReload(t);break;case"dispatch":this.handleDispatch(t);break;case"reply":this.handleReply(t);break;case"redirect":this.handleRedirect(t);break;default:this.handleUnknownMessage(t)}}catch(e){this.postMessage({type:"error",data:{error:`Message handling failed: ${e.message}`}})}}handleInitialRender(t){this.hierarchical.initialize(t.structure)}handleDiff(t){if(!this.hierarchical.isInitialized())throw new Error("Hierarchical structure not initialized");this.hierarchical.applyDiff(t.stateful_id,t.changes);const e=this.hierarchical.createPatch(t.stateful_id);this.postMessage({type:"html_patch",data:{patch:e}})}handleReload(t){this.postMessage({type:"reload",data:t})}handleDispatch(t){this.postMessage({type:"dispatch",data:t})}handleReply(t){this.postMessage({type:"reply",data:t})}handleRedirect(t){this.postMessage({type:"redirect",data:{url:t.url,target:t.target}})}handleUnknownMessage(t){this.postMessage(t)}postMessage(t){self.postMessage(t)}}new c})();\n//# sourceMappingURL=arizona-worker.min.js.map\n', G = typeof self < "u" && self.Blob && new Blob(["(self.URL || self.webkitURL).revokeObjectURL(self.location.href);", Z], { type: "text/javascript;charset=utf-8" });
function ae(i) {
  let e;
  try {
    if (e = G && (self.URL || self.webkitURL).createObjectURL(G), !e) throw "";
    const t = new Worker(e, {
      name: i?.name
    });
    return t.addEventListener("error", () => {
      (self.URL || self.webkitURL).revokeObjectURL(e);
    }), t;
  } catch {
    return new Worker(
      "data:text/javascript;charset=utf-8," + encodeURIComponent(Z),
      {
        name: i?.name
      }
    );
  }
}
var J = 11;
function ce(i, e) {
  var t = e.attributes, r, n, l, h, g;
  if (!(e.nodeType === J || i.nodeType === J)) {
    for (var p = t.length - 1; p >= 0; p--)
      r = t[p], n = r.name, l = r.namespaceURI, h = r.value, l ? (n = r.localName || n, g = i.getAttributeNS(l, n), g !== h && (r.prefix === "xmlns" && (n = r.name), i.setAttributeNS(l, n, h))) : (g = i.getAttribute(n), g !== h && i.setAttribute(n, h));
    for (var b = i.attributes, T = b.length - 1; T >= 0; T--)
      r = b[T], n = r.name, l = r.namespaceURI, l ? (n = r.localName || n, e.hasAttributeNS(l, n) || i.removeAttributeNS(l, n)) : e.hasAttribute(n) || i.removeAttribute(n);
  }
}
var E, le = "http://www.w3.org/1999/xhtml", f = typeof document > "u" ? void 0 : document, oe = !!f && "content" in f.createElement("template"), he = !!f && f.createRange && "createContextualFragment" in f.createRange();
function de(i) {
  var e = f.createElement("template");
  return e.innerHTML = i, e.content.childNodes[0];
}
function ue(i) {
  E || (E = f.createRange(), E.selectNode(f.body));
  var e = E.createContextualFragment(i);
  return e.childNodes[0];
}
function fe(i) {
  var e = f.createElement("body");
  return e.innerHTML = i, e.childNodes[0];
}
function ge(i) {
  return i = i.trim(), oe ? de(i) : he ? ue(i) : fe(i);
}
function H(i, e) {
  var t = i.nodeName, r = e.nodeName, n, l;
  return t === r ? !0 : (n = t.charCodeAt(0), l = r.charCodeAt(0), n <= 90 && l >= 97 ? t === r.toUpperCase() : l <= 90 && n >= 97 ? r === t.toUpperCase() : !1);
}
function pe(i, e) {
  return !e || e === le ? f.createElement(i) : f.createElementNS(e, i);
}
function ve(i, e) {
  for (var t = i.firstChild; t; ) {
    var r = t.nextSibling;
    e.appendChild(t), t = r;
  }
  return e;
}
function j(i, e, t) {
  i[t] !== e[t] && (i[t] = e[t], i[t] ? i.setAttribute(t, "") : i.removeAttribute(t));
}
var K = {
  OPTION: function(i, e) {
    var t = i.parentNode;
    if (t) {
      var r = t.nodeName.toUpperCase();
      r === "OPTGROUP" && (t = t.parentNode, r = t && t.nodeName.toUpperCase()), r === "SELECT" && !t.hasAttribute("multiple") && (i.hasAttribute("selected") && !e.selected && (i.setAttribute("selected", "selected"), i.removeAttribute("selected")), t.selectedIndex = -1);
    }
    j(i, e, "selected");
  },
  /**
   * The "value" attribute is special for the <input> element since it sets
   * the initial value. Changing the "value" attribute without changing the
   * "value" property will have no effect since it is only used to the set the
   * initial value.  Similar for the "checked" attribute, and "disabled".
   */
  INPUT: function(i, e) {
    j(i, e, "checked"), j(i, e, "disabled"), i.value !== e.value && (i.value = e.value), e.hasAttribute("value") || i.removeAttribute("value");
  },
  TEXTAREA: function(i, e) {
    var t = e.value;
    i.value !== t && (i.value = t);
    var r = i.firstChild;
    if (r) {
      var n = r.nodeValue;
      if (n == t || !t && n == i.placeholder)
        return;
      r.nodeValue = t;
    }
  },
  SELECT: function(i, e) {
    if (!e.hasAttribute("multiple")) {
      for (var t = -1, r = 0, n = i.firstChild, l, h; n; )
        if (h = n.nodeName && n.nodeName.toUpperCase(), h === "OPTGROUP")
          l = n, n = l.firstChild, n || (n = l.nextSibling, l = null);
        else {
          if (h === "OPTION") {
            if (n.hasAttribute("selected")) {
              t = r;
              break;
            }
            r++;
          }
          n = n.nextSibling, !n && l && (n = l.nextSibling, l = null);
        }
      i.selectedIndex = t;
    }
  }
}, A = 1, X = 11, q = 3, Y = 8;
function w() {
}
function ye(i) {
  if (i)
    return i.getAttribute && i.getAttribute("id") || i.id;
}
function me(i) {
  return function(t, r, n) {
    if (n || (n = {}), typeof r == "string")
      if (t.nodeName === "#document" || t.nodeName === "HTML" || t.nodeName === "BODY") {
        var l = r;
        r = f.createElement("html"), r.innerHTML = l;
      } else
        r = ge(r);
    else r.nodeType === X && (r = r.firstElementChild);
    var h = n.getNodeKey || ye, g = n.onBeforeNodeAdded || w, p = n.onNodeAdded || w, b = n.onBeforeElUpdated || w, T = n.onElUpdated || w, ee = n.onBeforeNodeDiscarded || w, L = n.onNodeDiscarded || w, te = n.onBeforeElChildrenUpdated || w, re = n.skipFromChildren || w, V = n.addChild || function(s, a) {
      return s.appendChild(a);
    }, z = n.childrenOnly === !0, k = /* @__PURE__ */ Object.create(null), R = [];
    function D(s) {
      R.push(s);
    }
    function B(s, a) {
      if (s.nodeType === A)
        for (var d = s.firstChild; d; ) {
          var c = void 0;
          a && (c = h(d)) ? D(c) : (L(d), d.firstChild && B(d, a)), d = d.nextSibling;
        }
    }
    function U(s, a, d) {
      ee(s) !== !1 && (a && a.removeChild(s), L(s), B(s, d));
    }
    function x(s) {
      if (s.nodeType === A || s.nodeType === X)
        for (var a = s.firstChild; a; ) {
          var d = h(a);
          d && (k[d] = a), x(a), a = a.nextSibling;
        }
    }
    x(t);
    function I(s) {
      p(s);
      for (var a = s.firstChild; a; ) {
        var d = a.nextSibling, c = h(a);
        if (c) {
          var o = k[c];
          o && H(a, o) ? (a.parentNode.replaceChild(o, a), N(o, a)) : I(a);
        } else
          I(a);
        a = d;
      }
    }
    function ne(s, a, d) {
      for (; a; ) {
        var c = a.nextSibling;
        (d = h(a)) ? D(d) : U(
          a,
          s,
          !0
          /* skip keyed nodes */
        ), a = c;
      }
    }
    function N(s, a, d) {
      var c = h(a);
      if (c && delete k[c], !d) {
        var o = b(s, a);
        if (o === !1 || (o instanceof HTMLElement && (s = o, x(s)), i(s, a), T(s), te(s, a) === !1))
          return;
      }
      s.nodeName !== "TEXTAREA" ? ie(s, a) : K.TEXTAREA(s, a);
    }
    function ie(s, a) {
      var d = re(s, a), c = a.firstChild, o = s.firstChild, S, v, M, C, y;
      e: for (; c; ) {
        for (C = c.nextSibling, S = h(c); !d && o; ) {
          if (M = o.nextSibling, c.isSameNode && c.isSameNode(o)) {
            c = C, o = M;
            continue e;
          }
          v = h(o);
          var _ = o.nodeType, m = void 0;
          if (_ === c.nodeType && (_ === A ? (S ? S !== v && ((y = k[S]) ? M === y ? m = !1 : (s.insertBefore(y, o), v ? D(v) : U(
            o,
            s,
            !0
            /* skip keyed nodes */
          ), o = y, v = h(o)) : m = !1) : v && (m = !1), m = m !== !1 && H(o, c), m && N(o, c)) : (_ === q || _ == Y) && (m = !0, o.nodeValue !== c.nodeValue && (o.nodeValue = c.nodeValue))), m) {
            c = C, o = M;
            continue e;
          }
          v ? D(v) : U(
            o,
            s,
            !0
            /* skip keyed nodes */
          ), o = M;
        }
        if (S && (y = k[S]) && H(y, c))
          d || V(s, y), N(y, c);
        else {
          var W = g(c);
          W !== !1 && (W && (c = W), c.actualize && (c = c.actualize(s.ownerDocument || f)), V(s, c), I(c));
        }
        c = C, o = M;
      }
      ne(s, o, v);
      var Q = K[s.nodeName];
      Q && Q(s, a);
    }
    var u = t, O = u.nodeType, F = r.nodeType;
    if (!z) {
      if (O === A)
        F === A ? H(t, r) || (L(t), u = ve(t, pe(r.nodeName, r.namespaceURI))) : u = r;
      else if (O === q || O === Y) {
        if (F === O)
          return u.nodeValue !== r.nodeValue && (u.nodeValue = r.nodeValue), u;
        u = r;
      }
    }
    if (u === r)
      L(t);
    else {
      if (r.isSameNode && r.isSameNode(u))
        return;
      if (N(u, r, z), R)
        for (var P = 0, se = R.length; P < se; P++) {
          var $ = k[R[P]];
          $ && U($, $.parentNode, !1);
        }
    }
    return !z && u !== t && t.parentNode && (u.actualize && (u = u.actualize(t.ownerDocument || f)), t.parentNode.replaceChild(u, t)), u;
  };
}
var we = me(ce);
class be {
  /**
   * Creates a new Arizona client instance
   * @param {ArizonaOptions} [opts={}] - Client configuration options
   */
  constructor(e = {}) {
    this.worker = null, this.connected = !1, this.eventListeners = /* @__PURE__ */ new Map(), this.logger = e.logger || null, this.nextRefId = 0, this.pendingCalls = /* @__PURE__ */ new Map();
  }
  /**
   * Initialize worker if not already created
   * @private
   * @returns {void}
   */
  initializeWorker() {
    this.worker || (this.worker = new ae(), this.worker.onmessage = (e) => {
      this.handleWorkerMessage(e.data);
    });
  }
  /**
   * Connect to the Arizona WebSocket server
   * @param {string} websocketEndpoint - WebSocket endpoint path
   * @returns {void}
   */
  connect(e) {
    if (this.connected) return;
    this.initializeWorker();
    const t = window.location.protocol === "https:" ? "wss:" : "ws:", r = window.location.host, n = window.location.pathname, l = window.location.search, h = encodeURIComponent(n), g = l ? encodeURIComponent(l.substring(1)) : "", p = `${t}//${r}${e}?path=${h}&qs=${g}`;
    this.worker.postMessage({
      type: "connect",
      data: { url: p }
    });
  }
  /**
   * Push an event to the Arizona server
   * @param {string} event - Event name
   * @param {EventParams} [params={}] - Event parameters
   * @returns {void}
   */
  pushEvent(e, t = {}) {
    this.connected && this.worker.postMessage({
      type: "send",
      data: {
        type: "event",
        event: e,
        params: t
      }
    });
  }
  /**
   * Push an event to a specific stateful component
   * @param {string} statefulId - Target stateful component ID
   * @param {string} event - Event name
   * @param {EventParams} [params={}] - Event parameters
   * @returns {void}
   */
  pushEventTo(e, t, r = {}) {
    this.connected && this.worker.postMessage({
      type: "send",
      data: {
        type: "event",
        stateful_id: e,
        event: t,
        params: r
      }
    });
  }
  /**
   * Call an event on the Arizona server and wait for reply
   * @param {string} event - Event name
   * @param {EventParams} [params={}] - Event parameters
   * @param {Object} [options={}] - Call options
   * @param {number} [options.timeout=10000] - Timeout in milliseconds
   * @returns {Promise<*>} Promise that resolves with reply data
   */
  callEvent(e, t = {}, r = {}) {
    return this._callEvent(void 0, e, t, r);
  }
  /**
   * Call an event on a specific stateful component and wait for reply
   * @param {string} statefulId - Target stateful component ID
   * @param {string} event - Event name
   * @param {EventParams} [params={}] - Event parameters
   * @param {Object} [options={}] - Call options
   * @param {number} [options.timeout=10000] - Timeout in milliseconds
   * @returns {Promise<*>} Promise that resolves with reply data
   */
  callEventFrom(e, t, r = {}, n = {}) {
    return this._callEvent(e, t, r, n);
  }
  /**
   * Internal helper to call an event and wait for reply
   * @private
   * @param {string|undefined} statefulId - Target stateful component ID (undefined for view)
   * @param {string} event - Event name
   * @param {EventParams} params - Event parameters
   * @param {Object} options - Call options
   * @returns {Promise<*>} Promise that resolves with reply data
   */
  _callEvent(e, t, r, n) {
    if (!this.connected) return Promise.reject(new Error("Not connected"));
    const l = `${++this.nextRefId}`;
    return new Promise((h, g) => {
      const p = setTimeout(() => {
        this.pendingCalls.delete(l), g(new Error(`Call timeout: ${t}`));
      }, n.timeout || 1e4);
      this.pendingCalls.set(l, { resolve: h, reject: g, timeout: p });
      const b = {
        type: "event",
        ref_id: l,
        event: t,
        params: r
      };
      e !== void 0 && (b.stateful_id = e), this.worker.postMessage({
        type: "send",
        data: b
      });
    });
  }
  /**
   * Disconnect from the Arizona WebSocket server
   * @returns {void}
   */
  disconnect() {
    this.worker && (this.worker.terminate(), this.worker = null), this.connected = !1, this.pendingCalls.forEach((e) => {
      clearTimeout(e.timeout), e.reject(new Error("Disconnected"));
    }), this.pendingCalls.clear();
  }
  /**
   * Handle messages from the worker thread
   * @private
   * @param {Object} message - Worker message
   * @returns {void}
   */
  handleWorkerMessage(e) {
    const { type: t, data: r } = e;
    try {
      switch (t) {
        case "status":
          this.handleStatus(r);
          break;
        case "initial_render":
          break;
        case "html_patch":
          this.handleHtmlPatch(r);
          break;
        case "error":
          this.handleWorkerError(r);
          break;
        case "reload":
          this.handleReload(r);
          break;
        case "dispatch":
          this.handleDispatch(r);
          break;
        case "reply":
          this.handleReply(r);
          break;
        case "redirect":
          this.handleRedirect(r);
          break;
        default:
          this.handleUnknownMessage(e);
      }
    } catch (n) {
      this.logger?.error("Error handling worker message:", n);
    }
  }
  handleStatus(e) {
    e.status === "connected" ? (this.connected = !0, this.logger?.info("Connected to WebSocket"), this.emit("connected", e)) : e.status === "disconnected" && (this.connected = !1, this.logger?.info("Disconnected from WebSocket"), this.emit("disconnected", e));
  }
  handleHtmlPatch(e) {
    this.logger?.debug("Applying HTML patch"), this.applyHtmlPatch(e.patch);
  }
  applyHtmlPatch(e) {
    const t = document.getElementById(e.statefulId);
    if (!t) {
      this.logger?.warning(`Target element not found: ${e.statefulId}`);
      return;
    }
    try {
      we(t, e.html, {
        onBeforeElUpdated(r, n) {
          return n.dataset?.arizonaUpdate === "false" ? !1 : !r.isEqualNode(n);
        }
      }), this.logger?.debug("Patch applied successfully");
    } catch (r) {
      this.logger?.error("Error applying HTML patch:", r);
    }
  }
  handleWorkerError(e) {
    this.logger?.error("Worker Error:", e.error), this.emit("error", e);
  }
  handleReload(e) {
    switch (e.file_type) {
      case "css":
        this.logger?.info("CSS file changed. Refreshing stylesheets without page reload..."), document.querySelectorAll('link[rel="stylesheet"]').forEach((t) => {
          const r = t.href.split("?")[0];
          t.href = `${r}?t=${Date.now()}`;
        });
        break;
      default:
        this.logger?.info(`${e.file_type || "File"} changed. Reloading page...`), window.location.reload();
    }
  }
  handleDispatch(e) {
    this.logger?.debug("Dispatching event:", e.event), this.emit(e.event, e.data);
  }
  handleReply(e) {
    const { ref_id: t, data: r } = e, n = this.pendingCalls.get(t);
    n ? (clearTimeout(n.timeout), n.resolve(r), this.pendingCalls.delete(t), this.logger?.debug(`Reply received for ref: ${t}`)) : this.logger?.warning(`Received reply for unknown ref: ${t}`);
  }
  handleRedirect(e) {
    this.logger?.info("Redirecting to:", e.url), window.open(e.url, e.options?.target, e.options?.window_features);
  }
  handleUnknownMessage(e) {
    this.logger?.warning("Unknown worker message:", e);
  }
  /**
   * Check if client is connected to server
   * @returns {boolean} True if connected
   */
  isConnected() {
    return this.connected;
  }
  /**
   * Subscribe to an Arizona event
   * @param {string} event - Event name (e.g., 'connected', 'disconnected')
   * @param {Function} callback - Callback function to invoke when event occurs
   * @returns {Function} Unsubscribe function
   */
  on(e, t) {
    return typeof t != "function" ? (this.logger?.error(`on: callback must be a function, got ${typeof t}`), () => {
    }) : (this.eventListeners.has(e) || this.eventListeners.set(e, /* @__PURE__ */ new Set()), this.eventListeners.get(e).add(t), this.logger?.debug(`Subscribed to event: ${e}`), () => this.off(e, t));
  }
  /**
   * Subscribe to an Arizona event that will only fire once
   * @param {string} event - Event name
   * @param {Function} callback - Callback function to invoke when event occurs
   * @returns {Function} Unsubscribe function
   */
  once(e, t) {
    if (typeof t != "function")
      return this.logger?.error(`once: callback must be a function, got ${typeof t}`), () => {
      };
    const r = (n) => {
      t(n), this.off(e, r);
    };
    return this.on(e, r);
  }
  /**
   * Unsubscribe from an Arizona event
   * @param {string} event - Event name
   * @param {Function} callback - Callback function to remove
   * @returns {void}
   */
  off(e, t) {
    const r = this.eventListeners.get(e);
    r && (r.delete(t), this.logger?.debug(`Unsubscribed from event: ${e}`), r.size === 0 && this.eventListeners.delete(e));
  }
  /**
   * Remove all listeners for a specific event, or all events if no event specified
   * @param {string} [event] - Optional event name. If not provided, removes all listeners for all events
   * @returns {void}
   */
  removeAllListeners(e) {
    e ? (this.eventListeners.delete(e), this.logger?.debug(`Removed all listeners for event: ${e}`)) : (this.eventListeners.clear(), this.logger?.debug("Removed all event listeners"));
  }
  /**
   * Emit an Arizona event to all subscribed listeners
   * @private
   * @param {string} event - Event name
   * @param {*} data - Event data to pass to listeners
   * @returns {void}
   */
  emit(e, t) {
    const r = this.eventListeners.get(e);
    r && r.forEach((n) => {
      try {
        n(t);
      } catch (l) {
        this.logger?.error(`Error in event listener for '${e}':`, l);
      }
    });
  }
}
export {
  be as default
};
//# sourceMappingURL=arizona.min.js.map
