/*! Arizona Framework Client v0.2.0 | Apache-2.0 License */
const Z = '/*! Arizona Framework Client v0.2.0 | Apache-2.0 License */(function(){"use strict";class a{constructor(){this.structure=new Map}initialize(t){this.structure=new Map(Object.entries(JSON.parse(JSON.stringify(t))))}applyDiff(t,e){if(e?.type==="stateful"){this.structure.set(e.id,e);return}if(!this.structure.has(t)){const s=String(t).replace(/\\r|\\n/g,"");console.warn(`[Arizona] StatefulId \'${s}\' not found in structure`)}for(const[s,i]of e)if(i&&typeof i=="object"&&i.type)this.structure.get(t).dynamic[s-1]=i;else if(Array.isArray(i)){const r=this.structure.get(t).dynamic[s-1];r&&r.type==="list"?this.structure.get(t).dynamic[s-1].dynamic=i:r&&r.type==="stateless"?i.forEach(([h,o])=>{this.structure.get(t).dynamic[s-1].dynamic[h-1]=o}):this.structure.get(t).dynamic[s-1]=i}else this.structure.get(t).dynamic[s-1]=i}generateStatefulHTML(t){const e=this.structure.get(t);if(!e){const s=String(t).replace(/\\r|\\n/g,"");console.warn(`[Arizona] StatefulId \'${s}\' not found in structure`)}return this.zipStaticDynamic(e.static,e.dynamic)}generateStatelessHTML(t){return this.zipStaticDynamic(t.static,t.dynamic)}generateListHTML(t){const{static:e,dynamic:s}=t;return s.reduce((i,r)=>i+this.zipStaticDynamic(e,r),"")}zipStaticDynamic(t,e){const s=[],i=Math.max(t.length,e.length);for(let r=0;r<i;r++)r<t.length&&s.push(t[r]),r<e.length&&s.push(this.normalizeDynamicElement(e[r]));return s.join("")}normalizeDynamicElement(t){return typeof t=="string"?t:t&&t.type==="stateful"?this.generateStatefulHTML(t.id):t&&t.type==="stateless"?this.generateStatelessHTML(t):t&&t.type==="list"?this.generateListHTML(t):Array.isArray(t)?this.flattenIoData(t):String(t)}flattenIoData(t){return typeof t=="string"?t:typeof t=="number"?String(t):Array.isArray(t)?t.map(e=>this.flattenIoData(e)).join(""):t&&typeof t=="object"?t.type==="stateful"?this.generateStatefulHTML(t.id):t.type==="stateless"?this.generateStatelessHTML(t):t.type==="list"?this.generateListHTML(t):String(t):String(t||"")}getStructure(){return JSON.parse(JSON.stringify(Object.fromEntries(this.structure)))}isInitialized(){return this.structure.size>0}getComponentIds(){return Array.from(this.structure.keys())}clear(){this.structure=new Map}createPatch(t){return{type:"html_patch",statefulId:t,html:this.generateStatefulHTML(t)}}}class n{constructor(){this.socket=null,this.connected=!1,this.messageQueue=[],this.hierarchical=new a,self.onmessage=t=>{const{type:e,data:s}=t.data;switch(e){case"connect":this.connect(s.url);break;case"send":this.sendMessage(s);break;case"disconnect":this.disconnect();break}}}connect(t){this.connected||(this.socket=new WebSocket(t),this.socket.onopen=()=>{this.connected=!0,this.postMessage({type:"status",data:{status:"connected"}}),this.flushMessageQueue()},this.socket.onmessage=e=>{const s=JSON.parse(e.data);this.handleWebSocketMessage(s)},this.socket.onclose=()=>{this.connected=!1,this.postMessage({type:"status",data:{status:"disconnected"}})},this.socket.onerror=e=>{this.postMessage({type:"error",data:{error:e.toString()}})})}sendMessage(t){const e=JSON.stringify(t);this.connected&&this.socket.readyState===WebSocket.OPEN?this.socket.send(e):this.messageQueue.push(e)}flushMessageQueue(){for(;this.messageQueue.length>0;){const t=this.messageQueue.shift();if(this.socket.readyState===WebSocket.OPEN)this.socket.send(t);else{this.messageQueue.unshift(t);break}}}disconnect(){this.socket&&(this.socket.close(),this.socket=null),this.connected=!1,this.hierarchical.clear()}handleWebSocketMessage(t){try{switch(t.type){case"initial_render":this.handleInitialRender(t);break;case"diff":this.handleDiff(t);break;case"reload":this.handleReload(t);break;case"dispatch":this.handleDispatch(t);break;case"redirect":this.handleRedirect(t);break;default:this.handleUnknownMessage(t)}}catch(e){this.postMessage({type:"error",data:{error:`Message handling failed: ${e.message}`}})}}handleInitialRender(t){this.hierarchical.initialize(t.structure)}handleDiff(t){if(!this.hierarchical.isInitialized())throw new Error("Hierarchical structure not initialized");this.hierarchical.applyDiff(t.stateful_id,t.changes);const e=this.hierarchical.createPatch(t.stateful_id);this.postMessage({type:"html_patch",data:{patch:e}})}handleReload(t){this.postMessage({type:"reload",data:t})}handleDispatch(t){this.postMessage({type:"dispatch",data:t})}handleRedirect(t){this.postMessage({type:"redirect",data:{url:t.url,target:t.target}})}handleUnknownMessage(t){this.postMessage(t)}postMessage(t){self.postMessage(t)}}new n})();\n//# sourceMappingURL=arizona-worker.min.js.map\n', G = typeof self < "u" && self.Blob && new Blob(["(self.URL || self.webkitURL).revokeObjectURL(self.location.href);", Z], { type: "text/javascript;charset=utf-8" });
function ae(s) {
  let e;
  try {
    if (e = G && (self.URL || self.webkitURL).createObjectURL(G), !e) throw "";
    const t = new Worker(e, {
      name: s?.name
    });
    return t.addEventListener("error", () => {
      (self.URL || self.webkitURL).revokeObjectURL(e);
    }), t;
  } catch {
    return new Worker(
      "data:text/javascript;charset=utf-8," + encodeURIComponent(Z),
      {
        name: s?.name
      }
    );
  }
}
var J = 11;
function ce(s, e) {
  var t = e.attributes, r, i, o, d, p;
  if (!(e.nodeType === J || s.nodeType === J)) {
    for (var w = t.length - 1; w >= 0; w--)
      r = t[w], i = r.name, o = r.namespaceURI, d = r.value, o ? (i = r.localName || i, p = s.getAttributeNS(o, i), p !== d && (r.prefix === "xmlns" && (i = r.name), s.setAttributeNS(o, i, d))) : (p = s.getAttribute(i), p !== d && s.setAttribute(i, d));
    for (var T = s.attributes, M = T.length - 1; M >= 0; M--)
      r = T[M], i = r.name, o = r.namespaceURI, o ? (i = r.localName || i, e.hasAttributeNS(o, i) || s.removeAttributeNS(o, i)) : e.hasAttribute(i) || s.removeAttribute(i);
  }
}
var x, le = "http://www.w3.org/1999/xhtml", f = typeof document > "u" ? void 0 : document, oe = !!f && "content" in f.createElement("template"), he = !!f && f.createRange && "createContextualFragment" in f.createRange();
function de(s) {
  var e = f.createElement("template");
  return e.innerHTML = s, e.content.childNodes[0];
}
function ue(s) {
  x || (x = f.createRange(), x.selectNode(f.body));
  var e = x.createContextualFragment(s);
  return e.childNodes[0];
}
function fe(s) {
  var e = f.createElement("body");
  return e.innerHTML = s, e.childNodes[0];
}
function ge(s) {
  return s = s.trim(), oe ? de(s) : he ? ue(s) : fe(s);
}
function C(s, e) {
  var t = s.nodeName, r = e.nodeName, i, o;
  return t === r ? !0 : (i = t.charCodeAt(0), o = r.charCodeAt(0), i <= 90 && o >= 97 ? t === r.toUpperCase() : o <= 90 && i >= 97 ? r === t.toUpperCase() : !1);
}
function pe(s, e) {
  return !e || e === le ? f.createElement(s) : f.createElementNS(e, s);
}
function ve(s, e) {
  for (var t = s.firstChild; t; ) {
    var r = t.nextSibling;
    e.appendChild(t), t = r;
  }
  return e;
}
function j(s, e, t) {
  s[t] !== e[t] && (s[t] = e[t], s[t] ? s.setAttribute(t, "") : s.removeAttribute(t));
}
var K = {
  OPTION: function(s, e) {
    var t = s.parentNode;
    if (t) {
      var r = t.nodeName.toUpperCase();
      r === "OPTGROUP" && (t = t.parentNode, r = t && t.nodeName.toUpperCase()), r === "SELECT" && !t.hasAttribute("multiple") && (s.hasAttribute("selected") && !e.selected && (s.setAttribute("selected", "selected"), s.removeAttribute("selected")), t.selectedIndex = -1);
    }
    j(s, e, "selected");
  },
  /**
   * The "value" attribute is special for the <input> element since it sets
   * the initial value. Changing the "value" attribute without changing the
   * "value" property will have no effect since it is only used to the set the
   * initial value.  Similar for the "checked" attribute, and "disabled".
   */
  INPUT: function(s, e) {
    j(s, e, "checked"), j(s, e, "disabled"), s.value !== e.value && (s.value = e.value), e.hasAttribute("value") || s.removeAttribute("value");
  },
  TEXTAREA: function(s, e) {
    var t = e.value;
    s.value !== t && (s.value = t);
    var r = s.firstChild;
    if (r) {
      var i = r.nodeValue;
      if (i == t || !t && i == s.placeholder)
        return;
      r.nodeValue = t;
    }
  },
  SELECT: function(s, e) {
    if (!e.hasAttribute("multiple")) {
      for (var t = -1, r = 0, i = s.firstChild, o, d; i; )
        if (d = i.nodeName && i.nodeName.toUpperCase(), d === "OPTGROUP")
          o = i, i = o.firstChild, i || (i = o.nextSibling, o = null);
        else {
          if (d === "OPTION") {
            if (i.hasAttribute("selected")) {
              t = r;
              break;
            }
            r++;
          }
          i = i.nextSibling, !i && o && (i = o.nextSibling, o = null);
        }
      s.selectedIndex = t;
    }
  }
}, A = 1, X = 11, q = 3, Y = 8;
function m() {
}
function ye(s) {
  if (s)
    return s.getAttribute && s.getAttribute("id") || s.id;
}
function me(s) {
  return function(t, r, i) {
    if (i || (i = {}), typeof r == "string")
      if (t.nodeName === "#document" || t.nodeName === "HTML" || t.nodeName === "BODY") {
        var o = r;
        r = f.createElement("html"), r.innerHTML = o;
      } else
        r = ge(r);
    else r.nodeType === X && (r = r.firstElementChild);
    var d = i.getNodeKey || ye, p = i.onBeforeNodeAdded || m, w = i.onNodeAdded || m, T = i.onBeforeElUpdated || m, M = i.onElUpdated || m, ee = i.onBeforeNodeDiscarded || m, L = i.onNodeDiscarded || m, te = i.onBeforeElChildrenUpdated || m, re = i.skipFromChildren || m, B = i.addChild || function(n, a) {
      return n.appendChild(a);
    }, I = i.childrenOnly === !0, b = /* @__PURE__ */ Object.create(null), R = [];
    function U(n) {
      R.push(n);
    }
    function V(n, a) {
      if (n.nodeType === A)
        for (var h = n.firstChild; h; ) {
          var c = void 0;
          a && (c = d(h)) ? U(c) : (L(h), h.firstChild && V(h, a)), h = h.nextSibling;
        }
    }
    function D(n, a, h) {
      ee(n) !== !1 && (a && a.removeChild(n), L(n), V(n, h));
    }
    function P(n) {
      if (n.nodeType === A || n.nodeType === X)
        for (var a = n.firstChild; a; ) {
          var h = d(a);
          h && (b[h] = a), P(a), a = a.nextSibling;
        }
    }
    P(t);
    function _(n) {
      w(n);
      for (var a = n.firstChild; a; ) {
        var h = a.nextSibling, c = d(a);
        if (c) {
          var l = b[c];
          l && C(a, l) ? (a.parentNode.replaceChild(l, a), N(l, a)) : _(a);
        } else
          _(a);
        a = h;
      }
    }
    function se(n, a, h) {
      for (; a; ) {
        var c = a.nextSibling;
        (h = d(a)) ? U(h) : D(
          a,
          n,
          !0
          /* skip keyed nodes */
        ), a = c;
      }
    }
    function N(n, a, h) {
      var c = d(a);
      if (c && delete b[c], !h) {
        var l = T(n, a);
        if (l === !1 || (l instanceof HTMLElement && (n = l, P(n)), s(n, a), M(n), te(n, a) === !1))
          return;
      }
      n.nodeName !== "TEXTAREA" ? ie(n, a) : K.TEXTAREA(n, a);
    }
    function ie(n, a) {
      var h = re(n, a), c = a.firstChild, l = n.firstChild, k, g, S, H, v;
      e: for (; c; ) {
        for (H = c.nextSibling, k = d(c); !h && l; ) {
          if (S = l.nextSibling, c.isSameNode && c.isSameNode(l)) {
            c = H, l = S;
            continue e;
          }
          g = d(l);
          var z = l.nodeType, y = void 0;
          if (z === c.nodeType && (z === A ? (k ? k !== g && ((v = b[k]) ? S === v ? y = !1 : (n.insertBefore(v, l), g ? U(g) : D(
            l,
            n,
            !0
            /* skip keyed nodes */
          ), l = v, g = d(l)) : y = !1) : g && (y = !1), y = y !== !1 && C(l, c), y && N(l, c)) : (z === q || z == Y) && (y = !0, l.nodeValue !== c.nodeValue && (l.nodeValue = c.nodeValue))), y) {
            c = H, l = S;
            continue e;
          }
          g ? U(g) : D(
            l,
            n,
            !0
            /* skip keyed nodes */
          ), l = S;
        }
        if (k && (v = b[k]) && C(v, c))
          h || B(n, v), N(v, c);
        else {
          var E = p(c);
          E !== !1 && (E && (c = E), c.actualize && (c = c.actualize(n.ownerDocument || f)), B(n, c), _(c));
        }
        c = H, l = S;
      }
      se(n, l, g);
      var Q = K[n.nodeName];
      Q && Q(n, a);
    }
    var u = t, O = u.nodeType, F = r.nodeType;
    if (!I) {
      if (O === A)
        F === A ? C(t, r) || (L(t), u = ve(t, pe(r.nodeName, r.namespaceURI))) : u = r;
      else if (O === q || O === Y) {
        if (F === O)
          return u.nodeValue !== r.nodeValue && (u.nodeValue = r.nodeValue), u;
        u = r;
      }
    }
    if (u === r)
      L(t);
    else {
      if (r.isSameNode && r.isSameNode(u))
        return;
      if (N(u, r, I), R)
        for (var W = 0, ne = R.length; W < ne; W++) {
          var $ = b[R[W]];
          $ && D($, $.parentNode, !1);
        }
    }
    return !I && u !== t && t.parentNode && (u.actualize && (u = u.actualize(t.ownerDocument || f)), t.parentNode.replaceChild(u, t)), u;
  };
}
var we = me(ce);
class be {
  /**
   * Creates a new Arizona client instance
   * @param {ArizonaClientOptions} [opts={}] - Client configuration options
   */
  constructor(e = {}) {
    this.worker = null, this.connected = !1, this.eventListeners = /* @__PURE__ */ new Map(), this.logger = e.logger || null;
  }
  /**
   * Initialize worker if not already created
   * @private
   * @returns {void}
   */
  initializeWorker() {
    this.worker || (this.worker = new ae(), this.worker.onmessage = (e) => {
      this.handleWorkerMessage(e.data);
    });
  }
  /**
   * Connect to the Arizona WebSocket server
   * @param {string} websocketEndpoint - WebSocket endpoint path
   * @returns {void}
   */
  connect(e) {
    if (this.connected) return;
    this.initializeWorker();
    const t = window.location.protocol === "https:" ? "wss:" : "ws:", r = window.location.host, i = window.location.pathname, o = window.location.search, d = encodeURIComponent(i), p = o ? encodeURIComponent(o.substring(1)) : "", w = `${t}//${r}${e}?path=${d}&qs=${p}`;
    this.worker.postMessage({
      type: "connect",
      data: { url: w }
    });
  }
  /**
   * Push an event to the Arizona server
   * @param {string} event - Event name
   * @param {EventParams} [params={}] - Event parameters
   * @returns {void}
   */
  pushEvent(e, t = {}) {
    this.connected && this.worker.postMessage({
      type: "send",
      data: {
        type: "event",
        event: e,
        params: t
      }
    });
  }
  /**
   * Push an event to a specific stateful component
   * @param {string} statefulId - Target stateful component ID
   * @param {string} event - Event name
   * @param {EventParams} [params={}] - Event parameters
   * @returns {void}
   */
  pushEventTo(e, t, r = {}) {
    this.connected && this.worker.postMessage({
      type: "send",
      data: {
        type: "event",
        stateful_id: e,
        event: t,
        params: r
      }
    });
  }
  /**
   * Disconnect from the Arizona WebSocket server
   * @returns {void}
   */
  disconnect() {
    this.worker && (this.worker.terminate(), this.worker = null), this.connected = !1;
  }
  /**
   * Handle messages from the worker thread
   * @private
   * @param {Object} message - Worker message
   * @returns {void}
   */
  handleWorkerMessage(e) {
    const { type: t, data: r } = e;
    try {
      switch (t) {
        case "status":
          this.handleStatus(r);
          break;
        case "initial_render":
          break;
        case "html_patch":
          this.handleHtmlPatch(r);
          break;
        case "error":
          this.handleWorkerError(r);
          break;
        case "reload":
          this.handleReload(r);
          break;
        case "dispatch":
          this.handleDispatch(r);
          break;
        case "redirect":
          this.handleRedirect(r);
          break;
        default:
          this.handleUnknownMessage(e);
      }
    } catch (i) {
      this.logger?.error("Error handling worker message:", i);
    }
  }
  handleStatus(e) {
    e.status === "connected" ? (this.connected = !0, this.logger?.info("Connected to WebSocket"), this.emit("connected", e)) : e.status === "disconnected" && (this.connected = !1, this.logger?.info("Disconnected from WebSocket"), this.emit("disconnected", e));
  }
  handleHtmlPatch(e) {
    this.logger?.debug("Applying HTML patch"), this.applyHtmlPatch(e.patch);
  }
  applyHtmlPatch(e) {
    const t = document.getElementById(e.statefulId);
    if (!t) {
      this.logger?.warning(`Target element not found: ${e.statefulId}`);
      return;
    }
    try {
      we(t, e.html, {
        onBeforeElUpdated(r, i) {
          return i.dataset?.arizonaUpdate === "false" ? !1 : !r.isEqualNode(i);
        }
      }), this.logger?.debug("Patch applied successfully");
    } catch (r) {
      this.logger?.error("Error applying HTML patch:", r);
    }
  }
  handleWorkerError(e) {
    this.logger?.error("Worker Error:", e.error), this.emit("error", e);
  }
  handleReload(e) {
    switch (e.file_type) {
      case "css":
        this.logger?.info("CSS file changed. Refreshing stylesheets without page reload..."), document.querySelectorAll('link[rel="stylesheet"]').forEach((t) => {
          const r = t.href.split("?")[0];
          t.href = `${r}?t=${Date.now()}`;
        });
        break;
      default:
        this.logger?.info(`${e.file_type || "File"} changed. Reloading page...`), window.location.reload();
    }
  }
  handleDispatch(e) {
    this.logger?.debug("Dispatching event:", e.event), this.emit(e.event, e.data);
  }
  handleRedirect(e) {
    this.logger?.info("Redirecting to:", e.url), window.open(e.url, e.options?.target, e.options?.window_features);
  }
  handleUnknownMessage(e) {
    this.logger?.warning("Unknown worker message:", e);
  }
  /**
   * Check if client is connected to server
   * @returns {boolean} True if connected
   */
  isConnected() {
    return this.connected;
  }
  /**
   * Subscribe to an Arizona event
   * @param {string} event - Event name (e.g., 'connected', 'disconnected')
   * @param {Function} callback - Callback function to invoke when event occurs
   * @returns {Function} Unsubscribe function
   */
  on(e, t) {
    return typeof t != "function" ? (this.logger?.error(`on: callback must be a function, got ${typeof t}`), () => {
    }) : (this.eventListeners.has(e) || this.eventListeners.set(e, /* @__PURE__ */ new Set()), this.eventListeners.get(e).add(t), this.logger?.debug(`Subscribed to event: ${e}`), () => this.off(e, t));
  }
  /**
   * Subscribe to an Arizona event that will only fire once
   * @param {string} event - Event name
   * @param {Function} callback - Callback function to invoke when event occurs
   * @returns {Function} Unsubscribe function
   */
  once(e, t) {
    if (typeof t != "function")
      return this.logger?.error(`once: callback must be a function, got ${typeof t}`), () => {
      };
    const r = (i) => {
      t(i), this.off(e, r);
    };
    return this.on(e, r);
  }
  /**
   * Unsubscribe from an Arizona event
   * @param {string} event - Event name
   * @param {Function} callback - Callback function to remove
   * @returns {void}
   */
  off(e, t) {
    const r = this.eventListeners.get(e);
    r && (r.delete(t), this.logger?.debug(`Unsubscribed from event: ${e}`), r.size === 0 && this.eventListeners.delete(e));
  }
  /**
   * Remove all listeners for a specific event, or all events if no event specified
   * @param {string} [event] - Optional event name. If not provided, removes all listeners for all events
   * @returns {void}
   */
  removeAllListeners(e) {
    e ? (this.eventListeners.delete(e), this.logger?.debug(`Removed all listeners for event: ${e}`)) : (this.eventListeners.clear(), this.logger?.debug("Removed all event listeners"));
  }
  /**
   * Emit an Arizona event to all subscribed listeners
   * @private
   * @param {string} event - Event name
   * @param {*} data - Event data to pass to listeners
   * @returns {void}
   */
  emit(e, t) {
    const r = this.eventListeners.get(e);
    r && r.forEach((i) => {
      try {
        i(t);
      } catch (o) {
        this.logger?.error(`Error in event listener for '${e}':`, o);
      }
    });
  }
}
export {
  be as default
};
//# sourceMappingURL=arizona.min.js.map
