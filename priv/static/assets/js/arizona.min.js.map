{"version":3,"file":"arizona.min.js","sources":["../../../../node_modules/morphdom/dist/morphdom-esm.js","../../../../assets/js/arizona.js"],"sourcesContent":["var DOCUMENT_FRAGMENT_NODE = 11;\n\nfunction morphAttrs(fromNode, toNode) {\n    var toNodeAttrs = toNode.attributes;\n    var attr;\n    var attrName;\n    var attrNamespaceURI;\n    var attrValue;\n    var fromValue;\n\n    // document-fragments dont have attributes so lets not do anything\n    if (toNode.nodeType === DOCUMENT_FRAGMENT_NODE || fromNode.nodeType === DOCUMENT_FRAGMENT_NODE) {\n      return;\n    }\n\n    // update attributes on original DOM element\n    for (var i = toNodeAttrs.length - 1; i >= 0; i--) {\n        attr = toNodeAttrs[i];\n        attrName = attr.name;\n        attrNamespaceURI = attr.namespaceURI;\n        attrValue = attr.value;\n\n        if (attrNamespaceURI) {\n            attrName = attr.localName || attrName;\n            fromValue = fromNode.getAttributeNS(attrNamespaceURI, attrName);\n\n            if (fromValue !== attrValue) {\n                if (attr.prefix === 'xmlns'){\n                    attrName = attr.name; // It's not allowed to set an attribute with the XMLNS namespace without specifying the `xmlns` prefix\n                }\n                fromNode.setAttributeNS(attrNamespaceURI, attrName, attrValue);\n            }\n        } else {\n            fromValue = fromNode.getAttribute(attrName);\n\n            if (fromValue !== attrValue) {\n                fromNode.setAttribute(attrName, attrValue);\n            }\n        }\n    }\n\n    // Remove any extra attributes found on the original DOM element that\n    // weren't found on the target element.\n    var fromNodeAttrs = fromNode.attributes;\n\n    for (var d = fromNodeAttrs.length - 1; d >= 0; d--) {\n        attr = fromNodeAttrs[d];\n        attrName = attr.name;\n        attrNamespaceURI = attr.namespaceURI;\n\n        if (attrNamespaceURI) {\n            attrName = attr.localName || attrName;\n\n            if (!toNode.hasAttributeNS(attrNamespaceURI, attrName)) {\n                fromNode.removeAttributeNS(attrNamespaceURI, attrName);\n            }\n        } else {\n            if (!toNode.hasAttribute(attrName)) {\n                fromNode.removeAttribute(attrName);\n            }\n        }\n    }\n}\n\nvar range; // Create a range object for efficently rendering strings to elements.\nvar NS_XHTML = 'http://www.w3.org/1999/xhtml';\n\nvar doc = typeof document === 'undefined' ? undefined : document;\nvar HAS_TEMPLATE_SUPPORT = !!doc && 'content' in doc.createElement('template');\nvar HAS_RANGE_SUPPORT = !!doc && doc.createRange && 'createContextualFragment' in doc.createRange();\n\nfunction createFragmentFromTemplate(str) {\n    var template = doc.createElement('template');\n    template.innerHTML = str;\n    return template.content.childNodes[0];\n}\n\nfunction createFragmentFromRange(str) {\n    if (!range) {\n        range = doc.createRange();\n        range.selectNode(doc.body);\n    }\n\n    var fragment = range.createContextualFragment(str);\n    return fragment.childNodes[0];\n}\n\nfunction createFragmentFromWrap(str) {\n    var fragment = doc.createElement('body');\n    fragment.innerHTML = str;\n    return fragment.childNodes[0];\n}\n\n/**\n * This is about the same\n * var html = new DOMParser().parseFromString(str, 'text/html');\n * return html.body.firstChild;\n *\n * @method toElement\n * @param {String} str\n */\nfunction toElement(str) {\n    str = str.trim();\n    if (HAS_TEMPLATE_SUPPORT) {\n      // avoid restrictions on content for things like `<tr><th>Hi</th></tr>` which\n      // createContextualFragment doesn't support\n      // <template> support not available in IE\n      return createFragmentFromTemplate(str);\n    } else if (HAS_RANGE_SUPPORT) {\n      return createFragmentFromRange(str);\n    }\n\n    return createFragmentFromWrap(str);\n}\n\n/**\n * Returns true if two node's names are the same.\n *\n * NOTE: We don't bother checking `namespaceURI` because you will never find two HTML elements with the same\n *       nodeName and different namespace URIs.\n *\n * @param {Element} a\n * @param {Element} b The target element\n * @return {boolean}\n */\nfunction compareNodeNames(fromEl, toEl) {\n    var fromNodeName = fromEl.nodeName;\n    var toNodeName = toEl.nodeName;\n    var fromCodeStart, toCodeStart;\n\n    if (fromNodeName === toNodeName) {\n        return true;\n    }\n\n    fromCodeStart = fromNodeName.charCodeAt(0);\n    toCodeStart = toNodeName.charCodeAt(0);\n\n    // If the target element is a virtual DOM node or SVG node then we may\n    // need to normalize the tag name before comparing. Normal HTML elements that are\n    // in the \"http://www.w3.org/1999/xhtml\"\n    // are converted to upper case\n    if (fromCodeStart <= 90 && toCodeStart >= 97) { // from is upper and to is lower\n        return fromNodeName === toNodeName.toUpperCase();\n    } else if (toCodeStart <= 90 && fromCodeStart >= 97) { // to is upper and from is lower\n        return toNodeName === fromNodeName.toUpperCase();\n    } else {\n        return false;\n    }\n}\n\n/**\n * Create an element, optionally with a known namespace URI.\n *\n * @param {string} name the element name, e.g. 'div' or 'svg'\n * @param {string} [namespaceURI] the element's namespace URI, i.e. the value of\n * its `xmlns` attribute or its inferred namespace.\n *\n * @return {Element}\n */\nfunction createElementNS(name, namespaceURI) {\n    return !namespaceURI || namespaceURI === NS_XHTML ?\n        doc.createElement(name) :\n        doc.createElementNS(namespaceURI, name);\n}\n\n/**\n * Copies the children of one DOM element to another DOM element\n */\nfunction moveChildren(fromEl, toEl) {\n    var curChild = fromEl.firstChild;\n    while (curChild) {\n        var nextChild = curChild.nextSibling;\n        toEl.appendChild(curChild);\n        curChild = nextChild;\n    }\n    return toEl;\n}\n\nfunction syncBooleanAttrProp(fromEl, toEl, name) {\n    if (fromEl[name] !== toEl[name]) {\n        fromEl[name] = toEl[name];\n        if (fromEl[name]) {\n            fromEl.setAttribute(name, '');\n        } else {\n            fromEl.removeAttribute(name);\n        }\n    }\n}\n\nvar specialElHandlers = {\n    OPTION: function(fromEl, toEl) {\n        var parentNode = fromEl.parentNode;\n        if (parentNode) {\n            var parentName = parentNode.nodeName.toUpperCase();\n            if (parentName === 'OPTGROUP') {\n                parentNode = parentNode.parentNode;\n                parentName = parentNode && parentNode.nodeName.toUpperCase();\n            }\n            if (parentName === 'SELECT' && !parentNode.hasAttribute('multiple')) {\n                if (fromEl.hasAttribute('selected') && !toEl.selected) {\n                    // Workaround for MS Edge bug where the 'selected' attribute can only be\n                    // removed if set to a non-empty value:\n                    // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12087679/\n                    fromEl.setAttribute('selected', 'selected');\n                    fromEl.removeAttribute('selected');\n                }\n                // We have to reset select element's selectedIndex to -1, otherwise setting\n                // fromEl.selected using the syncBooleanAttrProp below has no effect.\n                // The correct selectedIndex will be set in the SELECT special handler below.\n                parentNode.selectedIndex = -1;\n            }\n        }\n        syncBooleanAttrProp(fromEl, toEl, 'selected');\n    },\n    /**\n     * The \"value\" attribute is special for the <input> element since it sets\n     * the initial value. Changing the \"value\" attribute without changing the\n     * \"value\" property will have no effect since it is only used to the set the\n     * initial value.  Similar for the \"checked\" attribute, and \"disabled\".\n     */\n    INPUT: function(fromEl, toEl) {\n        syncBooleanAttrProp(fromEl, toEl, 'checked');\n        syncBooleanAttrProp(fromEl, toEl, 'disabled');\n\n        if (fromEl.value !== toEl.value) {\n            fromEl.value = toEl.value;\n        }\n\n        if (!toEl.hasAttribute('value')) {\n            fromEl.removeAttribute('value');\n        }\n    },\n\n    TEXTAREA: function(fromEl, toEl) {\n        var newValue = toEl.value;\n        if (fromEl.value !== newValue) {\n            fromEl.value = newValue;\n        }\n\n        var firstChild = fromEl.firstChild;\n        if (firstChild) {\n            // Needed for IE. Apparently IE sets the placeholder as the\n            // node value and vise versa. This ignores an empty update.\n            var oldValue = firstChild.nodeValue;\n\n            if (oldValue == newValue || (!newValue && oldValue == fromEl.placeholder)) {\n                return;\n            }\n\n            firstChild.nodeValue = newValue;\n        }\n    },\n    SELECT: function(fromEl, toEl) {\n        if (!toEl.hasAttribute('multiple')) {\n            var selectedIndex = -1;\n            var i = 0;\n            // We have to loop through children of fromEl, not toEl since nodes can be moved\n            // from toEl to fromEl directly when morphing.\n            // At the time this special handler is invoked, all children have already been morphed\n            // and appended to / removed from fromEl, so using fromEl here is safe and correct.\n            var curChild = fromEl.firstChild;\n            var optgroup;\n            var nodeName;\n            while(curChild) {\n                nodeName = curChild.nodeName && curChild.nodeName.toUpperCase();\n                if (nodeName === 'OPTGROUP') {\n                    optgroup = curChild;\n                    curChild = optgroup.firstChild;\n                    // handle empty optgroups\n                    if (!curChild) {\n                        curChild = optgroup.nextSibling;\n                        optgroup = null;\n                    }\n                } else {\n                    if (nodeName === 'OPTION') {\n                        if (curChild.hasAttribute('selected')) {\n                            selectedIndex = i;\n                            break;\n                        }\n                        i++;\n                    }\n                    curChild = curChild.nextSibling;\n                    if (!curChild && optgroup) {\n                        curChild = optgroup.nextSibling;\n                        optgroup = null;\n                    }\n                }\n            }\n\n            fromEl.selectedIndex = selectedIndex;\n        }\n    }\n};\n\nvar ELEMENT_NODE = 1;\nvar DOCUMENT_FRAGMENT_NODE$1 = 11;\nvar TEXT_NODE = 3;\nvar COMMENT_NODE = 8;\n\nfunction noop() {}\n\nfunction defaultGetNodeKey(node) {\n  if (node) {\n    return (node.getAttribute && node.getAttribute('id')) || node.id;\n  }\n}\n\nfunction morphdomFactory(morphAttrs) {\n\n  return function morphdom(fromNode, toNode, options) {\n    if (!options) {\n      options = {};\n    }\n\n    if (typeof toNode === 'string') {\n      if (fromNode.nodeName === '#document' || fromNode.nodeName === 'HTML' || fromNode.nodeName === 'BODY') {\n        var toNodeHtml = toNode;\n        toNode = doc.createElement('html');\n        toNode.innerHTML = toNodeHtml;\n      } else {\n        toNode = toElement(toNode);\n      }\n    } else if (toNode.nodeType === DOCUMENT_FRAGMENT_NODE$1) {\n      toNode = toNode.firstElementChild;\n    }\n\n    var getNodeKey = options.getNodeKey || defaultGetNodeKey;\n    var onBeforeNodeAdded = options.onBeforeNodeAdded || noop;\n    var onNodeAdded = options.onNodeAdded || noop;\n    var onBeforeElUpdated = options.onBeforeElUpdated || noop;\n    var onElUpdated = options.onElUpdated || noop;\n    var onBeforeNodeDiscarded = options.onBeforeNodeDiscarded || noop;\n    var onNodeDiscarded = options.onNodeDiscarded || noop;\n    var onBeforeElChildrenUpdated = options.onBeforeElChildrenUpdated || noop;\n    var skipFromChildren = options.skipFromChildren || noop;\n    var addChild = options.addChild || function(parent, child){ return parent.appendChild(child); };\n    var childrenOnly = options.childrenOnly === true;\n\n    // This object is used as a lookup to quickly find all keyed elements in the original DOM tree.\n    var fromNodesLookup = Object.create(null);\n    var keyedRemovalList = [];\n\n    function addKeyedRemoval(key) {\n      keyedRemovalList.push(key);\n    }\n\n    function walkDiscardedChildNodes(node, skipKeyedNodes) {\n      if (node.nodeType === ELEMENT_NODE) {\n        var curChild = node.firstChild;\n        while (curChild) {\n\n          var key = undefined;\n\n          if (skipKeyedNodes && (key = getNodeKey(curChild))) {\n            // If we are skipping keyed nodes then we add the key\n            // to a list so that it can be handled at the very end.\n            addKeyedRemoval(key);\n          } else {\n            // Only report the node as discarded if it is not keyed. We do this because\n            // at the end we loop through all keyed elements that were unmatched\n            // and then discard them in one final pass.\n            onNodeDiscarded(curChild);\n            if (curChild.firstChild) {\n              walkDiscardedChildNodes(curChild, skipKeyedNodes);\n            }\n          }\n\n          curChild = curChild.nextSibling;\n        }\n      }\n    }\n\n    /**\n    * Removes a DOM node out of the original DOM\n    *\n    * @param  {Node} node The node to remove\n    * @param  {Node} parentNode The nodes parent\n    * @param  {Boolean} skipKeyedNodes If true then elements with keys will be skipped and not discarded.\n    * @return {undefined}\n    */\n    function removeNode(node, parentNode, skipKeyedNodes) {\n      if (onBeforeNodeDiscarded(node) === false) {\n        return;\n      }\n\n      if (parentNode) {\n        parentNode.removeChild(node);\n      }\n\n      onNodeDiscarded(node);\n      walkDiscardedChildNodes(node, skipKeyedNodes);\n    }\n\n    // // TreeWalker implementation is no faster, but keeping this around in case this changes in the future\n    // function indexTree(root) {\n    //     var treeWalker = document.createTreeWalker(\n    //         root,\n    //         NodeFilter.SHOW_ELEMENT);\n    //\n    //     var el;\n    //     while((el = treeWalker.nextNode())) {\n    //         var key = getNodeKey(el);\n    //         if (key) {\n    //             fromNodesLookup[key] = el;\n    //         }\n    //     }\n    // }\n\n    // // NodeIterator implementation is no faster, but keeping this around in case this changes in the future\n    //\n    // function indexTree(node) {\n    //     var nodeIterator = document.createNodeIterator(node, NodeFilter.SHOW_ELEMENT);\n    //     var el;\n    //     while((el = nodeIterator.nextNode())) {\n    //         var key = getNodeKey(el);\n    //         if (key) {\n    //             fromNodesLookup[key] = el;\n    //         }\n    //     }\n    // }\n\n    function indexTree(node) {\n      if (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE$1) {\n        var curChild = node.firstChild;\n        while (curChild) {\n          var key = getNodeKey(curChild);\n          if (key) {\n            fromNodesLookup[key] = curChild;\n          }\n\n          // Walk recursively\n          indexTree(curChild);\n\n          curChild = curChild.nextSibling;\n        }\n      }\n    }\n\n    indexTree(fromNode);\n\n    function handleNodeAdded(el) {\n      onNodeAdded(el);\n\n      var curChild = el.firstChild;\n      while (curChild) {\n        var nextSibling = curChild.nextSibling;\n\n        var key = getNodeKey(curChild);\n        if (key) {\n          var unmatchedFromEl = fromNodesLookup[key];\n          // if we find a duplicate #id node in cache, replace `el` with cache value\n          // and morph it to the child node.\n          if (unmatchedFromEl && compareNodeNames(curChild, unmatchedFromEl)) {\n            curChild.parentNode.replaceChild(unmatchedFromEl, curChild);\n            morphEl(unmatchedFromEl, curChild);\n          } else {\n            handleNodeAdded(curChild);\n          }\n        } else {\n          // recursively call for curChild and it's children to see if we find something in\n          // fromNodesLookup\n          handleNodeAdded(curChild);\n        }\n\n        curChild = nextSibling;\n      }\n    }\n\n    function cleanupFromEl(fromEl, curFromNodeChild, curFromNodeKey) {\n      // We have processed all of the \"to nodes\". If curFromNodeChild is\n      // non-null then we still have some from nodes left over that need\n      // to be removed\n      while (curFromNodeChild) {\n        var fromNextSibling = curFromNodeChild.nextSibling;\n        if ((curFromNodeKey = getNodeKey(curFromNodeChild))) {\n          // Since the node is keyed it might be matched up later so we defer\n          // the actual removal to later\n          addKeyedRemoval(curFromNodeKey);\n        } else {\n          // NOTE: we skip nested keyed nodes from being removed since there is\n          //       still a chance they will be matched up later\n          removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);\n        }\n        curFromNodeChild = fromNextSibling;\n      }\n    }\n\n    function morphEl(fromEl, toEl, childrenOnly) {\n      var toElKey = getNodeKey(toEl);\n\n      if (toElKey) {\n        // If an element with an ID is being morphed then it will be in the final\n        // DOM so clear it out of the saved elements collection\n        delete fromNodesLookup[toElKey];\n      }\n\n      if (!childrenOnly) {\n        // optional\n        var beforeUpdateResult = onBeforeElUpdated(fromEl, toEl);\n        if (beforeUpdateResult === false) {\n          return;\n        } else if (beforeUpdateResult instanceof HTMLElement) {\n          fromEl = beforeUpdateResult;\n          // reindex the new fromEl in case it's not in the same\n          // tree as the original fromEl\n          // (Phoenix LiveView sometimes returns a cloned tree,\n          //  but keyed lookups would still point to the original tree)\n          indexTree(fromEl);\n        }\n\n        // update attributes on original DOM element first\n        morphAttrs(fromEl, toEl);\n        // optional\n        onElUpdated(fromEl);\n\n        if (onBeforeElChildrenUpdated(fromEl, toEl) === false) {\n          return;\n        }\n      }\n\n      if (fromEl.nodeName !== 'TEXTAREA') {\n        morphChildren(fromEl, toEl);\n      } else {\n        specialElHandlers.TEXTAREA(fromEl, toEl);\n      }\n    }\n\n    function morphChildren(fromEl, toEl) {\n      var skipFrom = skipFromChildren(fromEl, toEl);\n      var curToNodeChild = toEl.firstChild;\n      var curFromNodeChild = fromEl.firstChild;\n      var curToNodeKey;\n      var curFromNodeKey;\n\n      var fromNextSibling;\n      var toNextSibling;\n      var matchingFromEl;\n\n      // walk the children\n      outer: while (curToNodeChild) {\n        toNextSibling = curToNodeChild.nextSibling;\n        curToNodeKey = getNodeKey(curToNodeChild);\n\n        // walk the fromNode children all the way through\n        while (!skipFrom && curFromNodeChild) {\n          fromNextSibling = curFromNodeChild.nextSibling;\n\n          if (curToNodeChild.isSameNode && curToNodeChild.isSameNode(curFromNodeChild)) {\n            curToNodeChild = toNextSibling;\n            curFromNodeChild = fromNextSibling;\n            continue outer;\n          }\n\n          curFromNodeKey = getNodeKey(curFromNodeChild);\n\n          var curFromNodeType = curFromNodeChild.nodeType;\n\n          // this means if the curFromNodeChild doesnt have a match with the curToNodeChild\n          var isCompatible = undefined;\n\n          if (curFromNodeType === curToNodeChild.nodeType) {\n            if (curFromNodeType === ELEMENT_NODE) {\n              // Both nodes being compared are Element nodes\n\n              if (curToNodeKey) {\n                // The target node has a key so we want to match it up with the correct element\n                // in the original DOM tree\n                if (curToNodeKey !== curFromNodeKey) {\n                  // The current element in the original DOM tree does not have a matching key so\n                  // let's check our lookup to see if there is a matching element in the original\n                  // DOM tree\n                  if ((matchingFromEl = fromNodesLookup[curToNodeKey])) {\n                    if (fromNextSibling === matchingFromEl) {\n                      // Special case for single element removals. To avoid removing the original\n                      // DOM node out of the tree (since that can break CSS transitions, etc.),\n                      // we will instead discard the current node and wait until the next\n                      // iteration to properly match up the keyed target element with its matching\n                      // element in the original tree\n                      isCompatible = false;\n                    } else {\n                      // We found a matching keyed element somewhere in the original DOM tree.\n                      // Let's move the original DOM node into the current position and morph\n                      // it.\n\n                      // NOTE: We use insertBefore instead of replaceChild because we want to go through\n                      // the `removeNode()` function for the node that is being discarded so that\n                      // all lifecycle hooks are correctly invoked\n                      fromEl.insertBefore(matchingFromEl, curFromNodeChild);\n\n                      // fromNextSibling = curFromNodeChild.nextSibling;\n\n                      if (curFromNodeKey) {\n                        // Since the node is keyed it might be matched up later so we defer\n                        // the actual removal to later\n                        addKeyedRemoval(curFromNodeKey);\n                      } else {\n                        // NOTE: we skip nested keyed nodes from being removed since there is\n                        //       still a chance they will be matched up later\n                        removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);\n                      }\n\n                      curFromNodeChild = matchingFromEl;\n                      curFromNodeKey = getNodeKey(curFromNodeChild);\n                    }\n                  } else {\n                    // The nodes are not compatible since the \"to\" node has a key and there\n                    // is no matching keyed node in the source tree\n                    isCompatible = false;\n                  }\n                }\n              } else if (curFromNodeKey) {\n                // The original has a key\n                isCompatible = false;\n              }\n\n              isCompatible = isCompatible !== false && compareNodeNames(curFromNodeChild, curToNodeChild);\n              if (isCompatible) {\n                // We found compatible DOM elements so transform\n                // the current \"from\" node to match the current\n                // target DOM node.\n                // MORPH\n                morphEl(curFromNodeChild, curToNodeChild);\n              }\n\n            } else if (curFromNodeType === TEXT_NODE || curFromNodeType == COMMENT_NODE) {\n              // Both nodes being compared are Text or Comment nodes\n              isCompatible = true;\n              // Simply update nodeValue on the original node to\n              // change the text value\n              if (curFromNodeChild.nodeValue !== curToNodeChild.nodeValue) {\n                curFromNodeChild.nodeValue = curToNodeChild.nodeValue;\n              }\n\n            }\n          }\n\n          if (isCompatible) {\n            // Advance both the \"to\" child and the \"from\" child since we found a match\n            // Nothing else to do as we already recursively called morphChildren above\n            curToNodeChild = toNextSibling;\n            curFromNodeChild = fromNextSibling;\n            continue outer;\n          }\n\n          // No compatible match so remove the old node from the DOM and continue trying to find a\n          // match in the original DOM. However, we only do this if the from node is not keyed\n          // since it is possible that a keyed node might match up with a node somewhere else in the\n          // target tree and we don't want to discard it just yet since it still might find a\n          // home in the final DOM tree. After everything is done we will remove any keyed nodes\n          // that didn't find a home\n          if (curFromNodeKey) {\n            // Since the node is keyed it might be matched up later so we defer\n            // the actual removal to later\n            addKeyedRemoval(curFromNodeKey);\n          } else {\n            // NOTE: we skip nested keyed nodes from being removed since there is\n            //       still a chance they will be matched up later\n            removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);\n          }\n\n          curFromNodeChild = fromNextSibling;\n        } // END: while(curFromNodeChild) {}\n\n        // If we got this far then we did not find a candidate match for\n        // our \"to node\" and we exhausted all of the children \"from\"\n        // nodes. Therefore, we will just append the current \"to\" node\n        // to the end\n        if (curToNodeKey && (matchingFromEl = fromNodesLookup[curToNodeKey]) && compareNodeNames(matchingFromEl, curToNodeChild)) {\n          // MORPH\n          if(!skipFrom){ addChild(fromEl, matchingFromEl); }\n          morphEl(matchingFromEl, curToNodeChild);\n        } else {\n          var onBeforeNodeAddedResult = onBeforeNodeAdded(curToNodeChild);\n          if (onBeforeNodeAddedResult !== false) {\n            if (onBeforeNodeAddedResult) {\n              curToNodeChild = onBeforeNodeAddedResult;\n            }\n\n            if (curToNodeChild.actualize) {\n              curToNodeChild = curToNodeChild.actualize(fromEl.ownerDocument || doc);\n            }\n            addChild(fromEl, curToNodeChild);\n            handleNodeAdded(curToNodeChild);\n          }\n        }\n\n        curToNodeChild = toNextSibling;\n        curFromNodeChild = fromNextSibling;\n      }\n\n      cleanupFromEl(fromEl, curFromNodeChild, curFromNodeKey);\n\n      var specialElHandler = specialElHandlers[fromEl.nodeName];\n      if (specialElHandler) {\n        specialElHandler(fromEl, toEl);\n      }\n    } // END: morphChildren(...)\n\n    var morphedNode = fromNode;\n    var morphedNodeType = morphedNode.nodeType;\n    var toNodeType = toNode.nodeType;\n\n    if (!childrenOnly) {\n      // Handle the case where we are given two DOM nodes that are not\n      // compatible (e.g. <div> --> <span> or <div> --> TEXT)\n      if (morphedNodeType === ELEMENT_NODE) {\n        if (toNodeType === ELEMENT_NODE) {\n          if (!compareNodeNames(fromNode, toNode)) {\n            onNodeDiscarded(fromNode);\n            morphedNode = moveChildren(fromNode, createElementNS(toNode.nodeName, toNode.namespaceURI));\n          }\n        } else {\n          // Going from an element node to a text node\n          morphedNode = toNode;\n        }\n      } else if (morphedNodeType === TEXT_NODE || morphedNodeType === COMMENT_NODE) { // Text or comment node\n        if (toNodeType === morphedNodeType) {\n          if (morphedNode.nodeValue !== toNode.nodeValue) {\n            morphedNode.nodeValue = toNode.nodeValue;\n          }\n\n          return morphedNode;\n        } else {\n          // Text node to something else\n          morphedNode = toNode;\n        }\n      }\n    }\n\n    if (morphedNode === toNode) {\n      // The \"to node\" was not compatible with the \"from node\" so we had to\n      // toss out the \"from node\" and use the \"to node\"\n      onNodeDiscarded(fromNode);\n    } else {\n      if (toNode.isSameNode && toNode.isSameNode(morphedNode)) {\n        return;\n      }\n\n      morphEl(morphedNode, toNode, childrenOnly);\n\n      // We now need to loop over any keyed nodes that might need to be\n      // removed. We only do the removal if we know that the keyed node\n      // never found a match. When a keyed node is matched up we remove\n      // it out of fromNodesLookup and we use fromNodesLookup to determine\n      // if a keyed node has been matched up or not\n      if (keyedRemovalList) {\n        for (var i=0, len=keyedRemovalList.length; i<len; i++) {\n          var elToRemove = fromNodesLookup[keyedRemovalList[i]];\n          if (elToRemove) {\n            removeNode(elToRemove, elToRemove.parentNode, false);\n          }\n        }\n      }\n    }\n\n    if (!childrenOnly && morphedNode !== fromNode && fromNode.parentNode) {\n      if (morphedNode.actualize) {\n        morphedNode = morphedNode.actualize(fromNode.ownerDocument || doc);\n      }\n      // If we had to swap out the from node with a new node because the old\n      // node was not compatible with the target node then we need to\n      // replace the old DOM node in the original DOM tree. This is only\n      // possible if the original DOM node was part of a DOM tree which\n      // we know is the case if it has a parent node.\n      fromNode.parentNode.replaceChild(morphedNode, fromNode);\n    }\n\n    return morphedNode;\n  };\n}\n\nvar morphdom = morphdomFactory(morphAttrs);\n\nexport default morphdom;\n","// Import dependencies\nimport ArizonaWorker from './arizona-worker?worker&inline';\nimport morphdom from 'morphdom';\n\n/**\n * @typedef {Object} ArizonaClientOptions\n * @property {import('./logger/arizona-logger.js').default} [logger] - Logger implementation\n */\n\n/**\n * @typedef {Object} ConnectOptions\n * @property {string} [wsPath] - WebSocket path (default: '/live')\n */\n\n/**\n * @typedef {Object} EventParams\n * @property {*} [key] - Event parameters\n */\n\n/**\n * Arizona Framework JavaScript Client\n * Provides real-time WebSocket communication with the Arizona server\n */\nexport default class ArizonaClient {\n  /**\n   * Creates a new Arizona client instance\n   * @param {ArizonaClientOptions} [opts={}] - Client configuration options\n   */\n  constructor(opts = {}) {\n    /** @type {Worker|null} */\n    this.worker = null;\n    /** @type {boolean} */\n    this.connected = false;\n    /** @type {Map<string, Set<Function>>} */\n    this.eventListeners = new Map();\n    /** @type {import('./logger/arizona-logger.js').default|null} */\n    this.logger = opts.logger || null;\n  }\n\n  /**\n   * Initialize worker if not already created\n   * @private\n   * @returns {void}\n   */\n  initializeWorker() {\n    if (this.worker) return;\n\n    // Use Vite's worker import pattern - more efficient and bundler-aware\n    this.worker = new ArizonaWorker();\n\n    this.worker.onmessage = (event) => {\n      this.handleWorkerMessage(event.data);\n    };\n  }\n\n  /**\n   * Connect to the Arizona WebSocket server\n   * @param {string} websocketEndpoint - WebSocket endpoint path\n   * @returns {void}\n   */\n  connect(websocketEndpoint) {\n    if (this.connected) return;\n\n    this.initializeWorker();\n\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    const host = window.location.host;\n    const path = window.location.pathname;\n    const qs = window.location.search;\n    const encodedPath = encodeURIComponent(path);\n    const encodeQs = qs ? encodeURIComponent(qs.substring(1)) : '';\n    const wsUrl = `${protocol}//${host}${websocketEndpoint}?path=${encodedPath}&qs=${encodeQs}`;\n\n    this.worker.postMessage({\n      type: 'connect',\n      data: { url: wsUrl },\n    });\n  }\n\n  /**\n   * Push an event to the Arizona server\n   * @param {string} event - Event name\n   * @param {EventParams} [params={}] - Event parameters\n   * @returns {void}\n   */\n  pushEvent(event, params = {}) {\n    if (!this.connected) return;\n\n    this.worker.postMessage({\n      type: 'send',\n      data: {\n        type: 'event',\n        event,\n        params,\n      },\n    });\n  }\n\n  /**\n   * Push an event to a specific stateful component\n   * @param {string} statefulId - Target stateful component ID\n   * @param {string} event - Event name\n   * @param {EventParams} [params={}] - Event parameters\n   * @returns {void}\n   */\n  pushEventTo(statefulId, event, params = {}) {\n    if (!this.connected) return;\n\n    this.worker.postMessage({\n      type: 'send',\n      data: {\n        type: 'event',\n        stateful_id: statefulId,\n        event,\n        params,\n      },\n    });\n  }\n\n  /**\n   * Disconnect from the Arizona WebSocket server\n   * @returns {void}\n   */\n  disconnect() {\n    if (this.worker) {\n      this.worker.terminate();\n      this.worker = null;\n    }\n    this.connected = false;\n  }\n\n  /**\n   * Handle messages from the worker thread\n   * @private\n   * @param {Object} message - Worker message\n   * @returns {void}\n   */\n  handleWorkerMessage(message) {\n    const { type, data } = message;\n\n    try {\n      switch (type) {\n        case 'status':\n          this.handleStatus(data);\n          break;\n        case 'initial_render':\n          break;\n        case 'html_patch':\n          this.handleHtmlPatch(data);\n          break;\n        case 'error':\n          this.handleWorkerError(data);\n          break;\n        case 'reload':\n          this.handleReload(data);\n          break;\n        case 'dispatch':\n          this.handleDispatch(data);\n          break;\n        case 'redirect':\n          this.handleRedirect(data);\n          break;\n        default:\n          this.handleUnknownMessage(message);\n      }\n    } catch (error) {\n      this.logger?.error('Error handling worker message:', error);\n    }\n  }\n\n  handleStatus(data) {\n    if (data.status === 'connected') {\n      this.connected = true;\n      this.logger?.info('Connected to WebSocket');\n      this.emit('connected', data);\n    } else if (data.status === 'disconnected') {\n      this.connected = false;\n      this.logger?.info('Disconnected from WebSocket');\n      this.emit('disconnected', data);\n    }\n  }\n\n  handleHtmlPatch(data) {\n    this.logger?.debug('Applying HTML patch');\n\n    // Apply HTML patch to DOM\n    this.applyHtmlPatch(data.patch);\n  }\n\n  applyHtmlPatch(patch) {\n    const target = document.getElementById(patch.statefulId);\n\n    if (!target) {\n      this.logger?.warning(`Target element not found: ${patch.statefulId}`);\n      return;\n    }\n\n    try {\n      // Use morphdom to efficiently patch the DOM\n      morphdom(target, patch.html, {\n        onBeforeElUpdated(fromEl, toEl) {\n          // Skip update if element has data-arizona-update=\"false\"\n          if (toEl.dataset?.arizonaUpdate === 'false') {\n            return false;\n          }\n          // Skip update if nodes are identical (optimization)\n          return !fromEl.isEqualNode(toEl);\n        },\n      });\n\n      this.logger?.debug('Patch applied successfully');\n    } catch (error) {\n      this.logger?.error('Error applying HTML patch:', error);\n    }\n  }\n\n  handleWorkerError(data) {\n    this.logger?.error('Worker Error:', data.error);\n    this.emit('error', data);\n  }\n\n  handleReload(data) {\n    switch (data.file_type) {\n      case 'css':\n        this.logger?.info('CSS file changed. Refreshing stylesheets without page reload...');\n        document.querySelectorAll('link[rel=\"stylesheet\"]').forEach((link) => {\n          const href = link.href.split('?')[0];\n          link.href = `${href}?t=${Date.now()}`;\n        });\n        break;\n      default:\n        this.logger?.info(`${data.file_type || 'File'} changed. Reloading page...`);\n        window.location.reload();\n    }\n  }\n\n  handleDispatch(data) {\n    this.logger?.debug('Dispatching event:', data.event);\n    this.emit(data.event, data.data);\n  }\n\n  handleRedirect(data) {\n    this.logger?.info('Redirecting to:', data.url);\n\n    // Perform the redirect with safe option access\n    window.open(data.url, data.options?.target, data.options?.window_features);\n  }\n\n  handleUnknownMessage(message) {\n    this.logger?.warning('Unknown worker message:', message);\n  }\n\n  /**\n   * Check if client is connected to server\n   * @returns {boolean} True if connected\n   */\n  isConnected() {\n    return this.connected;\n  }\n\n  /**\n   * Subscribe to an Arizona event\n   * @param {string} event - Event name (e.g., 'connected', 'disconnected')\n   * @param {Function} callback - Callback function to invoke when event occurs\n   * @returns {Function} Unsubscribe function\n   */\n  on(event, callback) {\n    if (typeof callback !== 'function') {\n      this.logger?.error(`on: callback must be a function, got ${typeof callback}`);\n      return () => {};\n    }\n\n    if (!this.eventListeners.has(event)) {\n      this.eventListeners.set(event, new Set());\n    }\n\n    this.eventListeners.get(event).add(callback);\n    this.logger?.debug(`Subscribed to event: ${event}`);\n\n    // Return unsubscribe function\n    return () => {\n      return this.off(event, callback);\n    };\n  }\n\n  /**\n   * Subscribe to an Arizona event that will only fire once\n   * @param {string} event - Event name\n   * @param {Function} callback - Callback function to invoke when event occurs\n   * @returns {Function} Unsubscribe function\n   */\n  once(event, callback) {\n    if (typeof callback !== 'function') {\n      this.logger?.error(`once: callback must be a function, got ${typeof callback}`);\n      return () => {};\n    }\n\n    const wrapper = (data) => {\n      callback(data);\n      this.off(event, wrapper);\n    };\n\n    return this.on(event, wrapper);\n  }\n\n  /**\n   * Unsubscribe from an Arizona event\n   * @param {string} event - Event name\n   * @param {Function} callback - Callback function to remove\n   * @returns {void}\n   */\n  off(event, callback) {\n    const listeners = this.eventListeners.get(event);\n    if (listeners) {\n      listeners.delete(callback);\n      this.logger?.debug(`Unsubscribed from event: ${event}`);\n\n      // Clean up empty listener sets\n      if (listeners.size === 0) {\n        this.eventListeners.delete(event);\n      }\n    }\n  }\n\n  /**\n   * Remove all listeners for a specific event, or all events if no event specified\n   * @param {string} [event] - Optional event name. If not provided, removes all listeners for all events\n   * @returns {void}\n   */\n  removeAllListeners(event) {\n    if (event) {\n      this.eventListeners.delete(event);\n      this.logger?.debug(`Removed all listeners for event: ${event}`);\n    } else {\n      this.eventListeners.clear();\n      this.logger?.debug('Removed all event listeners');\n    }\n  }\n\n  /**\n   * Emit an Arizona event to all subscribed listeners\n   * @private\n   * @param {string} event - Event name\n   * @param {*} data - Event data to pass to listeners\n   * @returns {void}\n   */\n  emit(event, data) {\n    const listeners = this.eventListeners.get(event);\n    if (listeners) {\n      listeners.forEach((callback) => {\n        try {\n          callback(data);\n        } catch (error) {\n          this.logger?.error(`Error in event listener for '${event}':`, error);\n        }\n      });\n    }\n  }\n}\n"],"names":["DOCUMENT_FRAGMENT_NODE","morphAttrs","fromNode","toNode","toNodeAttrs","attr","attrName","attrNamespaceURI","attrValue","fromValue","i","fromNodeAttrs","d","range","NS_XHTML","doc","HAS_TEMPLATE_SUPPORT","HAS_RANGE_SUPPORT","createFragmentFromTemplate","str","template","createFragmentFromRange","fragment","createFragmentFromWrap","toElement","compareNodeNames","fromEl","toEl","fromNodeName","toNodeName","fromCodeStart","toCodeStart","createElementNS","name","namespaceURI","moveChildren","curChild","nextChild","syncBooleanAttrProp","specialElHandlers","parentNode","parentName","newValue","firstChild","oldValue","selectedIndex","optgroup","nodeName","ELEMENT_NODE","DOCUMENT_FRAGMENT_NODE$1","TEXT_NODE","COMMENT_NODE","noop","defaultGetNodeKey","node","morphdomFactory","options","toNodeHtml","getNodeKey","onBeforeNodeAdded","onNodeAdded","onBeforeElUpdated","onElUpdated","onBeforeNodeDiscarded","onNodeDiscarded","onBeforeElChildrenUpdated","skipFromChildren","addChild","parent","child","childrenOnly","fromNodesLookup","keyedRemovalList","addKeyedRemoval","key","walkDiscardedChildNodes","skipKeyedNodes","removeNode","indexTree","handleNodeAdded","el","nextSibling","unmatchedFromEl","morphEl","cleanupFromEl","curFromNodeChild","curFromNodeKey","fromNextSibling","toElKey","beforeUpdateResult","morphChildren","skipFrom","curToNodeChild","curToNodeKey","toNextSibling","matchingFromEl","outer","curFromNodeType","isCompatible","onBeforeNodeAddedResult","specialElHandler","morphedNode","morphedNodeType","toNodeType","len","elToRemove","morphdom","ArizonaClient","opts","ArizonaWorker","event","websocketEndpoint","protocol","host","path","qs","encodedPath","encodeQs","wsUrl","params","statefulId","message","type","data","error","patch","target","link","href","callback","wrapper","listeners"],"mappings":"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","x_google_ignoreList":[0]}