{"version":3,"file":"arizona.min.js","sources":["../../../../assets/js/arizona.js"],"sourcesContent":["// Import dependencies\nimport ArizonaWorker from './arizona-worker?worker&inline';\n\n/**\n * @typedef {Object} ArizonaClientOptions\n * @property {import('./patcher/arizona-patcher.js').default} [patcher] - DOM patcher implementation\n * @property {import('./logger/arizona-logger.js').default} [logger] - Logger implementation\n */\n\n/**\n * @typedef {Object} ConnectOptions\n * @property {string} [wsPath] - WebSocket path (default: '/live')\n */\n\n/**\n * @typedef {Object} EventParams\n * @property {*} [key] - Event parameters\n */\n\n/**\n * Arizona Framework JavaScript Client\n * Provides real-time WebSocket communication with the Arizona server\n */\nexport default class ArizonaClient {\n  /**\n   * Creates a new Arizona client instance\n   * @param {ArizonaClientOptions} [opts={}] - Client configuration options\n   */\n  constructor(opts = {}) {\n    /** @type {Worker|null} */\n    this.worker = null;\n    /** @type {boolean} */\n    this.connected = false;\n    /** @type {Map<string, Set<Function>>} */\n    this.eventListeners = new Map();\n    /** @type {import('./patcher/arizona-patcher.js').default|null} */\n    this.patcher = opts.patcher || null;\n    /** @type {import('./logger/arizona-logger.js').default|null} */\n    this.logger = opts.logger || null;\n  }\n\n  /**\n   * Initialize worker if not already created\n   * @private\n   * @returns {void}\n   */\n  initializeWorker() {\n    if (this.worker) return;\n\n    // Use Vite's worker import pattern - more efficient and bundler-aware\n    this.worker = new ArizonaWorker();\n\n    this.worker.onmessage = (event) => {\n      this.handleWorkerMessage(event.data);\n    };\n  }\n\n  /**\n   * Connect to the Arizona WebSocket server\n   * @param {string} websocketEndpoint - WebSocket endpoint path\n   * @returns {void}\n   */\n  connect(websocketEndpoint) {\n    if (this.connected) return;\n\n    this.initializeWorker();\n\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    const host = window.location.host;\n    const path = window.location.pathname;\n    const qs = window.location.search;\n    const encodedPath = encodeURIComponent(path);\n    const encodeQs = qs ? encodeURIComponent(qs.substring(1)) : '';\n    const wsUrl = `${protocol}//${host}${websocketEndpoint}?path=${encodedPath}&qs=${encodeQs}`;\n\n    this.worker.postMessage({\n      type: 'connect',\n      data: { url: wsUrl },\n    });\n  }\n\n  /**\n   * Push an event to the Arizona server\n   * @param {string} event - Event name\n   * @param {EventParams} [params={}] - Event parameters\n   * @returns {void}\n   */\n  pushEvent(event, params = {}) {\n    if (!this.connected) return;\n\n    this.worker.postMessage({\n      type: 'send',\n      data: {\n        type: 'event',\n        event,\n        params,\n      },\n    });\n  }\n\n  /**\n   * Push an event to a specific stateful component\n   * @param {string} statefulId - Target stateful component ID\n   * @param {string} event - Event name\n   * @param {EventParams} [params={}] - Event parameters\n   * @returns {void}\n   */\n  pushEventTo(statefulId, event, params = {}) {\n    if (!this.connected) return;\n\n    this.worker.postMessage({\n      type: 'send',\n      data: {\n        type: 'event',\n        stateful_id: statefulId,\n        event,\n        params,\n      },\n    });\n  }\n\n  /**\n   * Disconnect from the Arizona WebSocket server\n   * @returns {void}\n   */\n  disconnect() {\n    if (this.worker) {\n      this.worker.terminate();\n      this.worker = null;\n    }\n    this.connected = false;\n  }\n\n  /**\n   * Handle messages from the worker thread\n   * @private\n   * @param {Object} message - Worker message\n   * @returns {void}\n   */\n  handleWorkerMessage(message) {\n    const { type, data } = message;\n\n    try {\n      switch (type) {\n        case 'status':\n          this.handleStatus(data);\n          break;\n        case 'initial_render':\n          break;\n        case 'html_patch':\n          this.handleHtmlPatch(data);\n          break;\n        case 'error':\n          this.handleWorkerError(data);\n          break;\n        case 'reload':\n          this.handleReload(data);\n          break;\n        case 'dispatch':\n          this.handleDispatch(data);\n          break;\n        case 'redirect':\n          this.handleRedirect(data);\n          break;\n        default:\n          this.handleUnknownMessage(message);\n      }\n    } catch (error) {\n      this.logger?.error('Error handling worker message:', error);\n    }\n  }\n\n  handleStatus(data) {\n    if (data.status === 'connected') {\n      this.connected = true;\n      this.logger?.info('Connected to WebSocket');\n      this.emit('connected', data);\n    } else if (data.status === 'disconnected') {\n      this.connected = false;\n      this.logger?.info('Disconnected from WebSocket');\n      this.emit('disconnected', data);\n    }\n  }\n\n  handleHtmlPatch(data) {\n    this.logger?.debug('Applying HTML patch');\n\n    // Apply HTML patch to DOM\n    this.applyHtmlPatch(data.patch);\n  }\n\n  applyHtmlPatch(patch) {\n    const target = document.getElementById(patch.statefulId);\n\n    if (!target) {\n      this.logger?.warning(`Target element not found: ${patch.statefulId}`);\n      return;\n    }\n\n    if (!this.patcher) {\n      this.logger?.error('No patcher configured. Please provide a patcher implementation.');\n      return;\n    }\n\n    try {\n      // Use provided patcher to patch the DOM\n      this.patcher.patch(target, patch.html);\n\n      this.logger?.debug('Patch applied successfully');\n    } catch (error) {\n      this.logger?.error('Error applying HTML patch:', error);\n    }\n  }\n\n  handleWorkerError(data) {\n    this.logger?.error('Worker Error:', data.error);\n    this.emit('error', data);\n  }\n\n  handleReload(data) {\n    switch (data.file_type) {\n      case 'css':\n        this.logger?.info('CSS file changed. Refreshing stylesheets without page reload...');\n        document.querySelectorAll('link[rel=\"stylesheet\"]').forEach((link) => {\n          const href = link.href.split('?')[0];\n          link.href = `${href}?t=${Date.now()}`;\n        });\n        break;\n      default:\n        this.logger?.info(`${data.file_type || 'File'} changed. Reloading page...`);\n        window.location.reload();\n    }\n  }\n\n  handleDispatch(data) {\n    this.logger?.debug('Dispatching event:', data.event);\n    this.emit(data.event, data.data);\n  }\n\n  handleRedirect(data) {\n    this.logger?.info('Redirecting to:', data.url);\n\n    // Perform the redirect with safe option access\n    window.open(data.url, data.options?.target, data.options?.window_features);\n  }\n\n  handleUnknownMessage(message) {\n    this.logger?.warning('Unknown worker message:', message);\n  }\n\n  /**\n   * Check if client is connected to server\n   * @returns {boolean} True if connected\n   */\n  isConnected() {\n    return this.connected;\n  }\n\n  /**\n   * Subscribe to an Arizona event\n   * @param {string} event - Event name (e.g., 'connected', 'disconnected')\n   * @param {Function} callback - Callback function to invoke when event occurs\n   * @returns {Function} Unsubscribe function\n   */\n  on(event, callback) {\n    if (typeof callback !== 'function') {\n      this.logger?.error(`on: callback must be a function, got ${typeof callback}`);\n      return () => {};\n    }\n\n    if (!this.eventListeners.has(event)) {\n      this.eventListeners.set(event, new Set());\n    }\n\n    this.eventListeners.get(event).add(callback);\n    this.logger?.debug(`Subscribed to event: ${event}`);\n\n    // Return unsubscribe function\n    return () => {\n      return this.off(event, callback);\n    };\n  }\n\n  /**\n   * Subscribe to an Arizona event that will only fire once\n   * @param {string} event - Event name\n   * @param {Function} callback - Callback function to invoke when event occurs\n   * @returns {Function} Unsubscribe function\n   */\n  once(event, callback) {\n    if (typeof callback !== 'function') {\n      this.logger?.error(`once: callback must be a function, got ${typeof callback}`);\n      return () => {};\n    }\n\n    const wrapper = (data) => {\n      callback(data);\n      this.off(event, wrapper);\n    };\n\n    return this.on(event, wrapper);\n  }\n\n  /**\n   * Unsubscribe from an Arizona event\n   * @param {string} event - Event name\n   * @param {Function} callback - Callback function to remove\n   * @returns {void}\n   */\n  off(event, callback) {\n    const listeners = this.eventListeners.get(event);\n    if (listeners) {\n      listeners.delete(callback);\n      this.logger?.debug(`Unsubscribed from event: ${event}`);\n\n      // Clean up empty listener sets\n      if (listeners.size === 0) {\n        this.eventListeners.delete(event);\n      }\n    }\n  }\n\n  /**\n   * Remove all listeners for a specific event, or all events if no event specified\n   * @param {string} [event] - Optional event name. If not provided, removes all listeners for all events\n   * @returns {void}\n   */\n  removeAllListeners(event) {\n    if (event) {\n      this.eventListeners.delete(event);\n      this.logger?.debug(`Removed all listeners for event: ${event}`);\n    } else {\n      this.eventListeners.clear();\n      this.logger?.debug('Removed all event listeners');\n    }\n  }\n\n  /**\n   * Emit an Arizona event to all subscribed listeners\n   * @private\n   * @param {string} event - Event name\n   * @param {*} data - Event data to pass to listeners\n   * @returns {void}\n   */\n  emit(event, data) {\n    const listeners = this.eventListeners.get(event);\n    if (listeners) {\n      listeners.forEach((callback) => {\n        try {\n          callback(data);\n        } catch (error) {\n          this.logger?.error(`Error in event listener for '${event}':`, error);\n        }\n      });\n    }\n  }\n}\n"],"names":["ArizonaClient","opts","ArizonaWorker","event","websocketEndpoint","protocol","host","path","qs","encodedPath","encodeQs","wsUrl","params","statefulId","message","type","data","error","patch","target","link","href","callback","wrapper","listeners"],"mappings":"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"}