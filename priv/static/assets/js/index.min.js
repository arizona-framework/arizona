import { default as c } from "./arizona.min.js";
import { default as y, LOG_LEVELS as h } from "./logger/arizona-logger.min.js";
import { default as l } from "./logger/arizona-console-logger.min.js";
/*! Arizona Framework Client v0.2.0 | Apache-2.0 License */
class u {
  constructor() {
    this.structure = /* @__PURE__ */ new Map();
  }
  /**
   * Initialize with hierarchical structure from server
   * @param {Object} structure - Hierarchical structure from arizona_hierarchical
   */
  initialize(t) {
    this.structure = new Map(Object.entries(JSON.parse(JSON.stringify(t))));
  }
  /**
   * Apply diff changes from arizona_differ to hierarchical structure
   * @param {string} statefulId - Stateful ID to render
   * @param {Array|Object} changes - Changes in format: [[ElementIndex, Changes]] or hierarchical structure
   */
  applyDiff(t, r) {
    if (r?.type === "stateful") {
      this.structure.set(r.id, r);
      return;
    }
    if (!this.structure.has(t)) {
      const s = String(t).replace(/\r|\n/g, "");
      console.warn(`[Arizona] StatefulId '${s}' not found in structure`);
    }
    const i = this.structure.get(t);
    for (const [s, e] of r)
      this.applyDiffValue(i.dynamic, s - 1, e);
  }
  /**
   * Recursively apply a diff value to a container at a specific index
   * Handles all types: hierarchical structures, lists, stateless components, and simple values
   * @private
   * @param {Array} container - The dynamic array to update
   * @param {number} targetIndex - The index to update (0-based)
   * @param {*} newValue - The new value to apply
   * @returns {void}
   */
  applyDiffValue(t, r, i) {
    const s = t[r];
    if (i && typeof i == "object" && i.type) {
      t[r] = i;
      return;
    }
    if (!(s && typeof s == "object" && s.type === "stateful")) {
      if (Array.isArray(i)) {
        if (s && s.type === "list") {
          s.dynamic = i;
          return;
        }
        if (s && s.type === "stateless") {
          i.forEach(([e, a]) => {
            this.applyDiffValue(s.dynamic, e - 1, a);
          });
          return;
        }
        t[r] = i;
        return;
      }
      t[r] = i;
    }
  }
  /**
   * Generate HTML for stateful components
   * @param {Object} element - Stateful element with id
   * @returns {string} Generated HTML
   */
  generateStatefulHTML(t) {
    const r = this.structure.get(t);
    if (!r) {
      const i = String(t).replace(/\r|\n/g, "");
      console.warn(`[Arizona] StatefulId '${i}' not found in structure`);
    }
    return this.zipStaticDynamic(r.static, r.dynamic);
  }
  /**
   * Generate HTML for stateless components
   * @param {Object} element - Stateless element with static and dynamic arrays
   * @returns {string} Generated HTML
   */
  generateStatelessHTML(t) {
    return this.zipStaticDynamic(t.static, t.dynamic);
  }
  /**
   * Generate HTML for list components
   * @param {Object} listElement - List element with static template and dynamic data
   * @returns {string} Generated HTML
   */
  generateListHTML(t) {
    const { static: r, dynamic: i } = t;
    return i.reduce((s, e) => s + this.zipStaticDynamic(r, e), "");
  }
  /**
   * Zip static and dynamic arrays into HTML (matches arizona_renderer:zip_static_dynamic/2)
   * @param {Array} staticParts - Static HTML parts
   * @param {Array} dynamicParts - Dynamic content parts
   * @returns {string} Generated HTML
   */
  zipStaticDynamic(t, r) {
    const i = [], s = Math.max(t.length, r.length);
    for (let e = 0; e < s; e++)
      e < t.length && i.push(t[e]), e < r.length && i.push(this.normalizeDynamicElement(r[e]));
    return i.join("");
  }
  /**
   * Normalize a dynamic element to string (handles stateful, stateless, lists, etc.)
   * @param {*} element - Dynamic element to normalize
   * @returns {string} Normalized string content
   */
  normalizeDynamicElement(t) {
    return typeof t == "string" ? t : t && t.type === "stateful" ? this.generateStatefulHTML(t.id) : t && t.type === "stateless" ? this.generateStatelessHTML(t) : t && t.type === "list" ? this.generateListHTML(t) : Array.isArray(t) ? this.flattenIoData(t) : String(t);
  }
  /**
   * Flatten nested arrays (iodata from Erlang server) into a single string
   * This handles the complex nested array structures that come from render_list
   * and other server-side rendering operations that produce iodata.
   *
   * @param {Array|string|number} element - Element to flatten
   * @returns {string} Flattened string without commas between array elements
   */
  flattenIoData(t) {
    return typeof t == "string" ? t : typeof t == "number" ? String(t) : Array.isArray(t) ? t.map((r) => this.flattenIoData(r)).join("") : t && typeof t == "object" ? t.type === "stateful" ? this.generateStatefulHTML(t.id) : t.type === "stateless" ? this.generateStatelessHTML(t) : t.type === "list" ? this.generateListHTML(t) : String(t) : String(t || "");
  }
  /**
   * Get current structure (for debugging/testing)
   * @returns {Object} Deep copy of current structure
   */
  getStructure() {
    return JSON.parse(JSON.stringify(Object.fromEntries(this.structure)));
  }
  /**
   * Check if structure has been initialized
   * @returns {boolean} True if structure contains any components
   */
  isInitialized() {
    return this.structure.size > 0;
  }
  /**
   * Get all component IDs
   * @returns {string[]} Array of all component IDs
   */
  getComponentIds() {
    return Array.from(this.structure.keys());
  }
  /**
   * Clear all structure data
   */
  clear() {
    this.structure = /* @__PURE__ */ new Map();
  }
  /**
   * Create a patch object that can be sent to arizona.js for DOM updating
   * This is used by the worker to send structured data to the main thread
   * @param {string} statefulId - Stateful ID to render
   * @returns {Object} Patch object with statefulId and HTML
   */
  createPatch(t) {
    return {
      type: "html_patch",
      statefulId: t,
      html: this.generateStatefulHTML(t)
    };
  }
}
export {
  c as Arizona,
  l as ArizonaConsoleLogger,
  u as ArizonaHierarchical,
  y as ArizonaLogger,
  h as LOG_LEVELS
};
//# sourceMappingURL=index.min.js.map
