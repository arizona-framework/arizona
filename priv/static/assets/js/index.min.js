import { default as l } from "./arizona.min.js";
import { default as g, LOG_LEVELS as y } from "./logger/arizona-logger.min.js";
import { default as d } from "./logger/arizona-console-logger.min.js";
/*! Arizona Framework Client v0.2.0 | Apache-2.0 License */
class c {
  constructor() {
    this.structure = /* @__PURE__ */ new Map();
  }
  /**
   * Initialize with hierarchical structure from server
   * @param {Object} structure - Hierarchical structure from arizona_hierarchical
   */
  initialize(t) {
    this.structure = new Map(Object.entries(JSON.parse(JSON.stringify(t))));
  }
  /**
   * Merge new structures from fingerprint mismatches into existing Map
   * @param {Object} newStructures - New structures from arizona_hierarchical_dict
   */
  mergeStructures(t) {
    for (const [r, i] of Object.entries(t))
      console.log("[Arizona] Merging new structure into map:", r), this.structure.set(r, i);
  }
  /**
   * Apply diff changes from arizona_differ to hierarchical structure
   * @param {string} statefulId - Stateful ID to render
   * @param {Array|Object} changes - Changes in format: [[ElementIndex, Changes]] or hierarchical structure
   */
  applyDiff(t, r) {
    if (r?.type === "stateful") {
      this.structure.set(r.id, r);
      return;
    }
    if (!this.structure.has(t)) {
      const e = String(t).replace(/\r|\n/g, "");
      console.warn(`[Arizona] StatefulId '${e}' not found in structure`);
    }
    const i = this.structure.get(t);
    console.log("[Arizona] Applying diff to", t), console.log("[Arizona] Changes:", r), console.log(
      "[Arizona] Component dynamic before:",
      JSON.parse(JSON.stringify(i.dynamic))
    );
    for (const [e, n] of r)
      console.log("[Arizona] Applying change - index:", e, "value:", n), this.applyDiffValue(i.dynamic, e - 1, n);
    console.log(
      "[Arizona] Component dynamic after:",
      JSON.parse(JSON.stringify(i.dynamic))
    );
  }
  /**
   * Recursively apply a diff value to a container at a specific index
   * Handles all types: hierarchical structures, lists, stateless components, and simple values
   * @private
   * @param {Array} container - The dynamic array to update
   * @param {number} targetIndex - The index to update (0-based)
   * @param {*} newValue - The new value to apply
   * @returns {void}
   */
  applyDiffValue(t, r, i) {
    const e = t[r];
    if (e?.type === "stateful") {
      if (i?.type === "stateful") {
        console.log("[Arizona] Updating component reference:", i.id), t[r] = i;
        return;
      }
      if (Array.isArray(i)) {
        const n = this.structure.get(e.id);
        if (!n) {
          const o = String(e.id).replace(/\r|\n/g, "");
          console.warn(`[Arizona] Component '${o}' not found in structure`);
          return;
        }
        console.log("[Arizona] Applying nested diff to:", e.id), i.forEach(([o, s]) => {
          this.applyDiffValue(n.dynamic, o - 1, s);
        });
        return;
      }
      console.log("[Arizona] Removing component reference:", e.id), t[r] = i;
      return;
    }
    if (i?.type) {
      t[r] = i;
      return;
    }
    if (Array.isArray(i)) {
      if (e?.type === "list") {
        e.dynamic = i;
        return;
      }
      if (e?.type === "stateless") {
        i.forEach(([n, o]) => {
          this.applyDiffValue(e.dynamic, n - 1, o);
        });
        return;
      }
      t[r] = i;
      return;
    }
    t[r] = i;
  }
  /**
   * Generate HTML for stateful components
   * @param {Object} element - Stateful element with id
   * @returns {string} Generated HTML
   */
  generateStatefulHTML(t) {
    console.log("[Arizona] generateStatefulHTML for", t);
    const r = this.structure.get(t);
    if (!r) {
      const e = String(t).replace(/\r|\n/g, "");
      throw console.warn(`[Arizona] StatefulId '${e}' not found in structure`), new Error(`Component ${e} not found`);
    }
    console.log("[Arizona] Structure found, generating HTML...");
    const i = this.zipStaticDynamic(r.static, r.dynamic);
    return console.log("[Arizona] HTML generated for", t, "length:", i.length), i;
  }
  /**
   * Generate HTML for stateless components
   * @param {Object} element - Stateless element with static and dynamic arrays
   * @returns {string} Generated HTML
   */
  generateStatelessHTML(t) {
    return this.zipStaticDynamic(t.static, t.dynamic);
  }
  /**
   * Generate HTML for list components
   * @param {Object} listElement - List element with static template and dynamic data
   * @returns {string} Generated HTML
   */
  generateListHTML(t) {
    const { static: r, dynamic: i } = t;
    return i.reduce((e, n) => e + this.zipStaticDynamic(r, n), "");
  }
  /**
   * Zip static and dynamic arrays into HTML (matches arizona_renderer:zip_static_dynamic/2)
   * @param {Array} staticParts - Static HTML parts
   * @param {Array} dynamicParts - Dynamic content parts
   * @returns {string} Generated HTML
   */
  zipStaticDynamic(t, r) {
    const i = [], e = Math.max(t.length, r.length);
    for (let n = 0; n < e; n++)
      n < t.length && i.push(t[n]), n < r.length && i.push(this.normalizeDynamicElement(r[n]));
    return i.join("");
  }
  /**
   * Normalize a dynamic element to string (handles stateful, stateless, lists, etc.)
   * @param {*} element - Dynamic element to normalize
   * @returns {string} Normalized string content
   */
  normalizeDynamicElement(t) {
    return typeof t == "string" ? t : t && t.type === "stateful" ? this.generateStatefulHTML(t.id) : t && t.type === "stateless" ? this.generateStatelessHTML(t) : t && t.type === "list" ? this.generateListHTML(t) : Array.isArray(t) ? this.flattenIoData(t) : String(t);
  }
  /**
   * Flatten nested arrays (iodata from Erlang server) into a single string
   * This handles the complex nested array structures that come from render_list
   * and other server-side rendering operations that produce iodata.
   *
   * @param {Array|string|number} element - Element to flatten
   * @returns {string} Flattened string without commas between array elements
   */
  flattenIoData(t) {
    return typeof t == "string" ? t : typeof t == "number" ? String(t) : Array.isArray(t) ? t.map((r) => this.flattenIoData(r)).join("") : t && typeof t == "object" ? t.type === "stateful" ? this.generateStatefulHTML(t.id) : t.type === "stateless" ? this.generateStatelessHTML(t) : t.type === "list" ? this.generateListHTML(t) : String(t) : String(t || "");
  }
  /**
   * Get current structure (for debugging/testing)
   * @returns {Object} Deep copy of current structure
   */
  getStructure() {
    return JSON.parse(JSON.stringify(Object.fromEntries(this.structure)));
  }
  /**
   * Check if structure has been initialized
   * @returns {boolean} True if structure contains any components
   */
  isInitialized() {
    return this.structure.size > 0;
  }
  /**
   * Get all component IDs
   * @returns {string[]} Array of all component IDs
   */
  getComponentIds() {
    return Array.from(this.structure.keys());
  }
  /**
   * Clear all structure data
   */
  clear() {
    this.structure = /* @__PURE__ */ new Map();
  }
  /**
   * Create a patch object that can be sent to arizona.js for DOM updating
   * This is used by the worker to send structured data to the main thread
   * @param {string} statefulId - Stateful ID to render
   * @returns {Object} Patch object with statefulId and HTML
   */
  createPatch(t) {
    console.log("[Arizona] createPatch called for", t);
    const r = this.generateStatefulHTML(t);
    return console.log("[Arizona] HTML generated, length:", r.length), {
      type: "html_patch",
      statefulId: t,
      html: r
    };
  }
}
export {
  l as Arizona,
  d as ArizonaConsoleLogger,
  c as ArizonaHierarchical,
  g as ArizonaLogger,
  y as LOG_LEVELS
};
//# sourceMappingURL=index.min.js.map
