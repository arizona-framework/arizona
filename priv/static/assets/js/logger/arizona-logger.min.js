/*! Arizona Framework Client v0.2.0 | Apache-2.0 License */
const s = {
  error: 3,
  warning: 4,
  info: 6,
  debug: 7
};
class a {
  /**
   * @param {Object} [options] - Logger options
   * @param {number} [options.logLevel] - Minimum log level to display (default: LOG_LEVELS.info)
   */
  constructor(e = {}) {
    this.options = e, this.options.logLevel = this.options.logLevel ?? s.info;
  }
  /**
   * Sanitizes a value for safe logging by removing control characters from strings
   * @private
   * @param {*} value - The value to sanitize
   * @returns {*} - The sanitized value (strings sanitized, other types passed through)
   */
  sanitize(e) {
    return typeof e != "string" ? e : e.replace(/[\r\n\u2028\u2029\t\v\f\b\0\x1B]/g, "").replace(/[\x00-\x1f\x7f]/g, "").trim();
  }
  /**
   * Handle a log message (must be implemented by subclass)
   * @param {number} level - Log level (from LOG_LEVELS enum)
   * @param {string} message - Log message
   * @param {...*} args - Additional arguments
   * @returns {void}
   */
  // eslint-disable-next-line no-unused-vars
  handleLog(e, i, ...t) {
    throw new Error("handleLog() must be implemented by subclass");
  }
  /**
   * Log a message with level filtering and sanitization
   * @param {number} level - Log level (from LOG_LEVELS enum)
   * @param {string} message - Log message
   * @param {...*} args - Additional arguments
   * @returns {void}
   */
  log(e, i, ...t) {
    if (e > this.options.logLevel)
      return;
    const o = this.sanitize(i), r = t.map((n) => this.sanitize(n));
    this.handleLog(e, o, ...r);
  }
  /**
   * Log error message
   * @param {string} message - Error message
   * @param {...*} args - Additional arguments
   * @returns {void}
   */
  error(e, ...i) {
    this.log(s.error, e, ...i);
  }
  /**
   * Log warning message
   * @param {string} message - Warning message
   * @param {...*} args - Additional arguments
   * @returns {void}
   */
  warning(e, ...i) {
    this.log(s.warning, e, ...i);
  }
  /**
   * Log info message
   * @param {string} message - Info message
   * @param {...*} args - Additional arguments
   * @returns {void}
   */
  info(e, ...i) {
    this.log(s.info, e, ...i);
  }
  /**
   * Log debug message
   * @param {string} message - Debug message
   * @param {...*} args - Additional arguments
   * @returns {void}
   */
  debug(e, ...i) {
    this.log(s.debug, e, ...i);
  }
}
export {
  s as LOG_LEVELS,
  a as default
};
//# sourceMappingURL=arizona-logger.min.js.map
