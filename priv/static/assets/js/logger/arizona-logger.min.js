/*! Arizona Framework Client v0.2.0 | Apache-2.0 License */
const s = {
  error: 3,
  warning: 4,
  info: 6,
  debug: 7
};
class n {
  /**
   * @param {Object} [options] - Logger options
   * @param {number} [options.logLevel] - Minimum log level to display (default: LOG_LEVELS.info)
   */
  constructor(o = {}) {
    this.options = o, this.options.logLevel = this.options.logLevel ?? s.info;
  }
  /**
   * Handle a log message (must be implemented by subclass)
   * @param {number} level - Log level (from LOG_LEVELS enum)
   * @param {string} message - Log message
   * @param {...*} args - Additional arguments
   * @returns {void}
   */
  // eslint-disable-next-line no-unused-vars
  handleLog(o, e, ...r) {
    throw new Error("handleLog() must be implemented by subclass");
  }
  /**
   * Log a message with level filtering
   * @param {number} level - Log level (from LOG_LEVELS enum)
   * @param {string} message - Log message
   * @param {...*} args - Additional arguments
   * @returns {void}
   */
  log(o, e, ...r) {
    o > this.options.logLevel || this.handleLog(o, e, ...r);
  }
  /**
   * Log error message
   * @param {string} message - Error message
   * @param {...*} args - Additional arguments
   * @returns {void}
   */
  error(o, ...e) {
    this.log(s.error, o, ...e);
  }
  /**
   * Log warning message
   * @param {string} message - Warning message
   * @param {...*} args - Additional arguments
   * @returns {void}
   */
  warning(o, ...e) {
    this.log(s.warning, o, ...e);
  }
  /**
   * Log info message
   * @param {string} message - Info message
   * @param {...*} args - Additional arguments
   * @returns {void}
   */
  info(o, ...e) {
    this.log(s.info, o, ...e);
  }
  /**
   * Log debug message
   * @param {string} message - Debug message
   * @param {...*} args - Additional arguments
   * @returns {void}
   */
  debug(o, ...e) {
    this.log(s.debug, o, ...e);
  }
}
export {
  s as LOG_LEVELS,
  n as default
};
//# sourceMappingURL=arizona-logger.min.js.map
