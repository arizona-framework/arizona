{"version":3,"file":"arizona-logger.min.js","sources":["../../../../../assets/js/logger/arizona-logger.js"],"sourcesContent":["// Log levels (aligned with Erlang logger levels)\nexport const LOG_LEVELS = {\n  error: 3,\n  warning: 4,\n  info: 6,\n  debug: 7,\n};\n\n/**\n * Base class for Arizona logging strategies\n *\n * Implementations must provide a `handleLog` method that handles\n * writing log messages to the output target.\n */\nclass ArizonaLogger {\n  /**\n   * @param {Object} [options] - Logger options\n   * @param {number} [options.logLevel] - Minimum log level to display (default: LOG_LEVELS.info)\n   */\n  constructor(options = {}) {\n    this.options = options;\n    this.options.logLevel = this.options.logLevel ?? LOG_LEVELS.info;\n  }\n\n  /**\n   * Sanitizes a value for safe logging by removing control characters from strings\n   * @private\n   * @param {*} value - The value to sanitize\n   * @returns {*} - The sanitized value (strings sanitized, other types passed through)\n   */\n  sanitize(value) {\n    // Only sanitize strings - preserve objects/errors/numbers for proper formatting\n    if (typeof value !== 'string') return value;\n\n    // Remove control characters from strings to prevent log injection\n    return (\n      value\n        // eslint-disable-next-line no-control-regex\n        .replace(/[\\r\\n\\u2028\\u2029\\t\\v\\f\\b\\0\\x1B]/g, '')\n        // eslint-disable-next-line no-control-regex\n        .replace(/[\\x00-\\x1f\\x7f]/g, '') // further strip ASCII control chars\n        .trim()\n    );\n  }\n\n  /**\n   * Handle a log message (must be implemented by subclass)\n   * @param {number} level - Log level (from LOG_LEVELS enum)\n   * @param {string} message - Log message\n   * @param {...*} args - Additional arguments\n   * @returns {void}\n   */\n  // eslint-disable-next-line no-unused-vars\n  handleLog(level, message, ...args) {\n    throw new Error('handleLog() must be implemented by subclass');\n  }\n\n  /**\n   * Log a message with level filtering and sanitization\n   * @param {number} level - Log level (from LOG_LEVELS enum)\n   * @param {string} message - Log message\n   * @param {...*} args - Additional arguments\n   * @returns {void}\n   */\n  log(level, message, ...args) {\n    // Filter by log level\n    if (level > this.options.logLevel) {\n      return;\n    }\n\n    // Sanitize message and args to prevent log injection attacks\n    const sanitizedMessage = this.sanitize(message);\n    const sanitizedArgs = args.map((arg) => {\n      return this.sanitize(arg);\n    });\n\n    this.handleLog(level, sanitizedMessage, ...sanitizedArgs);\n  }\n\n  /**\n   * Log error message\n   * @param {string} message - Error message\n   * @param {...*} args - Additional arguments\n   * @returns {void}\n   */\n  error(message, ...args) {\n    this.log(LOG_LEVELS.error, message, ...args);\n  }\n\n  /**\n   * Log warning message\n   * @param {string} message - Warning message\n   * @param {...*} args - Additional arguments\n   * @returns {void}\n   */\n  warning(message, ...args) {\n    this.log(LOG_LEVELS.warning, message, ...args);\n  }\n\n  /**\n   * Log info message\n   * @param {string} message - Info message\n   * @param {...*} args - Additional arguments\n   * @returns {void}\n   */\n  info(message, ...args) {\n    this.log(LOG_LEVELS.info, message, ...args);\n  }\n\n  /**\n   * Log debug message\n   * @param {string} message - Debug message\n   * @param {...*} args - Additional arguments\n   * @returns {void}\n   */\n  debug(message, ...args) {\n    this.log(LOG_LEVELS.debug, message, ...args);\n  }\n}\n\nexport default ArizonaLogger;\n"],"names":["LOG_LEVELS","ArizonaLogger","options","value","level","message","args","sanitizedMessage","sanitizedArgs","arg"],"mappings":";AACY,MAACA,IAAa;AAAA,EACxB,OAAO;AAAA,EACP,SAAS;AAAA,EACT,MAAM;AAAA,EACN,OAAO;AACT;AAQA,MAAMC,EAAc;AAAA;AAAA;AAAA;AAAA;AAAA,EAKlB,YAAYC,IAAU,IAAI;AACxB,SAAK,UAAUA,GACf,KAAK,QAAQ,WAAW,KAAK,QAAQ,YAAYF,EAAW;AAAA,EAC9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,SAASG,GAAO;AAEd,WAAI,OAAOA,KAAU,WAAiBA,IAIpCA,EAEG,QAAQ,qCAAqC,EAAE,EAE/C,QAAQ,oBAAoB,EAAE,EAC9B,KAAI;AAAA,EAEX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,UAAUC,GAAOC,MAAYC,GAAM;AACjC,UAAM,IAAI,MAAM,6CAA6C;AAAA,EAC/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,IAAIF,GAAOC,MAAYC,GAAM;AAE3B,QAAIF,IAAQ,KAAK,QAAQ;AACvB;AAIF,UAAMG,IAAmB,KAAK,SAASF,CAAO,GACxCG,IAAgBF,EAAK,IAAI,CAACG,MACvB,KAAK,SAASA,CAAG,CACzB;AAED,SAAK,UAAUL,GAAOG,GAAkB,GAAGC,CAAa;AAAA,EAC1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAMH,MAAYC,GAAM;AACtB,SAAK,IAAIN,EAAW,OAAOK,GAAS,GAAGC,CAAI;AAAA,EAC7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,QAAQD,MAAYC,GAAM;AACxB,SAAK,IAAIN,EAAW,SAASK,GAAS,GAAGC,CAAI;AAAA,EAC/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,KAAKD,MAAYC,GAAM;AACrB,SAAK,IAAIN,EAAW,MAAMK,GAAS,GAAGC,CAAI;AAAA,EAC5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAMD,MAAYC,GAAM;AACtB,SAAK,IAAIN,EAAW,OAAOK,GAAS,GAAGC,CAAI;AAAA,EAC7C;AACF;"}